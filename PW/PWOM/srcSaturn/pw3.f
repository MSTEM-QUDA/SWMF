C# QSUB -q econ -lT 03:00:00 -lM 2Mw
Cset echo
Cja
Cmkdir /usr/tmp/tamas/
Ccd /usr/tmp/tamas/
Cendif
Cmkdir /usr/tmp/tamas/PW.1
Ccd /usr/tmp/tamas/PW.1
Ccat > code.f << 'EOF'
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     THIS PROGRAM SOLVES THE SIMPLE HYDRODYNAMIC EQUATIONS WITH       C
C     HEAT CONDUCTION AND FRICTION.                                    C
C                                                                      C
C     LIST OF LOGICAL I/O UNITS:                                       C
C                                                                      C
C          5  -  INPUT CONTROL CARDS                                   C
C          16 -  DETAILED LINE PRINTER OUTPUT                          C
C          7  -  RESTART OUTPUT FILE                                   C
C          8  -  RESTART INPUT FILE                                    C
C          9  -  COMPRESSED OUTPUT FILE FOR COLOR GRAPHICS             C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C photoelectron impact ionization modified for no conjugate hemisphere
C P. E. sources. See Subroutine Glowex, variable 'rat' D. Cannata 9May90
C 
C ADDED SUBROUTINE CALL FOR IMPACT IONIZATION "call precip" PRESENTLY
C HARD WIRED FOR POLAR RAIN FOR INVARIENT LATITUDES GREATER THAN 75 DEG.
C CHANGES FOR CUSP OR AURORAL PRECIPITATION CAN BE MADE BY CHANGING
C ALF1(x) AND FLUX1(x) ARRAY, x=1->4. MODIFIFIED BY DICK AND STEVE 6-90.
C
C 2 time step acceleration implemented. Subroutines with names ending in 
C 1 or 2 refer to lower and upper regions of flux tube; those ending in
C W treat the whole flux tube. NTS = ratio of larger time step to
C smaller time step. NCL = number of cells in lower region.
C MSTEP = counter used to keep track  of time steps; whole field line
C done for MSTEP = NTS.  S. Guiter 14May90

      PROGRAM POLAR_WIND

      INCLUDE 'common_variables.f'
      INTEGER NOTP(100)
C      logical IsRestart
C
CALEX define the output files and attaching units
      CHARACTER*100 NameInput, NameOutput, NameGraphics, NameRestart
      NameInput    = 'pw.input'
      NameOutput   = 'Output.dat'
      NameGraphics = 'graphics_output.dat'
      NameRestart  = 'Restart.new'

      iUnitInput = 11
C      call CON_get_io_new(iUnitInput)
      OPEN(iUnitInput, FILE=NameInput)

      iUnitOutput = 16
C      call CON_get_io_new(iUnitOutput)
      OPEN(UNIT=16, FILE=NameOutput)

      iUnitGraphics = 9
C      call CON_get_io_new(iUnitGraphics)
      OPEN(iUnitGraphics, FILE=NameGraphics)

      iUnitRestart = 7
C      call CON_get_io_new(iUnitRestart)
      OPEN(iUnitRestart, FILE=NameRestart)

C
C
      NTS = 1
      NCL = 60


      READ(11,*) TMAX
      WRITE(16,*) TMAX
      READ(11,*) NPT
      WRITE(16,21) NPT
21    FORMAT(2X,I8)
      do k=1,nPt
         READ (11,*) NOTP(K)
      enddo
      WRITE (16,21) (NOTP(K),K=1,NPT)
      KSTEP=1
      NSTEP=1
      MSTEP=1
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     READ THE NUMBER OF CELLS                                         C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C      READ (5,21) NDIM
CALEX ndim is the actual gridsize used
      NDIM=390
      WRITE (16,21) NDIM
      NDIM2=NDIM-1
      NDIM1=NDIM+1
      NDIMM=NDIM+2
      
      
      read(11,*) IsRestart
      if (IsRestart) then
         write(*,*) IsRestart
      endif

C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     DEFINE THE INITIAL CONDITIONS IN THE CELLS AND AT CELL           C
C           BOUNDARIES                                                 C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
CALEX The time=0 statements will have to be changed later
      TIME=0
      
      if(IsRestart)then
         OPEN(UNIT=8,FILE='RESTART.DAT',STATUS='OLD')
         READ (8,2001) TIME,DDT1,NS
C
c         TIME=0
C
         READ (8,2002) (XXX,UOXYG(K),POXYG(K),DOXYG(K),TOXYG(K),K=1,NDIM)
         READ (8,2002) (XXX,UHEL(K),PHEL(K),DHEL(K),THEL(K),K=1,NDIM)
         READ (8,2002) (XXX,UHYD(K),PHYD(K),DHYD(K),THYD(K),K=1,NDIM)
         READ (8,2002) (XXX,UELECT(K),PELECT(K),DELECT(K),TELECT(K),
     &        K=1,NDIM)
         CLOSE(UNIT=8)
 2001    FORMAT(2(1PE16.6),I10)
 2002    FORMAT(5(1PE16.6))
      endif

C----------------------------------------------------------------------C
C
C      DO 2119 I=1,NDIM
C      UOXYG(I)=0.
C      UHEL(I)=0.
C      UHYD(I)=0.
C      UELECT(I)=0.
C2119  CONTINUE
C
C----------------------------------------------------------------------C
111   CALL STRT

CALEX This is the start of a while loop that carries out the main steps of
CALEX the simulation
1     CONTINUE
      IF (MSTEP .NE. NTS) THEN
         CALL CLFMO
         CALL CLFMHE
         CALL CLFMH
         CURHLP=EXP(-0.5*(TIME-CURTIM0)**2/CURTIM**2)
         DO 6 K=1,NCL
            UOXYG(K)=CELLNW(1,K)
            POXYG(K)=CELLNW(2,K)
            DOXYG(K)=CELLNW(3,K)
            TOXYG(K)=CELLNW(4,K)
            UHYD(K)=CELLNW(5,K)
            PHYD(K)=CELLNW(6,K)
            DHYD(K)=CELLNW(7,K)
            THYD(K)=CELLNW(8,K)
            UHEL(K)=CELLNW(9,K)
            PHEL(K)=CELLNW(10,K)
            DHEL(K)=CELLNW(11,K)
            THEL(K)=CELLNW(12,K)
            DELECT(K)=RTHDEL*DHYD(K)+RTOXEL*DOXYG(K)+RTHEEL*DHEL(K)
            UELECT(K)=(RTHDEL*DHYD(K)*UHYD(K)+RTOXEL*DOXYG(K)*
     $           UOXYG(K)+RTHEEL*DHEL(K)*UHEL(K)
     $           -1.8965E-18*CURHLP*CURR(K))/DELECT(K)
 6       CONTINUE
         CALL NEWBGD
         CALL ELFLDW
      ELSE
         CALL CLFMO
         CALL CLFMHE
         CALL CLFMH
         CURHLP=EXP(-0.5*(TIME-CURTIM0)**2/CURTIM**2)
         DO 2 K=1,NDIM
            UOXYG(K)=CELLNW(1,K)
            POXYG(K)=CELLNW(2,K)
            DOXYG(K)=CELLNW(3,K)
            TOXYG(K)=CELLNW(4,K)
            UHYD(K)=CELLNW(5,K)
            PHYD(K)=CELLNW(6,K)
            DHYD(K)=CELLNW(7,K)
            THYD(K)=CELLNW(8,K)
            UHEL(K)=CELLNW(9,K)
            PHEL(K)=CELLNW(10,K)
            DHEL(K)=CELLNW(11,K)
            THEL(K)=CELLNW(12,K)
            DELECT(K)=RTHDEL*DHYD(K)+RTOXEL*DOXYG(K)+RTHEEL*DHEL(K)
            UELECT(K)=(RTHDEL*DHYD(K)*UHYD(K)+RTOXEL*DOXYG(K)*
     $           UOXYG(K)+RTHEEL*DHEL(K)*UHEL(K)
     $           -1.8965E-18*CURHLP*CURR(K))/DELECT(K)
 2       CONTINUE
         CALL CLTEMPW
         CALL CLFME2W
         CALL NEWBGD
         CALL COLLIS(NDIM)
         CALL ELFLDW
      ENDIF
      TIME=TIME+DT
      IF (NSTEP.NE.NOTP(KSTEP)) GO TO 3
      KSTEP=KSTEP+1
      CALL PRNTOP
      CALL PRNTHE
      CALL PRNTHP
      CALL PRNTEL
      CALL PRNTEF
      CALL PRNTSM
      REWIND 7
C
C      TIME=0.
C
      WRITE (7,10) TIME,DT,NSTEP
10    FORMAT(2(1PE16.6),I10)
      WRITE (7,11)(RAD(K),UOXYG(K),POXYG(K),DOXYG(K),TOXYG(K),K=1,NDIM)
      WRITE (7,11)(RAD(K),UHEL(K),PHEL(K),DHEL(K),THEL(K),K=1,NDIM)
      WRITE (7,11)(RAD(K),UHYD(K),PHYD(K),DHYD(K),THYD(K),K=1,NDIM)
      WRITE (7,11)(RAD(K),UELECT(K),PELECT(K),DELECT(K),TELECT(K),
     ;K=1,NDIM)
11    FORMAT(5(1PE16.6))
C
3     CONTINUE
      IF (TIME.GT.TMAX) STOP
      NSTEP=NSTEP+1
      IF (MSTEP .EQ. NTS) MSTEP=0 
      MSTEP=MSTEP+1
      IF (KSTEP.GT.NPT) STOP
      IF (MSTEP .NE. NTS) THEN
         CALL CLFMO
         CALL CLFMHE
         CALL CLFMH
         CURHLP=EXP(-0.5*(TIME-CURTIM0)**2/CURTIM**2)
         DO 7 K=1,NCL
            UOXYG(K)=CELLNW(1,K)
            POXYG(K)=CELLNW(2,K)
            DOXYG(K)=CELLNW(3,K)
            TOXYG(K)=CELLNW(4,K)
            UHYD(K)=CELLNW(5,K)
            PHYD(K)=CELLNW(6,K)
            DHYD(K)=CELLNW(7,K)
            THYD(K)=CELLNW(8,K)
            UHEL(K)=CELLNW(9,K)
            PHEL(K)=CELLNW(10,K)
            DHEL(K)=CELLNW(11,K)
            THEL(K)=CELLNW(12,K)
            DELECT(K)=RTHDEL*DHYD(K)+RTOXEL*DOXYG(K)+RTHEEL*DHEL(K)
            UELECT(K)=(RTHDEL*DHYD(K)*UHYD(K)+RTOXEL*DOXYG(K)*
     $           UOXYG(K)+RTHEEL*DHEL(K)*UHEL(K)
     $           -1.8965E-18*CURHLP*CURR(K))/DELECT(K)
 7       CONTINUE
         CALL NEWBGD
         CALL ELFLDW
      ELSE
         CALL CLTEMPW
         CALL CLFME2W
         CALL CLFMO
         CALL CLFMHE
         CALL CLFMH
         CURHLP=EXP(-0.5*(TIME-CURTIM0)**2/CURTIM**2)
         DO 4 K=1,NDIM
            UOXYG(K)=CELLNW(1,K)
            POXYG(K)=CELLNW(2,K)
            DOXYG(K)=CELLNW(3,K)
            TOXYG(K)=CELLNW(4,K)
            UHYD(K)=CELLNW(5,K)
            PHYD(K)=CELLNW(6,K)
            DHYD(K)=CELLNW(7,K)
            THYD(K)=CELLNW(8,K)
            UHEL(K)=CELLNW(9,K)
            PHEL(K)=CELLNW(10,K)
            DHEL(K)=CELLNW(11,K)
            THEL(K)=CELLNW(12,K)
            DELECT(K)=RTHDEL*DHYD(K)+RTOXEL*DOXYG(K)+RTHEEL*DHEL(K)
            UELECT(K)=(RTHDEL*DHYD(K)*UHYD(K)+RTOXEL*DOXYG(K)*
     $           UOXYG(K)+RTHEEL*DHEL(K)*UHEL(K)
     $           -1.8965E-18*CURHLP*CURR(K))/DELECT(K)
 4       CONTINUE
         CALL NEWBGD
         CALL COLLIS(NDIM)
         CALL ELFLDW
      ENDIF
      TIME=TIME+DT

CALEX This determines whether or not to output a restart file      
      IF (NSTEP.NE.NOTP(KSTEP)) GO TO 5
      KSTEP=KSTEP+1
      CALL PRNTOP
      CALL PRNTHE
      CALL PRNTHP
      CALL PRNTEL
      CALL PRNTEF
      CALL PRNTSM
      REWIND 7
C
C      TIME=0.
C
      WRITE (7,10) TIME,DT,NSTEP
      WRITE (7,11)(RAD(K),UOXYG(K),POXYG(K),DOXYG(K),TOXYG(K),K=1,NDIM)
      WRITE (7,11)(RAD(K),UHEL(K),PHEL(K),DHEL(K),THEL(K),K=1,NDIM)
      WRITE (7,11)(RAD(K),UHYD(K),PHYD(K),DHYD(K),THYD(K),K=1,NDIM)
      WRITE (7,11)(RAD(K),UELECT(K),PELECT(K),DELECT(K),TELECT(K),
     ;K=1,NDIM)
C
5     CONTINUE
      IF (TIME.GT.TMAX) STOP
      NSTEP=NSTEP+1
      IF (MSTEP .EQ. NTS) MSTEP=0 
      MSTEP=MSTEP+1
      IF (KSTEP.GT.NPT) STOP
      GO TO 1
      
CALEX close the output files      

      CLOSE(UNIT=7)
      CLOSE(UNIT=16)
      CLOSE(UNIT=9)
      CLOSE(UNIT=11)

      END
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     ALEX(10/11/04): I THINK THAT THIS SUBROUTINE INITIALIZES THE GRID AND
C     AND SETS CONSTANTS. IT MUST BE INITIALIZED EVERY TIME THE CODE RUNS
C     EVEN IF RESTARTING FROM A FILE.
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      SUBROUTINE STRT
C
C
      INCLUDE 'common_variables.f'

C
      NPT1=14
      NPT2=16
      NPT3=30
      NPT4=35
      NPT5=60
      NPT6=70
1     FORMAT(5X,I5)
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     DEFINE THE GAS SPECIFIC HEAT AT CONSTANT PRESSURE (CP),          C
C           THE AVERAGE MOLECULAR MASS (AVMASS), THE ACTUAL            C
C           GAS CONSTANT (RGAS) AND THE SPECIFIC HEAT RATIO (GAMMA)    C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C Gas constant = k_Boltzmann/AMU
      RGAS=8.314E7
C Adiabatic index
      GAMMA=5./3.
C AMU in gramms
      XAMU=1.6606655E-24
C Mass of atomic O in gramms
      XMSO=15.994*XAMU
C Mass of atomic H in gramms
      XMSH=1.00797*XAMU
C Mass of atomic He in gramms
      XMSHE=4.0026*XAMU
C Mass of electron in gramms
      XMSE=9.109534E-28
C Relative mass of atomic O to electron
      RTOXEL=XMSE/XMSO
C Relative mass of atomic H to electron
      RTHDEL=XMSE/XMSH
C Relative mass of atomic He to electron
      RTHEEL=XMSE/XMSHE
C kB/m_O
      RGASO=RGAS*XAMU/XMSO
C kB/m_H
      RGASH=RGAS*XAMU/XMSH
C kB/m_He
      RGASHE=RGAS*XAMU/XMSHE
C kB/m_e
      RGASE=RGAS*XAMU/XMSE
      GMIN1=GAMMA-1.
      GMIN2=GMIN1/2.
      GPL1=GAMMA+1.
      GPL2=GPL1/2.
      GM12=GMIN1/GAMMA/2.
      GRAR=GAMMA/GMIN2
      GREC=1./GAMMA
      CPO=GAMMA*RGASO/GMIN1
      CPH=GAMMA*RGASH/GMIN1
      CPHE=GAMMA*RGASHE/GMIN1
      CPE=GAMMA*RGASE/GMIN1
      CVO=RGASO/GMIN1
      CVH=RGASH/GMIN1
      CVHE=RGASHE/GMIN1
      CVE=RGASE/GMIN1
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     DEFINE THE RADIAL GRID STRUCTURE                                 C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C      READ (5,2) DRBND
CALEX DRBND=altitude step? I think the units here are in cm not meters
CALEX like most of the code.
      DRBND=2.E6
      WRITE (16,2) DRBND
CALEX RN=lower boundary of the simulation? 
CALEX RAD=radial distance of cell centers?      
CALEX RBOUND=radial distance of lower boundary of cell     
CALEX ALTD = same as RAD but distance is from surface, not center of planet
      RN=6.55677E8+0.5*DRBND
      DO 20 KSTEP=1,NDIM1
         RBOUND(KSTEP)=RN+(KSTEP-1)*DRBND
20    CONTINUE
      DO 30 KSTEP=1,NDIM
         KSTEP1=KSTEP+1
         RAD(KSTEP)=(RBOUND(KSTEP)+RBOUND(KSTEP1))/2.
         ALTD(KSTEP)=RAD(KSTEP)-6356.77E5
 30   CONTINUE
      ALTMIN=ALTD(1)-DRBND
      ALTMAX=ALTD(NDIM)+DRBND
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     READ THE EXPONENT OF THE  A(R)=R**NEXP  AREA FUNCTION            C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C      READ (5,1) NEXP
      NEXP=3
      WRITE (16,1) NEXP
CAlex      write(*,*) NEXP

CALEX AR stands for area function. 12 is the lower boundary of the cell
CALEX and 23 is the upper boundary

      DO 40 K=1,NDIM
      DAREA(K)=NEXP/RAD(K)
      AR12(K)=(RBOUND(K)/RAD(K))**NEXP
      AR23(K)=(RBOUND(K+1)/RAD(K))**NEXP
40    CONTINUE
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     READ FIELD ALIGNED CURRENT DENSITY AT LOWEST GRID POINT          C
C        (UNIT=AMPERE/M**2)                                            C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C      READ (5,2) CURR(1)
      CURR(1)=0.E-6
      WRITE(16,2) CURR(1)
      CURR(1)=2.998E5*CURR(1)
      CURTIM=150.
      CURTIM0=500.
      CURRMN=CURR(1)*(RAD(1)/(RAD(1)-DRBND))**NEXP
      CURRMX=CURR(1)*(RAD(1)/(RAD(NDIM)+DRBND))**NEXP
C      SGN1=1.
C      IF (CURR(1).LT.0.) SGN1=-1.
C      IF (ABS(CURR(1)).LT.1.E-4) SGN1=0.
C      CURRMX=SGN1*0.2998*(RAD(1)/(RAD(NDIM)+DRBND))**NEXP
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     DEFINE THE NEUTRAL ATMOSPHERE MODEL                              C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C IF GEOMAGNETIC COORDINATES ARE SPECIFIED, SET IART TO 1 !!!!!
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     DEFINE DATE                                                      C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C SOLAR MAXIMUM WINTER
C      IYD=80360
C      F107A=180.
C      F107=180.
C SOLAR MAXIMUM SUMMER
C      IYD=80172
C      F107A=180.
C      F107=180.
C SOLAR MINIMUM WINTER
C      IYD=84360
C      F107A=60.
C      F107=60.
C SOLAR MINIMUM SUMMER
C     IYD=84172
C     F107A=60.
C     F107=60.
C      SEC=43200.
C      STL=12.
C      GMLAT=80.
C      GMLONG=0.
C      IART=1
C      GLAT=80.
C      GLONG=0.
C      IART=0
C FEB 20, 1990
CALEX IYD=year_day of year

      IYD=90051
      SEC=20.75*3600.
      F107A=180.
      F107=189.5
      IART=0
      GLONG=325.13
      GLAT=70.47
C END
      CALL GGM(IART,GLONG,GLAT,GMLONG,GMLAT)
      DO 49 I=1,7
      AP(I)=50.
49    CONTINUE 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
C                                                                      C
      DO 50 K=1,NDIM
         CALL MODATM(ALTD(K),XO2(K),XN2(K),XO(K),XH(K),XHE(K),XTN(K))
50    CONTINUE
      CALL GLOWEX
      DO 1099 J = 1,40
         WRITE (16,9999) ALTD(J),PHOTOTF(J+1) 
 9999    FORMAT(2X,1PE15.3,2X,1PE15.3)
 1099 CONTINUE
C
      CALL STRT1
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     DEFINE TOPSIDE ELECTRON HEAT FLUX AND PARAMETRIC HEAT SOURCES    C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C      READ (5,2) ETOP,ELFXIN
      ETOP=1.0E-3
      ELFXIN=0.
C
C      ELFXIN=9.
C
2     FORMAT(6X,1PE15.4)
      WRITE (16,2) ETOP,ELFXIN
C      READ (5,2) HEATI1,HEATI2,ELHEAT
      HEATI1=0.
      HEATI2=0.
C
C      HEATI1=1.0E-7
C
      HEATI2=2.5E-11
C
      ELHEAT=0.
      WRITE(16,2) HEATI1,HEATI2,ELHEAT
      HEATA1=3.5E7
      HEATA2=2.0E8
      HEATA3=1.5E8
      HEATS1=2.*1.0E7**2
      HEATS2=2.*2.5E7**2
      HEATS3=2.*1.0E7**2
      DO 53 K=1,NDIM
      HEATX1=EXP(-(ALTD(K)-HEATA1)**2/HEATS1)
      HEATX2=EXP(-(ALTD(K)-HEATA2)**2/HEATS2)
      HEATX3=EXP(-(ALTD(K)-HEATA3)**2/HEATS3)
      QOXYG(K)=(HEATI1*HEATX1+HEATI2*HEATX2)/
     #         (DOXYG(K)+DHYD(K)+DHEL(K))
      QHYD(K)=QOXYG(K)/16.
      QHEL(K)=QOXYG(K)/4.
C
C      QOXYG(K)=0.
C
      QELECT(K)=ELHEAT*HEATX3
53    CONTINUE
      DO 54 K=1,NDIM,10
      WRITE (16,52) ALTD(K),QOXYG(K),QHYD(K),QHEL(K),QELECT(K)
52    FORMAT(5(1PE15.4))
54    CONTINUE
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     READ STARTING TIME, TERMINATION TIME AND BASIC TIME STEP         C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C      READ (5,4) TIME,TMAX
CCC      TIME=0.
CCC      TMAX=1.E6
      
      WRITE (16,4) TIME,TMAX
4     FORMAT(6X,2(1PE15.4))
C      READ (5,2) DT
      DT=1./10.
      DTX1=DT
      DTR1=DTX1/DRBND
      DTX2=DT*NTS
      DTR2=DTX2/DRBND
      WRITE (16,2) DT
      H0=0.5/DRBND
      H1E1=1./DTX1
      H1O1=1./DTX1
      H1H1=1./DTX1
      H1E2=1./DTX2
      H1O2=1./DTX2
      H1H2=1./DTX2
      H2=1./DRBND/DRBND
      H3=0.5*H2
      H4=0.5*H0
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     DEFINE THE HEAT CONDUCTION PARAMETERS                            C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
CALEX terms with "surf" in them refer to surface values      
      HLPE0=GMIN1/RGASE
      HLPE=1.23E-6*GMIN1/RGASE
      HLPO=1.24E-8*(XMSE/XMSO)*GMIN1/RGASO
      HLPHE=2.5*(RGASHE**2*XMSHE)*GMIN1/RGASHE
      HLPH=4.96E-8*(XMSE/XMSH)*GMIN1/RGASH
      CALL MODATM(ALTMIN,XNO2,XNN2,XNO,XNH,XNHE,TEMP)
CALEX I believe these are heat conduction coef. at lower boundary
      CXHN2=3.36E-9*XNN2
      CXHO2=3.20E-9*XNO2
      CXHO=6.61E-11*XNO*SQRT(TSURFH)*(1.-0.047*ALOG10(TSURFH))**2
      CXHOX=1.23*(DSURFO/XMSO)/TSURFH**1.5
      CXHEN2=1.60E-9*XNN2
      CXHEO2=1.53E-9*XNO2
      CXHEHE=8.73E-11*XNHE*SQRT(TSURHE)*(1.-0.093*ALOG10(TSURHE))**2
      CXHEO=1.01E-9*XNO
      CXHEH=4.71E-10*XNH
      CXHEOX=0.57*(DSURFO/XMSO)/TSURHE**1.5
      CXHEHD=0.28*(DSURFH/XMSH)/TSURHE**1.5
CALEX I believe these are heat conductivities      
      TCSFO=HLPO*(DSURFO/DSURFE)*TSURFO**2.5
      TCSFE=HLPE*TSURFE**2.5
      TCSFH=HLPH*(DSURFH/DSURFE)*TSURFH**2.5
      TCSFH=TCSFH/(1.+(0.7692*(CXHN2+CXHO2)+1.0962*CXHO)/CXHOX)
      TCSFHE=HLPHE*(DSURHE/XMSHE)*TSURHE
      TCSFHE=TCSFHE/(0.99*CXHEN2+0.99*CXHEO2+1.02*CXHEO+1.48*CXHEHE+
     $2.22*CXHEH+1.21*CXHEOX+2.23*CXHEHD)      
      CALL MODATM(ALTMAX,XNO2,XNN2,XNO,XNH,XNHE,TEMP)
      XTNMAX=TEMP
CALEX I believe these are heat conduction coef. at upper boundary
      CZHN2=3.36E-9*XNN2
      CZHO2=3.20E-9*XNO2
      CZHO=6.61E-11*XNO
      CZHOX=1.23*17.**1.5/XMSO
      CZHEN2=1.60E-9*XNN2
      CZHEO2=1.53E-9*XNO2
      CZHEHE=8.73E-11*XNHE
      CZHEO=1.01E-9*XNO
      CZHEH=4.71E-10*XNH
      CZHEOX=0.57*5.**1.5/XMSO
      CZHEHD=0.28*5.**1.5/XMSH
      ETOP=ETOP*DRBND/1.23E-6
      CALL NEWBGD
3     FORMAT(4X,I6)
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     PRINT INITIAL AND BOUNDARY PARAMETERS                            C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C      READ(5,3) NCNPRT
      NCNPRT=0
      WRITE (16,3) NCNPRT
      CALL MODATM(ALTMIN,XNO2,XNN2,XNO,XNH,XNHE,XNT)
      CALL MODATM(ALTMAX,YNO2,YNN2,YNO,YNH,YNHE,YNT)
      DO 60 I=1,NDIM
      ALTD(I)=ALTD(I)/1.E5
60    CONTINUE
      ALTMIN=ALTMIN/1.E5
      ALTMAX=ALTMAX/1.E5
      ETOP1=ETOP*1.23E-6/DRBND
      CALL COLLIS(NDIM)
      CALL ELFLDW
      IF (NCNPRT.NE.0) GO TO 999
      WRITE(16,1005) NDIM
1005  FORMAT(1H1,5X,'NUMBER OF CELLS=',I4)
      WRITE(16,1020) NEXP
1020  FORMAT(5X,'NEXP=',I1)
      WRITE (16,1008) GAMMA,RGASO,CPO,CVO,RGASHE,CPHE,CVHE,
     ;RGASH,CPH,CVH,RGASE,CPE,CVE
1008  FORMAT(5X,'GAMMA=',F4.2,/5X,'RGAS(OXYGEN)=',1PE10.4,7X,
     ;'CP(OXYGEN)=',1PE10.4,7X,'CV(OXYGEN)=',1PE10.4
     ;/5X,'RGAS(HELIUM)=',1PE10.4,7X,
     ;'CP(HELIUM)=',1PE10.4,7X,'CV(HELIUM)=',1PE10.4/5X,
     ;'RGAS(HYDROGEN)=',1PE10.4,5X,'CP(HYDROGEN)=',1PE10.4,5X,
     ;'CV(HYDROGEN)=',1PE10.4,/5X,'RGAS(ELECTRON)=',1PE10.4,5X
     ;,'CP(ELECTRON)=',1PE10.4,5X,'CV(ELECTRON)=',1PE10.4)
      WRITE (16,1023)
1023  FORMAT(1H0,5X,'LOWER BOUNDARY PLASMA PARAMETERS:')
      WRITE(16,1001)
1001  FORMAT(1H ,4X,'OXYGEN:')
      WRITE (16,1009) USURFO,PSURFO,DSURFO,TSURFO,WSURFO
1009  FORMAT(5X,'VELOCITY=',1PE11.4,3X,'PRESSURE=',1PE10.4,3X,
     ;'MASS DENSITY=',1PE10.4,3X,'TEMPERATURE=',1PE10.4,3X,
     ;'SOUND VELOCITY=',1PE10.4)
      WRITE(16,10021)
10021 FORMAT(1H ,4X,'HELIUM:')
      WRITE (16,1009) USURHE,PSURHE,DSURHE,TSURHE,WSURHE
      WRITE(16,1002)
1002  FORMAT(1H ,4X,'HYDROGEN:')
      WRITE (16,1009) USURFH,PSURFH,DSURFH,TSURFH,WSURFH
      WRITE(16,1003)
1003  FORMAT(1H ,4X,'ELECTRONS:')
      WRITE (16,1009) USURFE,PSURFE,DSURFE,TSURFE,WSURFE
      WRITE (16,1027)
1027  FORMAT(1H0,5X,'UPPER BOUNDARY INITIAL PLASMA PARAMETERS:')
      WRITE (16,1004)
1004  FORMAT(1H ,4X,'OXYGEN:')
      WRITE (16,1009) UBGNDO,PBGNDO,DBGNDO,TBGNDO,WBGNDO
      WRITE (16,1088)
1088  FORMAT(1H ,4X,'HELIUM:')
      WRITE (16,1009) UBGNHE,PBGNHE,DBGNHE,TBGNHE,WBGNHE
      WRITE (16,1006)
1006  FORMAT(1H ,4X,'HYDROGEN:')
      WRITE (16,1009) UBGNDH,PBGNDH,DBGNDH,TBGNDH,WBGNDH
      WRITE(16,1007)
1007  FORMAT(1H ,4X,'ELECTRONS:')
      WRITE (16,1009) UBGNDE,PBGNDE,DBGNDE,TBGNDE,WBGNDE
      WRITE (16,1029) ETOP1
1029  FORMAT(1H0,5X,'TOPSIDE ELECTRON HEATING RATE:',1PE10.4,
     ;' ERGS/CM**3/SEC')
      WRITE (16,1050) 
1050  FORMAT(1H0,5X,'ENERGY COLLISION TERM COEFFICIENTS')
      WRITE (16,1051) CTOXN2,CTOXO2,CTOXO,CTOXHE,CTOXH,CTOXHD,CTOXHL,
     $CTOXEL,CTHEN2,CTHEO2,CTHEO,CTHEHE,CTHEH,CTHEOX,CTHEHD,CTHEEL,
     $CTHN2,CTHO2,CTHO,CTHHE,CTHH,CTHOX,CTHHL,CTHEL,CTELN2,CTELO2,
     $CTELO,CTELHE,CTELH,CTELOX,CTELHL,CTELHD
1051  FORMAT(1H0,5X,'CTOXN2=',1PE10.4,5X,'CTOXO2=',1PE10.4,4X,
     $'CTOXO=',1PE10.4/5X,'CTOXHE=',1PE10.4,5X,'CTOXH=',1PE10.4,5X,
     $'CTOXHD=',1PE10.4,5X,'CTOXHL=',1PE10.4,5X,'CTOXEL=',1PE10.4/
     $5X,'CTHEN2=',1PE10.4,5X,'CTHEO2=',1PE10.4,4X,
     $'CTHEO=',1PE10.4/5X,'CTHEHE=',1PE10.4,5X,'CTHEH=',1PE10.4,5X,
     $'CTHEOX=',1PE10.4,5X,'CTHEHD=',1PE10.4,5X,'CTHEEL=',1PE10.4/
     $5X,'CTHN2=',1PE10.4,6X,'CTHO2=',1PE10.4,5X,'CTHO=',1PE10.4/5X,
     $'CTHHE=',1PE10.4,6X,'CTHH=',1PE10.4,6X,'CTHOX=',1PE10.4,6X,
     $'CTHHL=',1PE10.4,6X,'CTHEL=',1PE10.4/5X,
     $'CTELN2=',1PE10.4,5X,'CTELO2=',1PE10.4,4X,
     $'CTELO=',1PE10.4/5X,'CTELHE=',1PE10.4,5X,'CTELH=',1PE10.4,5X,
     $'CTELOX=',1PE10.4,5X,'CTELHL=',1PE10.4,5X,'CTELHD=',1PE10.4,5X)
      WRITE (16,1052) CMOXN2,CMOXO2,CMOXO,CMOXHE,CMOXH,CMOXHD,CMOXHL,
     $CMOXEL,CMHEN2,CMHEO2,CMHEO,CMHEHE,CMHEH,CMHEOX,CMHEHD,CMHEEL,
     $CMHN2,CMHO2,CMHO,CMHHE,CMHH,CMHOX,CMHHL,CMHEL,CMELN2,CMELO2,
     $CMELO,CMELHE,CMELH,CMELOX,CMELHL,CMELHD
1052  FORMAT(1H0,5X,'CMOXN2=',1PE10.4,5X,'CMOXO2=',1PE10.4,4X,
     $'CMOXO=',1PE10.4/5X,'CMOXHE=',1PE10.4,5X,'CMOXH=',1PE10.4,5X,
     $'CMOXHD=',1PE10.4,5X,'CMOXHL=',1PE10.4,5X,'CMOXEL=',1PE10.4/
     $5X,'CMHEN2=',1PE10.4,5X,'CMHEO2=',1PE10.4,4X,
     $'CMHEO=',1PE10.4/5X,'CMHEHE=',1PE10.4,5X,'CMHEH=',1PE10.4,5X,
     $'CMHEOX=',1PE10.4,5X,'CMHEHD=',1PE10.4,5X,'CMHEEL=',1PE10.4/
     $5X,'CMHN2=',1PE10.4,6X,'CMHO2=',1PE10.4,5X,'CMHO=',1PE10.4/5X,
     $'CMHHE=',1PE10.4,6X,'CMHH=',1PE10.4,6X,'CMHOX=',1PE10.4,6X,
     $'CMHHL=',1PE10.4,6X,'CMHEL=',1PE10.4/5X,
     $'CMELN2=',1PE10.4,5X,'CMELO2=',1PE10.4,4X,
     $'CMELO=',1PE10.4/5X,'CMELHE=',1PE10.4,5X,'CMELH=',1PE10.4,5X,
     $'CMELOX=',1PE10.4,5X,'CMELHL=',1PE10.4,5X,'CMELHD=',1PE10.4,5X)
      WRITE (16,1053)
1053  FORMAT(1H0,5X,'HEAT CONDUCTION COEFFICIENTS AT UPPER BOUNDARY')
      WRITE (16,1054) CZHN2,CZHO2,CZHO,CZHOX,CZHEN2,CZHEO2,CZHEHE,
     $CZHEO,CZHEH,CZHEOX,CZHEHD,XTNMAX
1054  FORMAT(1H0,5X,'CZHN2=',1PE10.4,6X,'CZHO2=',1PE10.4,6X,
     $'CZHO=',1PE10.4,7X,'CZHOX=',1PE10.4/5X,'CZHEN2=',1PE10.4,5X,
     $'CZHEO2=',1PE10.4,5X,'CZHEHE=',1PE10.4,5X,'CZHEO=',1PE10.4/
     $5X,'CZHEH=',1PE10.4,6X,'CZHEOX=',1PE10.4,5X,'CZHEHD=',
     $1PE10.4/5X,'XTNMAX=',1PE10.4)
      WRITE (16,1012)
1012  FORMAT(1H1,45X,'NEUTRAL ATMOSPHERE NUMBER DENSITIES')
      WRITE(16,1014)
1014  FORMAT(16X,'ALT',13X,'N2',13X,'O2',15X,'O',14X,'HE',
     $15X,'H',15X,'T')
      K=0
      WRITE (16,1022) K, ALTMIN,XNN2,XNO2,XNO,XNHE,XNH,XNT
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 230 K=1,NDMQ
         WRITE(16,1022) K,ALTD(K),XN2(K),XO2(K),XO(K),XHE(K),
     $        XH(K),XTN(K)
 230  CONTINUE
      IF (NDIM.LT.NPT2) GO TO 290
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 240 K=NPT2,NDMQ,2
         WRITE(16,1022) K,ALTD(K),XN2(K),XO2(K),XO(K),XHE(K),
     $        XH(K),XTN(K)
 240  CONTINUE
      IF (NDIM.LT.NPT4) GO TO 290
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 250 K=NPT4,NDMQ,5
         WRITE(16,1022) K,ALTD(K),XN2(K),XO2(K),XO(K),XHE(K),
     $        XH(K),XTN(K)
 250  CONTINUE
      IF (NDIM.LT.NPT6) GO TO 290
      DO 260 K=NPT6,NDIM,10
         WRITE(16,1022) K,ALTD(K),XN2(K),XO2(K),XO(K),XHE(K),
     $        XH(K),XTN(K)
 260  CONTINUE
 290  CONTINUE
      K=NDIM+1
      WRITE (16,1022) K, ALTMAX,YNN2,YNO2,YNO,YNHE,YNH,YNT
      WRITE(16,1015)
1015  FORMAT(1H1,55X,'SOURCE COEFFICIENTS:')
      WRITE (16,1016)
1016  FORMAT(12X,'ALT',6X,'GRAVTY',5X,'FFOX1',5X,'FFOX2',5X,
     ;'FFOX3',5X,'FFOX4',5X,'FFOX5',5X,'FFOX6',4X,'FFHYD1',
     ;4X,'FFHYD2',4X,'FFHE1',5X,'FFHE2')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 291 K=1,NDMQ
      WRITE(16,1019) K,ALTD(K),GRAVTY(K),FFOX1(K),FFOX2(K),
     $FFOX3(K),FFOX4(K),FFOX5(K),FFOX6(K),FFHYD1(K),FFHYD2(K),
     $FFHE1(K),FFHE2(K)
291   CONTINUE
      IF (NDIM.LT.NPT2) GO TO 295
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 292 K=NPT2,NDMQ,2
      WRITE(16,1019) K,ALTD(K),GRAVTY(K),FFOX1(K),FFOX2(K),
     $FFOX3(K),FFOX4(K),FFOX5(K),FFOX6(K),FFHYD1(K),FFHYD2(K),
     $FFHE1(K),FFHE2(K)
292   CONTINUE
      IF (NDIM.LT.NPT4) GO TO 295
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 293 K=NPT4,NDMQ,5
      WRITE(16,1019) K,ALTD(K),GRAVTY(K),FFOX1(K),FFOX2(K),
     $FFOX3(K),FFOX4(K),FFOX5(K),FFOX6(K),FFHYD1(K),FFHYD2(K),
     $FFHE1(K),FFHE2(K)
293   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 295
      DO 294 K=NPT6,NDIM,10
      WRITE(16,1019) K,ALTD(K),GRAVTY(K),FFOX1(K),FFOX2(K),
     $FFOX3(K),FFOX4(K),FFOX5(K),FFOX6(K),FFHYD1(K),FFHYD2(K),
     $FFHE1(K),FFHE2(K)
294   CONTINUE
295   CONTINUE
      WRITE(16,1017)
1017  FORMAT(1H1,50X,'COLLISION COEFFICIENTS FOR OXYGEN')
      WRITE(16,1018)
1018  FORMAT(12X,'ALT',7X,'CLOXN2',6X,'CLOXO2',6X,'CLOXO',7X,
     ;'CLOXHE',6X,'CLOXH',7X,'CLOXHL',6X,'CLOXHD',6X,'CLOXEL')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 530 K=1,NDMQ
      WRITE (16,1180) K,ALTD(K),CLOXN2(K),CLOXO2(K),CLOXO(K),
     $CLOXHE(K),CLOXH(K),CLOXHL(K),CLOXHD(K),CLOXEL(K)
530   CONTINUE
      IF (NDIM.LT.NPT2) GO TO 590
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 540 K=NPT2,NDMQ,2
      WRITE (16,1180) K,ALTD(K),CLOXN2(K),CLOXO2(K),CLOXO(K),
     $CLOXHE(K),CLOXH(K),CLOXHL(K),CLOXHD(K),CLOXEL(K)
540   CONTINUE
      IF (NDIM.LT.NPT4) GO TO 590
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 550 K=NPT4,NDMQ,5
      WRITE (16,1180) K,ALTD(K),CLOXN2(K),CLOXO2(K),CLOXO(K),
     $CLOXHE(K),CLOXH(K),CLOXHL(K),CLOXHD(K),CLOXEL(K)
550   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 590
      DO 560 K=NPT6,NDIM,10
      WRITE (16,1180) K,ALTD(K),CLOXN2(K),CLOXO2(K),CLOXO(K),
     $CLOXHE(K),CLOXH(K),CLOXHL(K),CLOXHD(K),CLOXEL(K)
560   CONTINUE
590   CONTINUE
      WRITE (16,1217)
1217  FORMAT(1H1,50X,'COLLISION COEFFICIENTS FOR HELIUM')
      WRITE(16,1218)
1218  FORMAT(12X,'ALT',7X,'CLHEN2',6X,'CLHEO2',6X,'CLHEO',7X,
     ;'CLHEHE',6X,'CLHEH',7X,'CLHEOX',6X,'CLHEHD',6X,'CLHEEL')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 1230 K=1,NDMQ
      WRITE (16,1180) K,ALTD(K),CLHEN2(K),CLHEO2(K),CLHEO(K),
     $CLHEHE(K),CLHEH(K),CLHEOX(K),CLHEHD(K),CLHEEL(K)
1230  CONTINUE
      IF (NDIM.LT.NPT2) GO TO 1290
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 1240 K=NPT2,NDMQ,2
      WRITE (16,1180) K,ALTD(K),CLHEN2(K),CLHEO2(K),CLHEO(K),
     $CLHEHE(K),CLHEH(K),CLHEOX(K),CLHEHD(K),CLHEEL(K)
1240  CONTINUE
      IF (NDIM.LT.NPT4) GO TO 1290
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 1250 K=NPT4,NDMQ,5
      WRITE (16,1180) K,ALTD(K),CLHEN2(K),CLHEO2(K),CLHEO(K),
     $CLHEHE(K),CLHEH(K),CLHEOX(K),CLHEHD(K),CLHEEL(K)
1250  CONTINUE
      IF (NDIM.LT.NPT6) GO TO 1290
      DO 1260 K=NPT6,NDIM,10
      WRITE (16,1180) K,ALTD(K),CLHEN2(K),CLHEO2(K),CLHEO(K),
     $CLHEHE(K),CLHEH(K),CLHEOX(K),CLHEHD(K),CLHEEL(K)
1260  CONTINUE
1290  CONTINUE
      WRITE (16,2217)
2217  FORMAT(1H1,50X,'COLLISION COEFFICIENTS FOR HYDROGEN')
      WRITE(16,2218)
2218  FORMAT(12X,'ALT',7X,'CLHN2',7X,'CLHO2',7X,'CLHO',8X,
     ;'CLHHE',7X,'CLHH',8X,'CLHOX',7X,'CLHHL',7X,'CLHEL')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 2230 K=1,NDMQ
      WRITE (16,1180) K,ALTD(K),CLHN2(K),CLHO2(K),CLHO(K),
     $CLHHE(K),CLHH(K),CLHOX(K),CLHHL(K),CLHEL(K)
2230  CONTINUE
      IF (NDIM.LT.NPT2) GO TO 2290
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 2240 K=NPT2,NDMQ,2
      WRITE (16,1180) K,ALTD(K),CLHN2(K),CLHO2(K),CLHO(K),
     $CLHHE(K),CLHH(K),CLHOX(K),CLHHL(K),CLHEL(K)
2240  CONTINUE
      IF (NDIM.LT.NPT4) GO TO 2290
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 2250 K=NPT4,NDMQ,5
      WRITE (16,1180) K,ALTD(K),CLHN2(K),CLHO2(K),CLHO(K),
     $CLHHE(K),CLHH(K),CLHOX(K),CLHHL(K),CLHEL(K)
2250  CONTINUE
      IF (NDIM.LT.NPT6) GO TO 2290
      DO 2260 K=NPT6,NDIM,10
      WRITE (16,1180) K,ALTD(K),CLHN2(K),CLHO2(K),CLHO(K),
     $CLHHE(K),CLHH(K),CLHOX(K),CLHHL(K),CLHEL(K)
2260  CONTINUE
2290  CONTINUE
      WRITE (16,3217)
3217  FORMAT(1H1,50X,'COLLISION COEFFICIENTS FOR ELECTRONS')
      WRITE(16,3218)
3218  FORMAT(12X,'ALT',6X,'CLELN2',6X,'CLELO2',6X,'CLELO',7X,
     ;'CLELHE',6X,'CLELH',7X,'CLELOX',6X,'CLELHL',6X,'CLELHD')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 3230 K=1,NDMQ
      WRITE (16,1180) K,ALTD(K),CLELN2(K),CLELO2(K),CLELO(K),
     $CLELHE(K),CLELH(K),CLELOX(K),CLELHL(K),CLELHD(K)
3230  CONTINUE
      IF (NDIM.LT.NPT2) GO TO 3290
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 3240 K=NPT2,NDMQ,2
      WRITE (16,1180) K,ALTD(K),CLELN2(K),CLELO2(K),CLELO(K),
     $CLELHE(K),CLELH(K),CLELOX(K),CLELHL(K),CLELHD(K)
3240  CONTINUE
      IF (NDIM.LT.NPT4) GO TO 3290
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 3250 K=NPT4,NDMQ,5
      WRITE (16,1180) K,ALTD(K),CLELN2(K),CLELO2(K),CLELO(K),
     $CLELHE(K),CLELH(K),CLELOX(K),CLELHL(K),CLELHD(K)
3250  CONTINUE
      IF (NDIM.LT.NPT6) GO TO 3290
      DO 3260 K=NPT6,NDIM,10
      WRITE (16,1180) K,ALTD(K),CLELN2(K),CLELO2(K),CLELO(K),
     $CLELHE(K),CLELH(K),CLELOX(K),CLELHL(K),CLELHD(K)
3260  CONTINUE
3290  CONTINUE
      WRITE(16,1047)
1047  FORMAT(1H1,50X,'COLLISION FREQUENCIES FOR OXYGEN')
      WRITE(16,1048)
1048  FORMAT(12X,'ALT',7X,'CFOXN2',6X,'CFOXO2',6X,'CFOXO',7X,
     ;'CFOXHE',6X,'CFOXH',7X,'CFOXHL',6X,'CFOXHD',6X,'CFOXEL')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 531 K=1,NDMQ
      WRITE (16,1180) K,ALTD(K),CFOXN2(K),CFOXO2(K),CFOXO(K),
     $CFOXHE(K),CFOXH(K),CFOXHL(K),CFOXHD(K),CFOXEL(K)
531   CONTINUE
      IF (NDIM.LT.NPT2) GO TO 591
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 541 K=NPT2,NDMQ,2
      WRITE (16,1180) K,ALTD(K),CFOXN2(K),CFOXO2(K),CFOXO(K),
     $CFOXHE(K),CFOXH(K),CFOXHL(K),CFOXHD(K),CFOXEL(K)
541   CONTINUE
      IF (NDIM.LT.NPT4) GO TO 591
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 551 K=NPT4,NDMQ,5
      WRITE (16,1180) K,ALTD(K),CFOXN2(K),CFOXO2(K),CFOXO(K),
     $CFOXHE(K),CFOXH(K),CFOXHL(K),CFOXHD(K),CFOXEL(K)
551   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 591
      DO 561 K=NPT6,NDIM,10
      WRITE (16,1180) K,ALTD(K),CFOXN2(K),CFOXO2(K),CFOXO(K),
     $CFOXHE(K),CFOXH(K),CFOXHL(K),CFOXHD(K),CFOXEL(K)
561   CONTINUE
591   CONTINUE
      WRITE (16,1247)
1247  FORMAT(1H1,50X,'COLLISION FREQUENCIES FOR HELIUM')
      WRITE(16,1248)
1248  FORMAT(12X,'ALT',7X,'CFHEN2',6X,'CFHEO2',6X,'CFHEO',7X,
     ;'CFHEHE',6X,'CFHEH',7X,'CFHEOX',6X,'CFHEHD',6X,'CFHEEL')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 1231 K=1,NDMQ
      WRITE (16,1180) K,ALTD(K),CFHEN2(K),CFHEO2(K),CFHEO(K),
     $CFHEHE(K),CFHEH(K),CFHEOX(K),CFHEHD(K),CFHEEL(K)
1231  CONTINUE
      IF (NDIM.LT.NPT2) GO TO 1291
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 1241 K=NPT2,NDMQ,2
      WRITE (16,1180) K,ALTD(K),CFHEN2(K),CFHEO2(K),CFHEO(K),
     $CFHEHE(K),CFHEH(K),CFHEOX(K),CFHEHD(K),CFHEEL(K)
1241  CONTINUE
      IF (NDIM.LT.NPT4) GO TO 1291
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 1251 K=NPT4,NDMQ,5
      WRITE (16,1180) K,ALTD(K),CFHEN2(K),CFHEO2(K),CFHEO(K),
     $CFHEHE(K),CFHEH(K),CFHEOX(K),CFHEHD(K),CFHEEL(K)
1251  CONTINUE
      IF (NDIM.LT.NPT6) GO TO 1291
      DO 1261 K=NPT6,NDIM,10
      WRITE (16,1180) K,ALTD(K),CFHEN2(K),CFHEO2(K),CFHEO(K),
     $CFHEHE(K),CFHEH(K),CFHEOX(K),CFHEHD(K),CFHEEL(K)
1261  CONTINUE
1291  CONTINUE
      WRITE (16,2247)
2247  FORMAT(1H1,50X,'COLLISION FREQUENCIES FOR HYDROGEN')
      WRITE(16,2248)
2248  FORMAT(12X,'ALT',7X,'CFHN2',7X,'CFHO2',7X,'CFHO',8X,
     ;'CFHHE',7X,'CFHH',8X,'CFHOX',7X,'CFHHL',7X,'CFHEL')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 2231 K=1,NDMQ
      WRITE (16,1180) K,ALTD(K),CFHN2(K),CFHO2(K),CFHO(K),
     $CFHHE(K),CFHH(K),CFHOX(K),CFHHL(K),CFHEL(K)
2231  CONTINUE
      IF (NDIM.LT.NPT2) GO TO 2291
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 2241 K=NPT2,NDMQ,2
      WRITE (16,1180) K,ALTD(K),CFHN2(K),CFHO2(K),CFHO(K),
     $CFHHE(K),CFHH(K),CFHOX(K),CFHHL(K),CFHEL(K)
2241  CONTINUE
      IF (NDIM.LT.NPT4) GO TO 2291
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 2251 K=NPT4,NDMQ,5
      WRITE (16,1180) K,ALTD(K),CFHN2(K),CFHO2(K),CFHO(K),
     $CFHHE(K),CFHH(K),CFHOX(K),CFHHL(K),CFHEL(K)
2251  CONTINUE
      IF (NDIM.LT.NPT6) GO TO 2291
      DO 2261 K=NPT6,NDIM,10
      WRITE (16,1180) K,ALTD(K),CFHN2(K),CFHO2(K),CFHO(K),
     $CFHHE(K),CFHH(K),CFHOX(K),CFHHL(K),CFHEL(K)
2261  CONTINUE
2291  CONTINUE
      WRITE (16,3247)
3247  FORMAT(1H1,50X,'COLLISION FREQUENCIES FOR ELECTRONS')
      WRITE(16,3248)
3248  FORMAT(12X,'ALT',7X,'CFELN2',6X,'CFELO2',6X,'CFELO',7X,
     ;'CFELHE',6X,'CFELH',7X,'CFELOX',6X,'CFELHL',6X,'CFELHD')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 3231 K=1,NDMQ
      WRITE (16,1180) K,ALTD(K),CFELN2(K),CFELO2(K),CFELO(K),
     $CFELHE(K),CFELH(K),CFELOX(K),CFELHL(K),CFELHD(K)
3231  CONTINUE
      IF (NDIM.LT.NPT2) GO TO 3291
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 3241 K=NPT2,NDMQ,2
      WRITE (16,1180) K,ALTD(K),CFELN2(K),CFELO2(K),CFELO(K),
     $CFELHE(K),CFELH(K),CFELOX(K),CFELHL(K),CFELHD(K)
3241  CONTINUE
      IF (NDIM.LT.NPT4) GO TO 3291
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 3251 K=NPT4,NDMQ,5
      WRITE (16,1180) K,ALTD(K),CFELN2(K),CFELO2(K),CFELO(K),
     $CFELHE(K),CFELH(K),CFELOX(K),CFELHL(K),CFELHD(K)
3251  CONTINUE
      IF (NDIM.LT.NPT6) GO TO 3291
      DO 3261 K=NPT6,NDIM,10
      WRITE (16,1180) K,ALTD(K),CFELN2(K),CFELO2(K),CFELO(K),
     $CFELHE(K),CFELH(K),CFELOX(K),CFELHL(K),CFELHD(K)
3261  CONTINUE
3291  CONTINUE
      WRITE (16,1013)
1013  FORMAT(1H1,45X,'INITIAL OXYGEN PARAMETERS')
      WRITE(16,1021)
1021  FORMAT(16X,'ALT',10X,'VELOCITY',8X,'MACH NO',9X,'DENSITY',9X,
     ;'PRESSURE',6X,'TEMPERATURE',/)
      K=0
      XM=USURFO/WSURFO
      DNS1=DSURFO/XMSO
      WRITE(16,1022) K,ALTMIN,USURFO,XM,DNS1,PSURFO,TSURFO
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 630 K=1,NDMQ
      US=SQRT(GAMMA*POXYG(K)/DOXYG(K))
      XM=UOXYG(K)/US
      DNS1=DOXYG(K)/XMSO
      WRITE(16,1022) K,ALTD(K),UOXYG(K),XM,DNS1,POXYG(K),TOXYG(K)
630   CONTINUE
      IF (NDIM.LT.NPT2) GO TO 690
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 640 K=NPT2,NDMQ,2
      US=SQRT(GAMMA*POXYG(K)/DOXYG(K))
      XM=UOXYG(K)/US
      DNS1=DOXYG(K)/XMSO
      WRITE(16,1022) K,ALTD(K),UOXYG(K),XM,DNS1,POXYG(K),TOXYG(K)
640   CONTINUE
      IF (NDIM.LT.NPT4) GO TO 690
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 650 K=NPT4,NDMQ,5
      US=SQRT(GAMMA*POXYG(K)/DOXYG(K))
      XM=UOXYG(K)/US
      DNS1=DOXYG(K)/XMSO
      WRITE(16,1022) K,ALTD(K),UOXYG(K),XM,DNS1,POXYG(K),TOXYG(K)
650   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 690
      DO 660 K=NPT6,NDIM,10
      US=SQRT(GAMMA*POXYG(K)/DOXYG(K))
      XM=UOXYG(K)/US
      DNS1=DOXYG(K)/XMSO
      WRITE(16,1022) K,ALTD(K),UOXYG(K),XM,DNS1,POXYG(K),TOXYG(K)
660   CONTINUE
690   CONTINUE
      K=NDIM1
      XM=UBGNDO/WBGNDO
      DNS1=DBGNDO/XMSO
      WRITE(16,1022) K,ALTMAX,UBGNDO,XM,DNS1,PBGNDO,TBGNDO
      WRITE (16,1055)
1055  FORMAT(1H1,45X,'INITIAL HELIUM PARAMETERS')
      WRITE(16,1056)
1056  FORMAT(16X,'ALT',10X,'VELOCITY',8X,'MACH NO',9X,'DENSITY',9X,
     ;'PRESSURE',6X,'TEMPERATURE',/)
      K=0
      XM=USURHE/WSURHE
      DNS1=DSURHE/XMSHE
      WRITE(16,1022) K,ALTMIN,USURHE,XM,DNS1,PSURHE,TSURHE
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 639 K=1,NDMQ
      US=SQRT(GAMMA*PHEL(K)/DHEL(K))
      XM=UHEL(K)/US
      DNS1=DHEL(K)/XMSHE
      WRITE(16,1022) K,ALTD(K),UHEL(K),XM,DNS1,PHEL(K),THEL(K)
639   CONTINUE
      IF (NDIM.LT.NPT2) GO TO 699
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 649 K=NPT2,NDMQ,2
      US=SQRT(GAMMA*PHEL(K)/DHEL(K))
      XM=UHEL(K)/US
      DNS1=DHEL(K)/XMSHE
      WRITE(16,1022) K,ALTD(K),UHEL(K),XM,DNS1,PHEL(K),THEL(K)
649   CONTINUE
      IF (NDIM.LT.NPT4) GO TO 699
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 659 K=NPT4,NDMQ,5
      US=SQRT(GAMMA*PHEL(K)/DHEL(K))
      XM=UHEL(K)/US
      DNS1=DHEL(K)/XMSHE
      WRITE(16,1022) K,ALTD(K),UHEL(K),XM,DNS1,PHEL(K),THEL(K)
659   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 699
      DO 669 K=NPT6,NDIM,10
      US=SQRT(GAMMA*PHEL(K)/DHEL(K))
      XM=UHEL(K)/US
      DNS1=DHEL(K)/XMSHE
      WRITE(16,1022) K,ALTD(K),UHEL(K),XM,DNS1,PHEL(K),THEL(K)
669   CONTINUE
699   CONTINUE
      K=NDIM1
      XM=UBGNHE/WBGNHE
      DNS1=DBGNHE/XMSHE
      WRITE(16,1022) K,ALTMAX,UBGNHE,XM,DNS1,PBGNHE,TBGNHE
      WRITE (16,1010)
1010  FORMAT(1H1,45X,'INITIAL HYDROGEN PARAMETERS')
      WRITE(16,1021)
      K=0
      XM=USURFH/WSURFH
      DNS1=DSURFH/XMSH
      WRITE(16,1022) K,ALTMIN,USURFH,XM,DNS1,PSURFH,TSURFH
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 730 K=1,NDMQ
      US=SQRT(GAMMA*PHYD(K)/DHYD(K))
      XM=UHYD(K)/US
      DNS1=DHYD(K)/XMSH
      WRITE(16,1022) K,ALTD(K),UHYD(K),XM,DNS1,PHYD(K),THYD(K)
730   CONTINUE
      IF (NDIM.LT.NPT2) GO TO 790
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 740 K=NPT2,NDMQ,2
      US=SQRT(GAMMA*PHYD(K)/DHYD(K))
      XM=UHYD(K)/US
      DNS1=DHYD(K)/XMSH
      WRITE(16,1022) K,ALTD(K),UHYD(K),XM,DNS1,PHYD(K),THYD(K)
740   CONTINUE
      IF (NDIM.LT.NPT4) GO TO 790
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 750 K=NPT4,NDMQ,5
      US=SQRT(GAMMA*PHYD(K)/DHYD(K))
      XM=UHYD(K)/US
      DNS1=DHYD(K)/XMSH
      WRITE(16,1022) K,ALTD(K),UHYD(K),XM,DNS1,PHYD(K),THYD(K)
750   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 790
      DO 760 K=NPT6,NDIM,10
      US=SQRT(GAMMA*PHYD(K)/DHYD(K))
      XM=UHYD(K)/US
      DNS1=DHYD(K)/XMSH
      WRITE(16,1022) K,ALTD(K),UHYD(K),XM,DNS1,PHYD(K),THYD(K)
760   CONTINUE
790   CONTINUE
      K=NDIM1
      XM=UBGNDH/WBGNDH
      DNS1=DBGNDH/XMSH
      WRITE(16,1022) K,ALTMAX,UBGNDH,XM,DNS1,PBGNDH,TBGNDH
      WRITE (16,1011)
1011  FORMAT(1H1,45X,'INITIAL ELECTRON PARAMETERS')
      WRITE(16,1021)
      K=0
      XM=USURFE/WSURFE
      DNS1=DSURFE/XMSE
      WRITE(16,1022) K,ALTMIN,USURFE,XM,DNS1,PSURFE,TSURFE
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 830 K=1,NDMQ
      US=SQRT(GAMMA*PELECT(K)/DELECT(K))
      XM=UELECT(K)/US
      DNS1=DELECT(K)/XMSE
      WRITE(16,1022) K,ALTD(K),UELECT(K),XM,DNS1,PELECT(K),TELECT(K)
830   CONTINUE
      IF (NDIM.LT.NPT2) GO TO 890
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 840 K=NPT2,NDMQ,2
      US=SQRT(GAMMA*PELECT(K)/DELECT(K))
      XM=UELECT(K)/US
      DNS1=DELECT(K)/XMSE
      WRITE(16,1022) K,ALTD(K),UELECT(K),XM,DNS1,PELECT(K),TELECT(K)
840   CONTINUE
      IF (NDIM.LT.NPT4) GO TO 890
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 850 K=NPT4,NDMQ,5
      US=SQRT(GAMMA*PELECT(K)/DELECT(K))
      XM=UELECT(K)/US
      DNS1=DELECT(K)/XMSE
      WRITE(16,1022) K,ALTD(K),UELECT(K),XM,DNS1,PELECT(K),TELECT(K)
850   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 890
      DO 860 K=NPT6,NDIM,10
      US=SQRT(GAMMA*PELECT(K)/DELECT(K))
      XM=UELECT(K)/US
      DNS1=DELECT(K)/XMSE
      WRITE(16,1022) K,ALTD(K),UELECT(K),XM,DNS1,PELECT(K),TELECT(K)
860   CONTINUE
890   CONTINUE
      K=NDIM1
      XM=UBGNDE/WBGNDE
      DNS1=DBGNDE/XMSE
      WRITE(16,1022) K,ALTMAX,UBGNDE,XM,DNS1,PBGNDE,TBGNDE
      WRITE(16,1024)
1024  FORMAT(1H1,40X,'INITIAL ELECTRIC FIELD AND SOURCE PARAMETERS')
      WRITE(16,1025)
1025  FORMAT(13X,'ALT',6X,'EFIELD',6X,'FCLSNO',6X,'ECLSNO',6X,'FCLSHE',
     ;6X,'ECLSHE',6X,'FCLSNH',6X,'ECLSNH',6X,'FCLSNE',6X,'ECLSNE')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 930 K=1,NDMQ
      WRITE(16,1026) K,ALTD(K),EFIELD(K),FCLSNO(K),ECLSNO(K),FCLSHE(K),
     ;ECLSHE(K),FCLSNH(K),ECLSNH(K),FCLSNE(K),ECLSNE(K)
930   CONTINUE
      IF (NDIM.LT.NPT2) GO TO 990
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 940 K=NPT2,NDMQ,2
      WRITE(16,1026) K,ALTD(K),EFIELD(K),FCLSNO(K),ECLSNO(K),FCLSHE(K),
     ;ECLSHE(K),FCLSNH(K),ECLSNH(K),FCLSNE(K),ECLSNE(K)
940   CONTINUE
      IF (NDIM.LT.NPT4) GO TO 990
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 950 K=NPT4,NDMQ,5
      WRITE(16,1026) K,ALTD(K),EFIELD(K),FCLSNO(K),ECLSNO(K),FCLSHE(K),
     ;ECLSHE(K),FCLSNH(K),ECLSNH(K),FCLSNE(K),ECLSNE(K)
950   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 990
      DO 960 K=NPT6,NDIM,10
      WRITE(16,1026) K,ALTD(K),EFIELD(K),FCLSNO(K),ECLSNO(K),FCLSHE(K),
     ;ECLSHE(K),FCLSNH(K),ECLSNH(K),FCLSNE(K),ECLSNE(K)
960   CONTINUE
990   CONTINUE
999   CONTINUE
      WRITE (16,2013)
2013  FORMAT(1H1,45X,'HEAT CONDUCTIVITIES')
      WRITE(16,2021)
2021  FORMAT(16X,'ALT',10X,'OXYGEN',10X,'HELIUM',9X,'HYDROGEN',9X,
     ;'ELECTRONS'/)
      K=0
      WRITE(16,1022) K,ALTMIN,TCSFO,TCSFHE,TCSFH,TCSFE
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 2630 K=1,NDMQ
      WRITE(16,1022) K,ALTD(K),TCONO(K),TCONHE(K),TCONH(K),TCONE(K)
2630  CONTINUE
      IF (NDIM.LT.NPT2) GO TO 2690
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 2640 K=NPT2,NDMQ,2
      WRITE(16,1022) K,ALTD(K),TCONO(K),TCONHE(K),TCONH(K),TCONE(K)
2640  CONTINUE
      IF (NDIM.LT.NPT4) GO TO 2690
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 2650 K=NPT4,NDMQ,5
      WRITE(16,1022) K,ALTD(K),TCONO(K),TCONHE(K),TCONH(K),TCONE(K)
2650   CONTINUE
      IF (NDIM.LT.NPT6) GO TO 2690
      DO 2660 K=NPT6,NDIM,10
      WRITE(16,1022) K,ALTD(K),TCONO(K),TCONHE(K),TCONH(K),TCONE(K)
2660   CONTINUE
2690   CONTINUE
      K=NDIM1
      WRITE(16,1022) K,ALTMAX,TCBGO,TCBGHE,TCBGH,TCBGE
1019  FORMAT(3X,I3,0PF10.2,2X,11(1PE10.2))
1022  FORMAT(3X,I3,0PF14.2,2X,6(1PE16.5))
1026  FORMAT(3X,I3,0PF11.2,2X,9(1PE12.4))
1180  FORMAT(3X,I3,0PF10.2,2X,8(1PE12.4))
1028  FORMAT(3X,I3,0PF14.2,2X,2(1PE16.5))
1031  FORMAT(3X,I3,0PF14.2,2X,4(1PE16.5))
      RETURN
      END
      

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     ALEX(10/11/04): I THINK THIS IS A COLD START ROUTINE FOR DEALING WITH
C     A LACK OF RESTART FILE. BASICALLY THE VELOCITY IS SET TO ZERO AND 
C     THE OTHER GRID VALUES ARE SET TO VALUES THAT WON'T CRASH.
C     (11/9/04) I also see that source terms and collision terms are set
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      

      SUBROUTINE STRT1
      INCLUDE 'common_variables.f'
C     
C     
C     
C     
C     PHIOX=7.00E-7
C     
C     DEFINE THE HE PHOTOIONIZATION RATE
C     
      PHIHE=1.30E-7
C     
C     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     C
C     DEFINE THE GAS PARAMETERS AT THE LOWER BOUNDARY                  C
C     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     C
      USURFO=0.
      USURFH=0.
      USURHE=0.
      USURFE=0.
      CALL MODATM(ALTMIN,XNO2,XNN2,XNO,XNH,XNHE,TEMP)
      TSURFO=TEMP
      TSURFH=TEMP
      TSURHE=TEMP
      TSURFE=TEMP
      TMP1=1.-1.290E-3*TEMP+6.233E-7*TEMP**2
      TMP2=1.-9.149E-4*TEMP+4.228E-7*TEMP**2-6.790E-11*TEMP**3+
     $     4.225E-15*TEMP**4
C     DSURFO=PHIOX*XMSO*XNO/(1.53E-12*XNN2*TMP1+2.82E-11*XNO2*TMP2)
      DSURFO=PHOTOTF(1)*XMSO*XNO/(1.53E-12*XNN2*TMP1+2.82E-11*XNO2*TMP2)
      DSURHE=PHIHE*XMSHE*XNHE/(1.10E-9*XNO2+1.60E-9*XNN2)
      DSURFH=1.136*(XNH/XNO)*(XMSH/XMSO)*DSURFO
      DSURFE=RTHDEL*DSURFH+RTOXEL*DSURFO+RTHEEL*DSURHE
      PSURFO=RGASO*TSURFO*DSURFO
      PSURFH=RGASH*TSURFH*DSURFH
      PSURHE=RGASHE*TSURHE*DSURHE
      PSURFE=RGASE*TSURFE*DSURFE
      WSURFO=SQRT(GAMMA*RGASO*TSURFO)
      WSURFH=SQRT(GAMMA*RGASH*TSURFH)
      WSURHE=SQRT(GAMMA*RGASHE*TSURHE)
      WSURFE=SQRT(GAMMA*RGASE*TSURFE)
C     
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     
      DO 20 I=1,NDIM
C     FFOX1(1) BASED ON PHOTOIONIZATION FREQ FROM SUB GLOWEX;MASS OXYGEN IN GRAMS
         FFOX1(I)=PHOTOTF(I+1)*16.*1.6726E-24*XO(I)
C     FFOX1(I)=PHIOX*XMSO*XO(I)
CALEX SOURCE COEF?         
         FFOX2(I)=2.2E-11*XMSO*XO(I)/XMSH
         FFOX3(I)=-2.5E-11*XH(I)
         FFOX4(I)=-1.53E-12*XN2(I)
         FFOX5(I)=-2.73E-12*XN2(I)
         FFOX6(I)=-2.82E-11*XO2(I)
         FFHYD1(I)=2.5E-11*XMSH*XH(I)/XMSO
         FFHYD2(I)=-2.2E-11*XO(I)
         FFHE1(I)=PHIHE*XMSHE*XHE(I)
         FFHE2(I)=-(1.10E-9*XO2(I)+1.60E-9*XN2(I))

CALEX CL=COLLISION COEF, CF=collision freq ?         
CALEX cf O+ and N2         
         CFOXN2(I)=6.82E-10*XN2(I)
CALEX cf of O+ and O2         
         CFOXO2(I)=6.64E-10*XO2(I)
CALEX cf of O+ and He         
         CFOXHE(I)=1.32E-10*XHE(I)
         
CALEX cl for O+ and O
         CLOXO(I)=3.67E-11*XO(I)
CALEX seems like cl for O+ and H but I think the constant 4.63
CALEX is wrong. see nagy p.99         
         CLOXH(I)=4.63E-12*XH(I)
CALEX cl for O+ and H+         
         CLOXHD(I)=0.077*17.**1.5/XMSH
CALEX cl for O+ and He+         
         CLOXHL(I)=0.14*5.**1.5/XMSHE
CALEX cl for O and electrons??        
         CLOXEL(I)=1.86E-3/XMSE

CALEX cf of H+ and N2  
         CFHN2(I)=3.36E-9*XN2(I)
CALEX cf of H+ and O2
         CFHO2(I)=3.20E-9*XO2(I)
CALEX cf of H+ and He         
         CFHHE(I)=1.06E-9*XHE(I)

CALEX cl for ion neutral collsion       
         CLHO(I)=6.61E-11*XO(I)
         CLHH(I)=2.65E-10*XH(I)
CALEX cl for ion ion collision         
         CLHOX(I)=1.23*17.**1.5/XMSO
         CLHHL(I)=1.14*5.**1.5/XMSHE
         CLHEL(I)=2.97E-2/XMSE

CALEX cf of He+ and N2
         CFHEN2(I)=1.60E-9*XN2(I)
CALEX cf of He+ and O2         
         CFHEO2(I)=1.53E-9*XO2(I)
CALEX cl for He+ and He         
         CLHEHE(I)=8.73E-11*XHE(I)
CALEX cf of He+ and O         
         CFHEO(I)=1.01E-9*XO(I)
CALEX cf of He+ and H         
         CFHEH(I)=4.71E-10*XH(I)
         
CALEX these are cl for ion ion collisions
         CLHEOX(I)=0.57*5.**1.5/XMSO
         CLHEHD(I)=0.28*5.**1.5/XMSH
         CLHEEL(I)=7.43E-3/XMSE
        
CALEX cf of electrons and N2? this doesnt match nagy p 97 though?? 
         CFELN2(I)=3.42E-9*XN2(I)
         CFELO2(I)=3.25E-9*XO2(I)
         CFELHE(I)=1.18E-9*XHE(I)
         CFELO(I)=2.26E-9*XO(I)
         CFELH(I)=2.11E-9*XH(I)
CALEX similar to nagy p95 but I cant find the connection???         
         CLELOX(I)=54.5/XMSO
         CLELHL(I)=54.5/XMSHE
         CLELHD(I)=54.5/XMSH
         GRAVTY(I)=-3.96E20/RAD(I)**2
 20   CONTINUE
cAlex
      NEXP=3
      WRITE(*,*) CURR(1),RAD(1),NEXP
cendAlex      
      CRRX=CURR(1)*RAD(1)**NEXP
      DO 25 I=1,NDIM
         CURR(I)=CRRX/RAD(I)**NEXP
 25   CONTINUE
C     SGN1=1.
C     IF (CURR(1).LT.0.) SGN1=-1.
C     IF (ABS(CURR(1)).LT.1.E-4) SGN1=0.
C     DO 30 I=NDIM-250,NDIM
C     CURR(I)=SGN1*0.2998*(RAD(1)/RAD(I))**NEXP
C     30    CONTINUE
      
CALEX CT & CM = energy collision term coef?
CALEX Based on Nagy p. 83, I believe that CT is the coeff
CALEX of the term that is due to temperature difference or
CALEX heat flow between species, and CM is the term due to 
CALEX frictional heating between species moving through each other

CALEX CTOXN2 = 3*R_o*M_o/(M_o+M_{N2}) see nagy p.83
      CTOXN2=3.*RGASO*XMSO/(XMSO+28.*XAMU)
      CTOXO2=3.*RGASO*XMSO/(XMSO+32.*XAMU)
      CTOXO=3.*RGASO*XMSO/(XMSO+XMSO)
      CTOXHE=3.*RGASO*XMSO/(XMSO+XMSHE)
      CTOXH=3.*RGASO*XMSO/(XMSO+XMSH)
      CTOXHD=CTOXH
      CTOXHL=CTOXHE
      CTOXEL=3.*RGASO*XMSO/(XMSO+XMSE)
      CTHN2=3.*RGASH*XMSH/(XMSH+28.*XAMU)
      CTHO2=3.*RGASH*XMSH/(XMSH+32.*XAMU)
      CTHHE=3.*RGASH*XMSH/(XMSH+XMSHE)
      CTHO=3.*RGASH *XMSH/(XMSH+XMSO)
      CTHH=3.*RGASH*XMSH/(XMSH+XMSH)
      CTHOX=CTHO
      CTHHL=CTHHE
      CTHEL=3.*RGASH*XMSH/(XMSH+XMSE)
      CTHEN2=3.*RGASHE*XMSHE/(XMSHE+28.*XAMU)
      CTHEO2=3.*RGASHE*XMSHE/(XMSHE+32.*XAMU)
      CTHEHE=3.*RGASHE*XMSHE/(XMSHE+XMSHE)
      CTHEO=3.*RGASHE*XMSHE/(XMSHE+XMSO)
      CTHEH=3.*RGASHE*XMSHE/(XMSHE+XMSH)
      CTHEOX=CTHEO
      CTHEHD=CTHEH
      CTHEEL=3.*RGASHE*XMSHE/(XMSHE+XMSE)
      CTELN2=3.*RGASE*XMSE/(28.*XAMU+XMSE)
      CTELO2=3.*RGASE*XMSE/(32.*XAMU+XMSE)
      CTELHE=3.*RGASE*XMSE/(XMSE+XMSHE)
      CTELO=3.*RGASE*XMSE/(XMSE+XMSO)
      CTELH=3.*RGASE*XMSE/(XMSE+XMSH)
      CTELOX=CTELO
      CTELHL=CTELHE
      CTELHD=CTELH
CALEX CMOXN2 = M_{N2}/(M_o+M_{N2}) see nagy p.83
      CMOXN2=28.*XAMU/(XMSO+28.*XAMU)
      CMOXO2=32.*XAMU/(XMSO+32.*XAMU)
      CMOXO=XMSO/(XMSO+XMSO)
      CMOXHE=XMSHE/(XMSO+XMSHE)
      CMOXH=XMSH/(XMSO+XMSH)
      CMOXHD=CMOXH
      CMOXHL=CMOXHE
      CMOXEL=XMSE/(XMSE+XMSO)
      CMHN2=28.*XAMU/(XMSH+28.*XAMU)
      CMHO2=32.*XAMU/(XMSH+32.*XAMU)
      CMHHE=XMSHE/(XMSH+XMSHE)
      CMHO=XMSO/(XMSH+XMSO)
      CMHH=XMSH/(XMSH+XMSH)
      CMHOX=CMHO
      CMHHL=CMHHE
      CMHEL=XMSE/(XMSE+XMSH)
      CMHEN2=28.*XAMU/(XMSHE+28.*XAMU)
      CMHEO2=32.*XAMU/(XMSHE+32.*XAMU)
      CMHEHE=XMSHE/(XMSHE+XMSHE)
      CMHEO=XMSO/(XMSHE+XMSO)
      CMHEH=XMSH/(XMSHE+XMSH)
      CMHEOX=CMHEO
      CMHEHD=CMHEH
      CMHEEL=XMSE/(XMSE+XMSHE)
      CMELN2=28.*XAMU/(XMSE+28.*XAMU)
      CMELO2=32.*XAMU/(XMSE+32.*XAMU)
      CMELHE=XMSHE/(XMSE+XMSHE)
      CMELO=XMSO/(XMSE+XMSO)
      CMELH=XMSH/(XMSE+XMSH)
      CMELOX=CMELO
      CMELHL=CMELHE
      CMELHD=CMELH

C     ALEX(10/11/04): 
C     TRY SETTING THE PLASMA PARAMETERS HERE TO THE SURFACE VALUES

      if(IsRestart) RETURN

      do K=1,NDIM
         DHYD(K)=DSURFH
         UOXYG(K)=0
         POXYG(K)=PSURFO
         DOXYG(K)=DSURFO
         TOXYG(K)=TSURFO
         UHYD(K)=0
         PHYD(K)=PSURFH
         THYD(K)=TSURFH
         UHEL(K)=0
         PHEL(K)=PSURHE
         DHEL(K)=DSURHE
         THEL(K)=TSURHE
         DELECT(K)=DSURFE
         UELECT(K)=0
         PELECT(K)=PSURFE
         TELECT(K)=TSURFE
      enddo

      RETURN
      END



      SUBROUTINE CLFMO
      INCLUDE 'common_variables.f'
      REAL DBN1(MaxGrid),UBN1(MaxGrid),PBN1(MaxGrid),
     $ U12(MaxGrid),P12(MaxGrid),
     $ D12(MaxGrid),WL(MaxGrid),WR(MaxGrid),PDIFF(MaxGrid),PSUM(MaxGrid)
CLFMO
C
C
CALEX work on bottom of grid
      USUM=USURFO+UOXYG(1)
      UDIFF=USURFO-UOXYG(1)
      PDIFF(1)=PSURFO-POXYG(1)
      PSUM(1)=PSURFO+POXYG(1)
      DSUM=DSURFO+DOXYG(1)
      A0=SQRT(GAMMA*PSUM(1)*DSUM/4.)
      P12(1)=(PSUM(1)+A0*UDIFF)/2.
      U12(1)=(USUM+PDIFF(1)/A0)/2.
      DD=CVMGP(DSURFO,DOXYG(1),U12(1))
      PP=CVMGP(PSURFO,POXYG(1),U12(1))
      D12(1)=DD*(GPL1*P12(1)+GMIN1*PP)/(GMIN1*P12(1)+GPL1*PP)
      WL(1)=USURFO-A0/DSURFO
      WR(1)=UOXYG(1)+A0/DOXYG(1)
      D12(1)=CVMGP(DSURFO,D12(1),WL(1))
      U12(1)=CVMGP(USURFO,U12(1),WL(1))
      P12(1)=CVMGP(PSURFO,P12(1),WL(1))
      U12(1)=CVMGP(U12(1),UOXYG(1),WR(1))
      P12(1)=CVMGP(P12(1),POXYG(1),WR(1))
      D12(1)=CVMGP(D12(1),DOXYG(1),WR(1))

CALEX work on rest of grid     
      DO 8510 K=2,NDIM
         L=K-1
         USUM=UOXYG(L)+UOXYG(K)
         UDIFF=UOXYG(L)-UOXYG(K)
         PDIFF(K)=POXYG(L)-POXYG(K)
         PSUM(K)=POXYG(L)+POXYG(K)
         DSUM=DOXYG(L)+DOXYG(K)
         A0=SQRT(GAMMA*PSUM(K)*DSUM/4.)
         P12(K)=(PSUM(K)+A0*UDIFF)/2.
         U12(K)=(USUM+PDIFF(K)/A0)/2.
         DD=CVMGP(DOXYG(L),DOXYG(K),U12(K))
         PP=CVMGP(POXYG(L),POXYG(K),U12(K))
         D12(K)=DD*(GPL1*P12(K)+GMIN1*PP)/(GMIN1*P12(K)+GPL1*PP)
         WL(K)=UOXYG(L)-A0/DOXYG(L)
         WR(K)=UOXYG(K)+A0/DOXYG(K)
         D12(K)=CVMGP(DOXYG(L),D12(K),WL(K))
         U12(K)=CVMGP(UOXYG(L),U12(K),WL(K))
         P12(K)=CVMGP(POXYG(L),P12(K),WL(K))
         U12(K)=CVMGP(U12(K),UOXYG(K),WR(K))
         P12(K)=CVMGP(P12(K),POXYG(K),WR(K))
         D12(K)=CVMGP(D12(K),DOXYG(K),WR(K))
 8510 CONTINUE
CALEX work on top of grid
      USUM=UOXYG(NDIM)+UBGNDO
      UDIFF=UOXYG(NDIM)-UBGNDO
      PDIFF(NDIM1)=POXYG(NDIM)-PBGNDO
      PSUM(NDIM1)=POXYG(NDIM)+PBGNDO
      DSUM=DOXYG(NDIM)+DBGNDO
      A0=SQRT(GAMMA*PSUM(NDIM1)*DSUM/4.)
      P12(NDIM1)=(PSUM(NDIM1)+A0*UDIFF)/2.
      U12(NDIM1)=(USUM+PDIFF(NDIM1)/A0)/2.
      DD=CVMGP(DOXYG(NDIM),DBGNDO,U12(NDIM1))
      PP=CVMGP(POXYG(NDIM),PBGNDO,U12(NDIM1))
      D12(NDIM1)=DD*(GPL1*P12(NDIM1)+GMIN1*PP)/(GMIN1*P12(NDIM1)
     $     +GPL1*PP)
      WL(NDIM1)=UOXYG(NDIM)-A0/DOXYG(NDIM)
      WR(NDIM1)=UBGNDO+A0/DBGNDO
      D12(NDIM1)=CVMGP(DOXYG(NDIM),D12(NDIM1),WL(NDIM1))
      U12(NDIM1)=CVMGP(UOXYG(NDIM),U12(NDIM1),WL(NDIM1))
      P12(NDIM1)=CVMGP(POXYG(NDIM),P12(NDIM1),WL(NDIM1))
      U12(NDIM1)=CVMGP(U12(NDIM1),UBGNDO,WR(NDIM1))
      P12(NDIM1)=CVMGP(P12(NDIM1),PBGNDO,WR(NDIM1))
      D12(NDIM1)=CVMGP(D12(NDIM1),DBGNDO,WR(NDIM1))
      DO 8530 K=1,NDIM1
         DBN1(K)=U12(K)*D12(K)
         UFL=U12(K)*DBN1(K)
         PFL=GMIN2*U12(K)*UFL
         UBN1(K)=UFL+P12(K)
         PBN1(K)=PFL+GAMMA*U12(K)*P12(K)
 8530 CONTINUE
c     
      XHTM=EXP(-(TIME-300.)**2/2./150./150.)
c     

CALEX I am pretty sure that is is where the actual solving takes place
      DO 8570 K=1,NDIM
         KK=K+1
         CELLNW(3,K)=DOXYG(K)-DTR1*(AR23(K)*DBN1(KK)-AR12(K)*DBN1(K))
     $        +DTX1*ADMSO(K)
         CELLNW(1,K)=(UOXYG(K)*DOXYG(K)-DTR1*(AR23(K)*UBN1(KK)-AR12(K)*
     $        UBN1(K))+DTX1*(DAREA(K)*POXYG(K)+FCLSNO(K)))/CELLNW(3,K)
         CELLNW(2,K)=POXYG(K)-GMIN2*(CELLNW(1,K)**2*CELLNW(3,K)-
     $     UOXYG(K)**2*DOXYG(K))-DTR1*(AR23(K)*PBN1(KK)-AR12(K)*PBN1(K))
     $     +DTX1*GMIN1*(ECLSNO(K)+XHTM*QOXYG(K)*DOXYG(K))
         CELLNW(4,K)=CELLNW(2,K)/RGASO/CELLNW(3,K)
 8570 CONTINUE
      RETURN
      END
      SUBROUTINE CLFMHE
      INCLUDE 'common_variables.f'
      REAL DBN1(MaxGrid),UBN1(MaxGrid),PBN1(MaxGrid),
     $ U12(MaxGrid),P12(MaxGrid),
     $ D12(MaxGrid),WL(MaxGrid),WR(MaxGrid),PDIFF(MaxGrid),PSUM(MaxGrid)
C----------------------
CLFMHEL
C
C
      USUM=USURHE+UHEL(1)
      UDIFF=USURHE-UHEL(1)
      PDIFF(1)=PSURHE-PHEL(1)
      PSUM(1)=PSURHE+PHEL(1)
      DSUM=DSURHE+DHEL(1)
      A0=SQRT(GAMMA*PSUM(1)*DSUM/4.)
      P12(1)=(PSUM(1)+A0*UDIFF)/2.
      U12(1)=(USUM+PDIFF(1)/A0)/2.
      DD=CVMGP(DSURHE,DHEL(1),U12(1))
      PP=CVMGP(PSURHE,PHEL(1),U12(1))
      D12(1)=DD*(GPL1*P12(1)+GMIN1*PP)/(GMIN1*P12(1)+GPL1*PP)
      WL(1)=USURHE-A0/DSURHE
      WR(1)=UHEL(1)+A0/DHEL(1)
      D12(1)=CVMGP(DSURHE,D12(1),WL(1))
      U12(1)=CVMGP(USURHE,U12(1),WL(1))
      P12(1)=CVMGP(PSURHE,P12(1),WL(1))
      U12(1)=CVMGP(U12(1),UHEL(1),WR(1))
      P12(1)=CVMGP(P12(1),PHEL(1),WR(1))
      D12(1)=CVMGP(D12(1),DHEL(1),WR(1))
      DO 8510 K=2,NDIM
         L=K-1
         USUM=UHEL(L)+UHEL(K)
         UDIFF=UHEL(L)-UHEL(K)
         PDIFF(K)=PHEL(L)-PHEL(K)
         PSUM(K)=PHEL(L)+PHEL(K)
         DSUM=DHEL(L)+DHEL(K)
         A0=SQRT(GAMMA*PSUM(K)*DSUM/4.)
         P12(K)=(PSUM(K)+A0*UDIFF)/2.
         U12(K)=(USUM+PDIFF(K)/A0)/2.
         DD=CVMGP(DHEL(L),DHEL(K),U12(K))
         PP=CVMGP(PHEL(L),PHEL(K),U12(K))
         D12(K)=DD*(GPL1*P12(K)+GMIN1*PP)/(GMIN1*P12(K)+GPL1*PP)
         WL(K)=UHEL(L)-A0/DHEL(L)
         WR(K)=UHEL(K)+A0/DHEL(K)
         D12(K)=CVMGP(DHEL(L),D12(K),WL(K))
         U12(K)=CVMGP(UHEL(L),U12(K),WL(K))
         P12(K)=CVMGP(PHEL(L),P12(K),WL(K))
         U12(K)=CVMGP(U12(K),UHEL(K),WR(K))
         P12(K)=CVMGP(P12(K),PHEL(K),WR(K))
         D12(K)=CVMGP(D12(K),DHEL(K),WR(K))
 8510 CONTINUE
      USUM=UHEL(NDIM)+UBGNHE
      UDIFF=UHEL(NDIM)-UBGNHE
      PDIFF(NDIM1)=PHEL(NDIM)-PBGNHE
      PSUM(NDIM1)=PHEL(NDIM)+PBGNHE
      DSUM=DHEL(NDIM)+DBGNHE
      A0=SQRT(GAMMA*PSUM(NDIM1)*DSUM/4.)
      P12(NDIM1)=(PSUM(NDIM1)+A0*UDIFF)/2.
      U12(NDIM1)=(USUM+PDIFF(NDIM1)/A0)/2.
      DD=CVMGP(DHEL(NDIM),DBGNHE,U12(NDIM1))
      PP=CVMGP(PHEL(NDIM),PBGNHE,U12(NDIM1))
      D12(NDIM1)=DD*(GPL1*P12(NDIM1)+GMIN1*PP)/(GMIN1*P12(NDIM1)
     $+GPL1*PP)
      WL(NDIM1)=UHEL(NDIM)-A0/DHEL(NDIM)
      WR(NDIM1)=UBGNHE+A0/DBGNHE
      D12(NDIM1)=CVMGP(DHEL(NDIM),D12(NDIM1),WL(NDIM1))
      U12(NDIM1)=CVMGP(UHEL(NDIM),U12(NDIM1),WL(NDIM1))
      P12(NDIM1)=CVMGP(PHEL(NDIM),P12(NDIM1),WL(NDIM1))
      U12(NDIM1)=CVMGP(U12(NDIM1),UBGNHE,WR(NDIM1))
      P12(NDIM1)=CVMGP(P12(NDIM1),PBGNHE,WR(NDIM1))
      D12(NDIM1)=CVMGP(D12(NDIM1),DBGNHE,WR(NDIM1))
      DO 8530 K=1,NDIM1
         DBN1(K)=U12(K)*D12(K)
         UFL=U12(K)*DBN1(K)
         PFL=GMIN2*U12(K)*UFL
         UBN1(K)=UFL+P12(K)
         PBN1(K)=PFL+GAMMA*U12(K)*P12(K)
8530  CONTINUE
c
      XHTM=EXP(-(TIME-300.)**2/2./150./150.)
c
      DO 8570 K=1,NDIM
         KK=K+1
         CELLNW(11,K)=DHEL(K)-DTR1*(AR23(K)*DBN1(KK)-AR12(K)*DBN1(K))
     $        +DTX1*ADMSHE(K)
         CELLNW(9,K)=(UHEL(K)*DHEL(K)-DTR1*(AR23(K)*UBN1(KK)-AR12(K)*
     $        UBN1(K))+DTX1*(DAREA(K)*PHEL(K)+FCLSHE(K)))/CELLNW(11,K)
         CELLNW(10,K)=PHEL(K)-GMIN2*(CELLNW(9,K)**2*CELLNW(11,K)-
     $       UHEL(K)**2*DHEL(K))-DTR1*(AR23(K)*PBN1(KK)-AR12(K)*PBN1(K))
     $        +DTX1*GMIN1*(ECLSHE(K)+XHTM*QHEL(K)*DHEL(K))
         CELLNW(12,K)=CELLNW(10,K)/RGASHE/CELLNW(11,K)
 8570 CONTINUE
      RETURN
      END
      SUBROUTINE CLFMH
      INCLUDE 'common_variables.f'
      REAL DBN1(MaxGrid),UBN1(MaxGrid),PBN1(MaxGrid),
     $ U12(MaxGrid),P12(MaxGrid),
     $ D12(MaxGrid),WL(MaxGrid),WR(MaxGrid),PDIFF(MaxGrid),PSUM(MaxGrid)
CLFMH
C
C
      USUM=USURFH+UHYD(1)
      UDIFF=USURFH-UHYD(1)
      PDIFF(1)=PSURFH-PHYD(1)
      PSUM(1)=PSURFH+PHYD(1)
      DSUM=DSURFH+DHYD(1)
      A0=SQRT(GAMMA*PSUM(1)*DSUM/4.)
      P12(1)=(PSUM(1)+A0*UDIFF)/2.
      U12(1)=(USUM+PDIFF(1)/A0)/2.
      DD=CVMGP(DSURFH,DHYD(1),U12(1))
      PP=CVMGP(PSURFH,PHYD(1),U12(1))
      D12(1)=DD*(GPL1*P12(1)+GMIN1*PP)/(GMIN1*P12(1)+GPL1*PP)
      WL(1)=USURFH-A0/DSURFH
      WR(1)=UHYD(1)+A0/DHYD(1)
      D12(1)=CVMGP(DSURFH,D12(1),WL(1))
      U12(1)=CVMGP(USURFH,U12(1),WL(1))
      P12(1)=CVMGP(PSURFH,P12(1),WL(1))
      U12(1)=CVMGP(U12(1),UHYD(1),WR(1))
      P12(1)=CVMGP(P12(1),PHYD(1),WR(1))
      D12(1)=CVMGP(D12(1),DHYD(1),WR(1))
      DO 8610 K=2,NDIM
      L=K-1
      USUM=UHYD(L)+UHYD(K)
      UDIFF=UHYD(L)-UHYD(K)
      PDIFF(K)=PHYD(L)-PHYD(K)
      PSUM(K)=PHYD(L)+PHYD(K)
      DSUM=DHYD(L)+DHYD(K)
      A0=SQRT(GAMMA*PSUM(K)*DSUM/4.)
      P12(K)=(PSUM(K)+A0*UDIFF)/2.
      U12(K)=(USUM+PDIFF(K)/A0)/2.
      DD=CVMGP(DHYD(L),DHYD(K),U12(K))
      PP=CVMGP(PHYD(L),PHYD(K),U12(K))
      D12(K)=DD*(GPL1*P12(K)+GMIN1*PP)/(GMIN1*P12(K)+GPL1*PP)
      WL(K)=UHYD(L)-A0/DHYD(L)
      WR(K)=UHYD(K)+A0/DHYD(K)
      D12(K)=CVMGP(DHYD(L),D12(K),WL(K))
      U12(K)=CVMGP(UHYD(L),U12(K),WL(K))
      P12(K)=CVMGP(PHYD(L),P12(K),WL(K))
      U12(K)=CVMGP(U12(K),UHYD(K),WR(K))
      P12(K)=CVMGP(P12(K),PHYD(K),WR(K))
      D12(K)=CVMGP(D12(K),DHYD(K),WR(K))
8610  CONTINUE
      USUM=UHYD(NDIM)+UBGNDH
      UDIFF=UHYD(NDIM)-UBGNDH
      PDIFF(NDIM1)=PHYD(NDIM)-PBGNDH
      PSUM(NDIM1)=PHYD(NDIM)+PBGNDH
      DSUM=DHYD(NDIM)+DBGNDH
      A0=SQRT(GAMMA*PSUM(NDIM1)*DSUM/4.)
      P12(NDIM1)=(PSUM(NDIM1)+A0*UDIFF)/2.
      U12(NDIM1)=(USUM+PDIFF(NDIM1)/A0)/2.
      DD=CVMGP(DHYD(NDIM),DBGNDH,U12(NDIM1))
      PP=CVMGP(PHYD(NDIM),PBGNDH,U12(NDIM1))
      D12(NDIM1)=DD*(GPL1*P12(NDIM1)+GMIN1*PP)/(GMIN1*P12(NDIM1)
     $+GPL1*PP)
      WL(NDIM1)=UHYD(NDIM)-A0/DHYD(NDIM)
      WR(NDIM1)=UBGNDH+A0/DBGNDH
      D12(NDIM1)=CVMGP(DHYD(NDIM),D12(NDIM1),WL(NDIM1))
      U12(NDIM1)=CVMGP(UHYD(NDIM),U12(NDIM1),WL(NDIM1))
      P12(NDIM1)=CVMGP(PHYD(NDIM),P12(NDIM1),WL(NDIM1))
      U12(NDIM1)=CVMGP(U12(NDIM1),UBGNDH,WR(NDIM1))
      P12(NDIM1)=CVMGP(P12(NDIM1),PBGNDH,WR(NDIM1))
      D12(NDIM1)=CVMGP(D12(NDIM1),DBGNDH,WR(NDIM1))
      DO 8630 K=1,NDIM1
      DBN1(K)=U12(K)*D12(K)
      UFL=U12(K)*DBN1(K)
      PFL=GMIN2*U12(K)*UFL
      UBN1(K)=UFL+P12(K)
      PBN1(K)=PFL+GAMMA*U12(K)*P12(K)
8630  CONTINUE
c
      XHTM=EXP(-(TIME-300.)**2/2./150./150.)
c
      DO 8670 K=1,NDIM
      KK=K+1
      CELLNW(7,K)=DHYD(K)-DTR1*(AR23(K)*DBN1(KK)-AR12(K)*DBN1(K))
     $+DTX1*ADMSH(K)
      CELLNW(5,K)=(UHYD(K)*DHYD(K)-DTR1*(AR23(K)*UBN1(KK)-AR12(K)*
     $UBN1(K))+DTX1*(DAREA(K)*PHYD(K)+FCLSNH(K)))/CELLNW(7,K)
      CELLNW(6,K)=PHYD(K)-GMIN2*(CELLNW(5,K)**2*CELLNW(7,K)-
     $UHYD(K)**2*DHYD(K))-DTR1*(AR23(K)*PBN1(KK)-AR12(K)*PBN1(K))
     $+DTX1*GMIN1*(ECLSNH(K)+XHTM*QHYD(K)*DHYD(K))
      CELLNW(8,K)=CELLNW(6,K)/RGASH/CELLNW(7,K)
8670  CONTINUE
      RETURN
      END
      SUBROUTINE CLFME2W
      INCLUDE 'common_variables.f'
      REAL C1(MaxGrid),C2(MaxGrid),C3(MaxGrid),C4(MaxGrid),
     $     D1(MaxGrid),D2(MaxGrid),
     $     D3(MaxGrid),D4(MaxGrid)
      REAL YL(MaxGrid),YK(MaxGrid)
C     
C
      C2(1)=H0*(TCONE(2)-TCSFE)
      C2(NDIM)=H0*(TCBGE-TCONE(NDIM2))
      DO 8715 K=2,NDIM2
 8715    C2(K)=H0*(TCONE(K+1)-TCONE(K-1))
      DO 8720 K=1,NDIM
         C1(K)=TCONE(K)/DELECT(K)
         C2(K)=C2(K)/DELECT(K)
 8720 CONTINUE
      C3(1)=H0*(UELECT(2)-USURFE)
      C3(NDIM)=H0*(UBGNDE-UELECT(NDIM2))
      DO 8725 K=2,NDIM2
 8725    C3(K)=H0*(UELECT(K+1)-UELECT(K-1))
      DO 8730 K=1,NDIM
      C2(K)=C2(K)-UELECT(K)
      C2(K)=C2(K)+DAREA(K)*C1(K)
 8730 C3(K)=-GMIN1*(DAREA(K)*UELECT(K)+C3(K))
C
C
      XHLP=EXP(-(TIME-300.)**2/2./150./150.)
      DO 8735 K=1,NDIM
         C3(K)=C3(K)-ADMSE(K)/DELECT(K)
         C4(K)=HLPE0*(ECLSNE(K)+XHLP*QELECT(K))/DELECT(K)
 8735 CONTINUE
C
C
C      DO 8738 K=1,NCL
C      XX1=H3*C1(K)
C      XX2=H4*C2(K)
C      XX3=H2*C1(K)
C      XX4=0.5*C3(K)-XX3
C      D1(K)=-XX1-XX2
C      D2(K)=H1E1-XX4
C      D3(K)=-XX1+XX2
C8738  D4(K)=H1E1+XX4
C      DO 8740 K=NCL+1,NDIM
      DO 8740 K=1,NDIM
      XX1=H3*C1(K)
      XX2=H4*C2(K)
      XX3=H2*C1(K)
      XX4=0.5*C3(K)-XX3
      D1(K)=-XX1-XX2
      D2(K)=H1E2-XX4
      D3(K)=-XX1+XX2
8740  D4(K)=H1E2+XX4
      D4(1)=C4(1)-D3(1)*TSURFE+D4(1)*TELECT(1)-D1(1)*TELECT(2)
      D4(NDIM)=C4(NDIM)-D3(NDIM)*TELECT(NDIM2)+
     $D4(NDIM)*TELECT(NDIM)-D1(NDIM)*TBGNDE
      DO 8750 K=2,NDIM2
         D4(K)=C4(K)-D3(K)*TELECT(K-1)+D4(K)*TELECT(K)-
     $        D1(K)*TELECT(K+1)
 8750 CONTINUE
      YL(1)=D1(1)/D2(1)
      YK(1)=(D4(1)-D3(1)*TSURFE)/D2(1)
CALEX is the syntax for these do loops correct?      
      DO 8760 K=2,NDIM
      XX1=D2(K)-D3(K)*YL(K-1)
      YK(K)=(D4(K)-D3(K)*YK(K-1))/XX1
8760  YL(K)=D1(K)/XX1
      TELECT(NDIM)=YK(NDIM)-YL(NDIM)*TBGNDE
      PELECT(NDIM)=RGASE*DELECT(NDIM)*TELECT(NDIM)
      DO 8770 K=NDIM2,1,-1
      TELECT(K)=YK(K)-YL(K)*TELECT(K+1)
8770  PELECT(K)=RGASE*DELECT(K)*TELECT(K)
      RETURN
      END
      SUBROUTINE CLTEMPW
      INCLUDE 'common_variables.f'
      REAL C1(MaxGrid),C2(MaxGrid),C3(MaxGrid),C4(MaxGrid),
     $     D1(MaxGrid),D2(MaxGrid),
     $     D3(MaxGrid),D4(MaxGrid)
      REAL YL(MaxGrid),YK(MaxGrid)
C     
C
C     OXYGEN
C
      C2(1)=H0*(TCONO(2)-TCSFO)
      C2(NDIM)=H0*(TCBGO-TCONO(NDIM2))
      DO 8815 K=2,NDIM2
8815  C2(K)=H0*(TCONO(K+1)-TCONO(K-1))
      DO 8820 K=1,NDIM
      C1(K)=TCONO(K)/DOXYG(K)
      C2(K)=C2(K)/DOXYG(K)
      C2(K)=C2(K)+DAREA(K)*C1(K)
8820  CONTINUE
C
C
C     C3(1)=H0*(UOXYG(2)-USURFO)
C     C3(NDIM)=H0*(UBGNDO-UOXYG(NDIM2))
C     DO 8825 K=2,NDIM2
C8825 C3(K)=H0*(UOXYG(K+1)-UOXYG(K-1))
C     DO 8830 K=1,NDIM
C     C2(K)=C2(K)-UOXYG(K)
C8830 C3(K)=-GMIN1*(DAREA(K)*UOXYG(K)+C3(K))
C
C
C      DO 8838 K=1,NCL
C      XX1=H3*C1(K)
C      XX2=H4*C2(K)
C      XX3=H2*C1(K)
C      XX4=-XX3
C      D1(K)=-XX1-XX2
C      D2(K)=H1O1-XX4
C      D3(K)=-XX1+XX2
C8838  D4(K)=H1O1+XX4
C      DO 8840 K=NCL+1,NDIM
      DO 8840 K=1,NDIM
      XX1=H3*C1(K)
      XX2=H4*C2(K)
      XX3=H2*C1(K)
      XX4=-XX3
      D1(K)=-XX1-XX2
      D2(K)=H1O2-XX4
      D3(K)=-XX1+XX2
8840  D4(K)=H1O2+XX4
      D4(1)=-D3(1)*TSURFO+D4(1)*TOXYG(1)-D1(1)*TOXYG(2)
      D4(NDIM)=-D3(NDIM)*TOXYG(NDIM2)+
     $D4(NDIM)*TOXYG(NDIM)-D1(NDIM)*TBGNDO
      DO 8850 K=2,NDIM2
      D4(K)=-D3(K)*TOXYG(K-1)+D4(K)*TOXYG(K)-
     $D1(K)*TOXYG(K+1)
8850  CONTINUE
      YL(1)=D1(1)/D2(1)
      YK(1)=(D4(1)-D3(1)*TSURFO)/D2(1)
      DO 8860 K=2,NDIM
      XX1=D2(K)-D3(K)*YL(K-1)
      YK(K)=(D4(K)-D3(K)*YK(K-1))/XX1
8860  YL(K)=D1(K)/XX1
      TOXYG(NDIM)=YK(NDIM)-YL(NDIM)*TBGNDO
      POXYG(NDIM)=RGASO*DOXYG(NDIM)*TOXYG(NDIM)
      DO 8870 K=NDIM2,1,-1
      TOXYG(K)=YK(K)-YL(K)*TOXYG(K+1)
8870  POXYG(K)=RGASO*DOXYG(K)*TOXYG(K)
C
C     HELIUM
C
      C2(1)=H0*(TCONHE(2)-TCSFHE)
      C2(NDIM)=H0*(TCBGHE-TCONHE(NDIM2))
      DO 8715 K=2,NDIM2
8715  C2(K)=H0*(TCONHE(K+1)-TCONHE(K-1))
      DO 8720 K=1,NDIM
      C1(K)=TCONHE(K)/DHEL(K)
      C2(K)=C2(K)/DHEL(K)
      C2(K)=C2(K)+DAREA(K)*C1(K)
8720  CONTINUE
C
C
C     C3(1)=H0*(UHEL(2)-USURHE)
C     C3(NDIM)=H0*(UBGNHE-UHEL(NDIM2))
C     DO 8725 K=2,NDIM2
C8725 C3(K)=H0*(UHEL(K+1)-UHEL(K-1))
C     DO 8730 K=1,NDIM
C     C2(K)=C2(K)-UHEL(K)
C8730 C3(K)=-GMIN1*(DAREA(K)*UHEL(K)+C3(K))
C
C
C      DO 8738 K=1,NCL
C      XX1=H3*C1(K)
C      XX2=H4*C2(K)
C      XX3=H2*C1(K)
C      XX4=-XX3
C      D1(K)=-XX1-XX2
C      D2(K)=H1O1-XX4
C      D3(K)=-XX1+XX2
C8738  D4(K)=H1O1+XX4
C      DO 8740 K=NCL+1,NDIM
      DO 8740 K=1,NDIM
      XX1=H3*C1(K)
      XX2=H4*C2(K)
      XX3=H2*C1(K)
      XX4=-XX3
      D1(K)=-XX1-XX2
      D2(K)=H1O2-XX4
      D3(K)=-XX1+XX2
8740  D4(K)=H1O2+XX4
      D4(1)=-D3(1)*TSURHE+D4(1)*THEL(1)-D1(1)*THEL(2)
      D4(NDIM)=-D3(NDIM)*THEL(NDIM2)+
     $D4(NDIM)*THEL(NDIM)-D1(NDIM)*TBGNHE
      DO 8750 K=2,NDIM2
      D4(K)=-D3(K)*THEL(K-1)+D4(K)*THEL(K)-
     $D1(K)*THEL(K+1)
8750  CONTINUE
      YL(1)=D1(1)/D2(1)
      YK(1)=(D4(1)-D3(1)*TSURHE)/D2(1)
      DO 8760 K=2,NDIM
      XX1=D2(K)-D3(K)*YL(K-1)
      YK(K)=(D4(K)-D3(K)*YK(K-1))/XX1
8760  YL(K)=D1(K)/XX1
      THEL(NDIM)=YK(NDIM)-YL(NDIM)*TBGNHE
      PHEL(NDIM)=RGASHE*DHEL(NDIM)*THEL(NDIM)
      DO 8770 K=NDIM2,1,-1
      THEL(K)=YK(K)-YL(K)*THEL(K+1)
8770  PHEL(K)=RGASHE*DHEL(K)*THEL(K)
C
C     HYDROGEN
C
      C2(1)=H0*(TCONH(2)-TCSFH)
      C2(NDIM)=H0*(TCBGH-TCONH(NDIM2))
      DO 8915 K=2,NDIM2
8915  C2(K)=H0*(TCONH(K+1)-TCONH(K-1))
      DO 8920 K=1,NDIM
      C1(K)=TCONH(K)/DHYD(K)
      C2(K)=C2(K)/DHYD(K)
      C2(K)=C2(K)+DAREA(K)*C1(K)
8920  CONTINUE
C
C
C     C3(1)=H0*(UHYD(1)-USURFH)
C     C3(NDIM)=H0*(UBGNDH-UHYD(NDIM2))
C     DO 8925 K=2,NDIM2
C8925 C3(K)=H0*(UHYD(K+1)-UHYD(K-1))
C     DO 8930 K=1,NDIM
C     C2(K)=C2(K)-UHYD(K)
C8930 C3(K)=-GMIN1*(DAREA(K)*UHYD(K)+C3(K))
C
C
C      DO 8938 K=1,NCL
C      XX1=H3*C1(K)
C      XX2=H4*C2(K)
C      XX3=H2*C1(K)
C      XX4=-XX3
C      D1(K)=-XX1-XX2
C      D2(K)=H1H1-XX4
C      D3(K)=-XX1+XX2
C8938  D4(K)=H1H1+XX4
C      DO 8940 K=NCL+1,NDIM
      DO 8940 K=1,NDIM
      XX1=H3*C1(K)
      XX2=H4*C2(K)
      XX3=H2*C1(K)
      XX4=-XX3
      D1(K)=-XX1-XX2
      D2(K)=H1H2-XX4
      D3(K)=-XX1+XX2
8940  D4(K)=H1H2+XX4
      D4(1)=-D3(1)*TSURFH+D4(1)*THYD(1)-D1(1)*THYD(2)
      D4(NDIM)=-D3(NDIM)*THYD(NDIM2)+
     $D4(NDIM)*THYD(NDIM)-D1(NDIM)*TBGNDH
      DO 8950 K=2,NDIM2
      D4(K)=-D3(K)*THYD(K-1)+D4(K)*THYD(K)-
     $D1(K)*THYD(K+1)
8950  CONTINUE
      YL(1)=D1(1)/D2(1)
      YK(1)=(D4(1)-D3(1)*TSURFH)/D2(1)
      DO 8960 K=2,NDIM
      XX1=D2(K)-D3(K)*YL(K-1)
      YK(K)=(D4(K)-D3(K)*YK(K-1))/XX1
8960  YL(K)=D1(K)/XX1
      THYD(NDIM)=YK(NDIM)-YL(NDIM)*TBGNDH
      PHYD(NDIM)=RGASH*DHYD(NDIM)*THYD(NDIM)
      DO 8970 K=NDIM2,1,-1
      THYD(K)=YK(K)-YL(K)*THYD(K+1)
8970  PHYD(K)=RGASH*DHYD(K)*THYD(K)
      RETURN
      END

CALEX This subroutine calculates the collision frequencies and
CALEX then calculates the momentum and energy collision terms
      SUBROUTINE COLLIS(N)
      INCLUDE 'common_variables.f'
C     
C
C
C
      DO 250 I=1,N
      TOX2=TOXYG(I)*TOXYG(I)
      TOX3=TOX2*TOXYG(I)
      TOX4=TOX2*TOX2
      AAH=SQRT(THYD(I)+XTN(I)/16.+1.2E-8*UHYD(I)*UHYD(I))
      BBH=SQRT(XTN(I)+TOXYG(I)/16.+1.2E-8*UOXYG(I)*UOXYG(I))
      CCH=1.-9.149E-4*TOXYG(I)+4.228E-7*TOX2-6.790E-11*TOX3+
     ;4.225E-15*TOX4
      IF (TOXYG(I).GT.1700.) GO TO 201
      FFOXYG=FFOX4(I)*(1.-1.290E-3*TOXYG(I)+6.233E-7*TOX2)
      GO TO 205
201   FFOXYG=FFOX5(I)*(1.-1.410E-3*TOXYG(I)+6.036E-7*TOX2)
205   ADMSO(I)=FFOX1(I)+FFOX2(I)*AAH*DHYD(I)+(FFOX3(I)*BBH+
     ;FFOXYG+FFOX6(I)*CCH)*DOXYG(I)
      ADMSH(I)=FFHYD1(I)*BBH*DOXYG(I)+FFHYD2(I)*AAH*DHYD(I)
      ADMSHE(I)=FFHE1(I)+FFHE2(I)*DHEL(I)
      ADMSE(I)=RTHDEL*ADMSH(I)+RTOXEL*ADMSO(I)+RTHEEL*ADMSHE(I)
C
      TROX=0.5*(XTN(I)+TOXYG(I))
      TRHYD=0.5*(XTN(I)+THYD(I))
      TRHEL=0.5*(XTN(I)+THEL(I))
      T1OX=SQRT(XTN(I)+TOXYG(I)/16.)

CALEX These are (reduced temperatures) * (m1+m2) raised to the 1.5
CALEX as shown on page 86 Nagy. This is for use in collision freqs
CALEX of coulomb collisions below.       
      T1OXH=(TOXYG(I)+16.*THYD(I))**1.5
      T1OXHE=(TOXYG(I)+4.*THEL(I))**1.5
      T1HEH=(THEL(I)+4.*THYD(I))**1.5
      TE32=TELECT(I)**1.5
      DTE32=DELECT(I)/TE32
CALEX calculate collision frequencies. 

CALEX cf of O+ and O
      CFOXO(I)=CLOXO(I)*SQRT(TROX)*(1.-0.064*ALOG10(TROX))**2
CALEX this looks like cf of O+ and H but see comments for cloxh
      CFOXH(I)=CLOXH(I)*T1OX
CALEX cf of O+ and H+. coulomb collisions as eq 4.142 p.95 in Nagy
      CFOXHD(I)=CLOXHD(I)*DHYD(I)/T1OXH
CALEX cf of O+ and He+. coulomb collisions as eq 4.142 p.95 in Nagy      
      CFOXHL(I)=CLOXHL(I)*DHEL(I)/T1OXHE
      
      CFOXEL(I)=CLOXEL(I)*DTE32
CALEX  cf of H+ and O      
      CFHO(I)=CLHO(I)*SQRT(THYD(I))*(1.-0.047*ALOG10(THYD(I)))**2
CALEX cf of H+ and H      
      CFHH(I)=CLHH(I)*SQRT(TRHYD)*(1.-0.083*ALOG10(TRHYD))**2
CALEX cf of H+ and O+. coulomb collisions as eq 4.142 p.95 in Nagy      
      CFHOX(I)=CLHOX(I)*DOXYG(I)/T1OXH
CALEX cf of H+ and He+. coulomb collisions as eq 4.142 p.95 in Nagy      
      CFHHL(I)=CLHHL(I)*DHEL(I)/T1HEH
      
      CFHEL(I)=CLHEL(I)*DTE32
CALEX cf of He+ and HE      
      CFHEHE(I)=CLHEHE(I)*SQRT(TRHEL)*(1.-0.093*ALOG10(TRHEL))**2
CALEX cf of He+ and O+      
      CFHEOX(I)=CLHEOX(I)*DOXYG(I)/T1OXHE
CALEX cf of He+ and H+      
      CFHEHD(I)=CLHEHD(I)*DHYD(I)/T1HEH
CALEX cfheel=7.43E-3/M_e * n_e / T_e^1.5, this seems like it should be
CALEX the cf between He and electrons but the formula does not match 4.144
      CFHEEL(I)=CLHEEL(I)*DTE32
CALEX cf for electrons and O, same as 4.144      
      CFELOX(I)=CLELOX(I)*DOXYG(I)/TE32
CALEX cf for electrons and He      
      CFELHL(I)=CLELHL(I)*DHEL(I)/TE32
CALEX cf for el and H      
      CFELHD(I)=CLELHD(I)*DHYD(I)/TE32
C
CALEX velocity difference needed for source terms
      UHDOX=UHYD(I)-UOXYG(I)
      UHDHL=UHYD(I)-UHEL(I)
      UHDEL=UHYD(I)-UELECT(I)
      UHEOX=UHEL(I)-UOXYG(I)
      UHEEL=UHEL(I)-UELECT(I)
      UOXEL=UOXYG(I)-UELECT(I)

CALEX This calculates collision source terms: 
CALEX fclsn1=n*((u2-u1)*cf12+(u3-u1)*cf13+...)
      FCLSNO(I)=DOXYG(I)*(UHDOX*CFOXHD(I)+UHEOX*CFOXHL(I)-
     $UOXEL*CFOXEL(I)-UOXYG(I)*(CFOXN2(I)+CFOXO2(I)+CFOXO(I)
     $+CFOXH(I)+CFOXHE(I)))
      FCLSNH(I)=DHYD(I)*(-UHDOX*CFHOX(I)-UHDHL*CFHHL(I)-
     $UHDEL*CFHEL(I)-UHYD(I)*(CFHN2(I)+CFHO2(I)+CFHO(I)
     $+CFHH(I)+CFHHE(I)))
      FCLSHE(I)=DHEL(I)*(UHDHL*CFHEHD(I)-UHEOX*CFHEOX(I)
     $-UHEEL*CFHEEL(I)-UHEL(I)*(CFHEN2(I)+CFHEO2(I)+CFHEO(I)+
     $CFHEHE(I)+CFHEHE(I)))

CALEX UHLEL is not defined anywhere in this program!!! based on
CALEX UOXEL I assume it is the relative velocity between helium
CALEX and electrionsand so I define it as such below
      UHLEL=UHEEL
      
CALEX      write(*,*) 'DELECT(I),UOXEL,CFELOX(I),UHLEL,CFELHL(I),
CALEX     $UHDEL,CFELHD(I),UELECT(I),CFELN2(I),CFELO2(I),CFELO(I),
CALEX     $CFELHE(I),CFELH(I)',
CALEX     $ DELECT(I),UOXEL,CFELOX(I)
     

      FCLSNE(I)=DELECT(I)*(UOXEL*CFELOX(I)+UHLEL*CFELHL(I)+
     $UHDEL*CFELHD(I)-UELECT(I)*(CFELN2(I)+CFELO2(I)+CFELO(I)+
     $CFELHE(I)+CFELH(I)))
C
CALEX calculate square of velocity differences for use in the
CALEX energy collision term
      UHDOX=UHDOX*UHDOX
      UHDHL=UHDHL*UHDHL
      UHDEL=UHDEL*UHDEL
      UHEOX=UHEOX*UHEOX
      UHEEL=UHEEL*UHEEL
      UOXEL=UOXEL*UOXEL
      UOXN=UOXYG(I)**2
      UHEN=UHEL(I)**2
      UHDN=UHYD(I)**2
      UELN=UELECT(I)**2
CALEX these are temperature differences needed in order to calculate
CALEX the energy collision term 
      THDOX=THYD(I)-TOXYG(I)
      THDHL=THYD(I)-THEL(I)
      THDEL=THYD(I)-TELECT(I)
      THDN=THYD(I)-XTN(I)
      THEOX=THEL(I)-TOXYG(I)
      THEEL=THEL(I)-TELECT(I)
CALEX Can you define a variable THEN?!
      THEN=THEL(I)-XTN(I)
      TOXEL=TOXYG(I)-TELECT(I)
      TOXN=TOXYG(I)-XTN(I)
      TELN=TELECT(I)-XTN(I)

CALEX These are the energy collision terms as seen in eq 4.86 in Nagy
      ECLSNO(I)=DOXYG(I)*(-TOXN*(CTOXN2*CFOXN2(I)+CTOXO2*CFOXO2(I)+
     $CTOXO*CFOXO(I)+CTOXHE*CFOXHE(I)+CTOXH*CFOXH(I))+
     $THDOX*CTOXHD*CFOXHD(I)+THEOX*CTOXHL*CFOXHL(I)-
     $TOXEL*CTOXEL*CFOXEL(I)+UOXN*(CMOXN2*CFOXN2(I)+CMOXO2*CFOXO2(I)+
     $CMOXO*CFOXO(I)+CMOXHE*CFOXHE(I)+CMOXH*CFOXH(I))+
     $UHDOX*CMOXHD*CFOXHD(I)+UHEOX*CMOXHL*CFOXHL(I)+
     $UOXEL*CMOXEL*CFOXEL(I))
      ECLSNH(I)=DHYD(I)*(-THDN*(CTHN2*CFHN2(I)+CTHO2*CFHO2(I)+
     $CTHO*CFHO(I)+CTHHE*CFHHE(I)+CTHH*CFHH(I))-
     $THDOX*CTHOX*CFHOX(I)-THDHL*CTHHL*CFHHL(I)-
     $THDEL*CTHEL*CFHEL(I)+UHDN*(CMHN2*CFHN2(I)+CMHO2*CFHO2(I)+
     $CMHO*CFHO(I)+CMHHE*CFHHE(I)+CMHH*CFHH(I))+
     $UHDOX*CMHOX*CFHOX(I)+UHDHL*CMHHL*CFHHL(I)+
     $UHDEL*CMHEL*CFHEL(I))
      ECLSHE(I)=DHEL(I)*(-THEN*(CTHEN2*CFHEN2(I)+CTHEO2*CFHEO2(I)+
     $CTHEO*CFHEO(I)+CTHEHE*CFHEHE(I)+CTHEH*CFHEH(I))+
     $THDHL*CTHEHD*CFHEHD(I)-THEOX*CTHEOX*CFHEOX(I)-
     $THEEL*CTHEEL*CFHEEL(I)+UHEN*(CMHEN2*CFHEN2(I)+CMHEO2*CFHEO2(I)+
     $CMHEO*CFHEO(I)+CMHEHE*CFHEHE(I)+CMHEH*CFHEH(I))+
     $UHEOX*CMHEOX*CFHEOX(I)+UHDHL*CMHEHD*CFHEHD(I)+
     $UHEEL*CMHEEL*CFHEEL(I))
      ECLSNE(I)=DELECT(I)*(-TELN*(CTELN2*CFELN2(I)+CTELO2*CFELO2(I)+
     $CTELO*CFELO(I)+CTELHE*CFELHE(I)+CTELH*CFELH(I))+
     $TOXEL*CTELOX*CFELOX(I)+THEEL*CTELHL*CFELHL(I)+
     $THDEL*CTELHD*CFELHD(I)+UELN*(CMELN2*CFELN2(I)+CMELO2*CFELO2(I)+
     $CMELO*CFELO(I)+CMELHE*CFELHE(I)+CMELH*CFELH(I))+
     $UOXEL*CMELOX*CFELOX(I)+UHEEL*CMELHL*CFELHL(I)+
     $UHDEL*CMELHD*CFELHD(I))
C
CALEX calculate heat conductivities
      TCONO(I)=HLPO*(DOXYG(I)/DELECT(I))*TOXYG(I)**2.5
      TCONE(I)=HLPE*TELECT(I)**2.5
      TCONH(I)=HLPH*(DHYD(I)/DELECT(I))*THYD(I)**2.5
      TCONH(I)=TCONH(I)/(1.+(0.7692*(CFHN2(I)+CFHO2(I))+
     $1.0962*CFHO(I))/CFHOX(I))
      TCONHE(I)=HLPHE*(DHEL(I)/XMSHE)*THEL(I)
      TCONHE(I)=TCONHE(I)/(0.99*CFHEN2(I)+0.99*CFHEO2(I)+
     $1.02*CFHEO(I)+1.48*CFHEHE(I)+2.22*CFHEH(I)+
     $1.21*CFHEOX(I)+2.23*CFHEHD(I))      
250   CONTINUE
      RETURN
      END
      SUBROUTINE ELFLDW
      REAL PRO(602),PRHE(602),PRH(602),PRE(602),PR(602)
      INCLUDE 'common_variables.f'

C
C
      PRO(1)=USURFO**2*DSURFO
      PRHE(1)=USURHE**2*DSURHE
      PRH(1)=USURFH**2*DSURFH
      PRE(1)=USURFE**2*DSURFE
      PR(1)=PSURFE+PRE(1)-RTHDEL*(PSURFH+PRH(1))-RTOXEL*
     $(PSURFO+PRO(1))-RTHEEL*(PSURHE+PRHE(1))
      PRO(NDIMM)=UBGNDO**2*DBGNDO
      PRHE(NDIMM)=UBGNHE**2*DBGNHE
      PRH(NDIMM)=UBGNDH**2*DBGNDH
      PRE(NDIMM)=UBGNDE**2*DBGNDE
      PR(NDIMM)=PBGNDE+PRE(NDIMM)-RTHDEL*(PBGNDH+PRH(NDIMM))
     $-RTOXEL*(PBGNDO+PRO(NDIMM))-RTHEEL*(PBGNHE+PRHE(NDIMM))
      DO 20 K=1,NDIM
         KK=K+1
         PRO(KK)=UOXYG(K)**2*DOXYG(K)
         PRHE(KK)=UHEL(K)**2*DHEL(K)
         PRH(KK)=UHYD(K)**2*DHYD(K)
         PRE(KK)=UELECT(K)**2*DELECT(K)
         PR(KK)=PELECT(K)+PRE(KK)-RTHDEL*(PHYD(K)+PRH(KK))
     $        -RTOXEL*(POXYG(K)+PRO(KK))-RTHEEL*(PHEL(K)+PRHE(KK))
 20   CONTINUE
      DZ=0.5/DRBND
      DO 30 K=1,NDIM
         L=K+1
         M=K+2
         DNOM=4.803242E-10*(DHYD(K)/XMSH+DOXYG(K)/XMSO+DHEL(K)/XMSHE)
         EZ=FCLSNE(K)-RTHDEL*FCLSNH(K)-RTOXEL*FCLSNO(K)
     $        -RTHEEL*FCLSHE(K)
         EZ=EZ-DAREA(K)*(PRE(L)-RTHDEL*PRH(L)-RTOXEL*PRO(L)
     $        -RTHEEL*PRHE(L))
         EZ=EZ+RTHDEL*(UELECT(K)-UHYD(K))*ADMSH(K)+
     ;        RTOXEL*(UELECT(K)-UOXYG(K))*ADMSO(K)+
     ;        RTHEEL*(UELECT(K)-UHEL(K))*ADMSHE(K)
         EFIELD(K)=(EZ-DZ*(PR(M)-PR(K)))/DNOM
 30   CONTINUE
      EFIELD(NDIM)=2.13E-7*CURRMX/TELECT(NDIM)**1.5
      IF (EFIELD(NDIM).LT.0.) EFIELD(NDIM)=0.
40    DO 50 K=1,NDIM
         FCLSNO(K)=FCLSNO(K)+ADMSO(K)*UOXYG(K)+DOXYG(K)*
     ;        (GRAVTY(K)+4.803242E-10*EFIELD(K)/XMSO)
         FCLSHE(K)=FCLSHE(K)+ADMSHE(K)*UHEL(K)+DHEL(K)*
     ;        (GRAVTY(K)+4.803242E-10*EFIELD(K)/XMSHE)
         FCLSNH(K)=FCLSNH(K)+ADMSH(K)*UHYD(K)+DHYD(K)*
     ;        (GRAVTY(K)+4.803242E-10*EFIELD(K)/XMSH)
         ECLSNO(K)=ECLSNO(K)+UOXYG(K)*(FCLSNO(K)-0.5*UOXYG(K)*ADMSO(K))
         ECLSHE(K)=ECLSHE(K)+UHEL(K)*(FCLSHE(K)-0.5*UHEL(K)*ADMSHE(K))
         ECLSNH(K)=ECLSNH(K)+UHYD(K)*(FCLSNH(K)-0.5*UHYD(K)*ADMSH(K))
 50   CONTINUE
      RETURN
      END

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      SUBROUTINE NEWBGD
      INCLUDE 'common_variables.f'
C     
C     
C     
C     
      UBGNDO=0.
      UBGNHE=0.
      UBGNDH=0.
      TBGNDO=TOXYG(NDIM)
      TBGNHE=THEL(NDIM)
      TBGNDH=THYD(NDIM)
C     
      XHTM=1.+ELFXIN*EXP(-(TIME-300.)**2/2./150./150.)
C     
C     Top boundary electron temperature is calculated from
C     Te(nDim) + Tgradient*Dx where Tgradient = Etop/kappa
C     and Etop is the electron heat flux or proportional to that
      TBGNDE=TELECT(NDIM)+XHTM*ETOP/TELECT(NDIM)**2.5

cAlex      write(*,*)'TBGNDE=TELECT(NDIM)+XHTM*ETOP/TELECT(NDIM)**2.5:',
cAlex     &     TBGNDE,TELECT(NDIM),XHTM,ETOP,TELECT(NDIM),NDIM

      PBGNDO=POXYG(NDIM)/10.
      PBGNHE=PHEL(NDIM)/10.
      PBGNDH=PHYD(NDIM)/10.
      DBGNDO=PBGNDO/RGASO/TBGNDO
      DBGNHE=PBGNHE/RGASHE/TBGNHE
      DBGNDH=PBGNDH/RGASH/TBGNDH

C n_e   = n_H+  + n_O+ + n_He+
C rho_e = rho_H*(m_e/m_H) + rho_O*(m_e/m_O) + rho_He*(m_e/m_He)

      DBGNDE=RTHDEL*DBGNDH+RTOXEL*DBGNDO+RTHEEL*DBGNHE

cAlex      write(*,*)'DBGNDE=RTHDEL,DBGNDH,RTOXEL,DBGNDO,RTHEEL,DBGNHE=',
cAlex     &     DBGNDE,RTHDEL,DBGNDH,RTOXEL,DBGNDO,RTHEEL,DBGNHE

      PBGNDE=RGASE*TBGNDE*DBGNDE

cAlex      write(*,*)'PBGNDE=RGASE*TBGNDE*DBGNDE:',
cAlex     &     PBGNDE,RGASE,TBGNDE,DBGNDE

      CURHLP=EXP(-0.5*(TIME-CURTIM0)**2/CURTIM**2)
      UBGNDE=(RTHDEL*DBGNDH*UBGNDH+RTOXEL*DBGNDO*UBGNDO+
     &     RTHEEL*DBGNHE*UBGNHE-1.8965E-18*CURHLP*CURRMX)/DBGNDE

CALEX these are sound speeds      
      WBGNDO=SQRT(GAMMA*PBGNDO/DBGNDO)
      WBGNHE=SQRT(GAMMA*PBGNHE/DBGNHE)
      WBGNDH=SQRT(GAMMA*PBGNDH/DBGNDH)
      WBGNDE=SQRT(GAMMA*PBGNDE/DBGNDE)

cAlex write(*,*) 'WBGNDE=SQRT(GAMMA*PBGNDE/DBGNDE):',
cAlex     &     WBGNDE, GAMMA, PBGNDE, DBGNDE

      TCBGO=HLPO*(DBGNDO/DBGNDE)*TBGNDO**2.5
      TCBGE=HLPE*TBGNDE**2.5
      TCBGH=HLPH*(DBGNDH/DBGNDE)*TBGNDH**2.5
      THLP=SQRT(TBGNDH)*(1.-0.047*ALOG10(TBGNDH))**2
      TKLP=DBGNDO/(TBGNDO+16.*TBGNDH)**1.5
      TCBGH=TCBGH/(1.+(0.7692*(CZHN2+CZHO2)+1.0962*CZHO*THLP)/CZHOX
     $     /TKLP)
      THLP=0.5*(XTNMAX+TBGNHE)
      THLP=SQRT(THLP)*(1.-0.093*ALOG10(THLP))**2
      TKLP=DBGNDO/(TBGNDO+4.*TBGNHE)**1.5
      TLLP=DBGNDH/(TBGNHE+4.*TBGNDH)**1.5
      TCBGHE=HLPHE*(DBGNHE/XMSHE)*TBGNHE
      TCBGHE=TCBGHE/(0.99*CZHEN2+0.99*CZHEO2+1.02*CZHEO+1.48*CZHEHE*
     $     THLP+2.22*CZHEH+1.21*CZHEOX*TKLP+2.23*CZHEHD*TLLP)      

      RETURN
      END

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      SUBROUTINE PRNTOP
      INCLUDE 'common_variables.f'
C
C
C
      WRITE(16,1010) TIME,DT,NSTEP
1010  FORMAT(1H1,10X,'TIME=',1PE12.4,'SEC',10X,'TIME STEP=',1PE12.4,
     ;'SEC',10X,'NSTEP=',I6)
      WRITE(16,1013)
1013  FORMAT(1H0,47X,'NEW O+ PARAMETERS')
      WRITE(16,1011)
1011  FORMAT(16X,'ALT',10X,'VELOCITY',8X,'MACH NO',9X,'DENSITY',9X,
     ;'PRESSURE',6X,'TEMPERATURE',5X,' NET SOURCE'/)
      K=0
      XM=USURFO/WSURFO
      DNS1=DSURFO/XMSO
      WRITE(16,1012) K,ALTMIN,USURFO,XM,DNS1,PSURFO,TSURFO
1012  FORMAT(3X,I3,0PF14.2,2X,5(1PE16.5))
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 30 K=1,NDMQ
      US=SQRT(GAMMA*POXYG(K)/DOXYG(K))
      XM=UOXYG(K)/US
      ADM=ADMSO(K)/XMSO
      DNS1=DOXYG(K)/XMSO
      WRITE(16,1022) K,ALTD(K),UOXYG(K),XM,DNS1,POXYG(K),TOXYG(K),ADM
1022  FORMAT(3X,I3,0PF14.2,2X,6(1PE16.5))
30    CONTINUE
      IF (NDIM.LT.NPT2) GO TO 100
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 40 K=NPT2,NDMQ,2
      US=SQRT(GAMMA*POXYG(K)/DOXYG(K))
      XM=UOXYG(K)/US
      ADM=ADMSO(K)/XMSO
      DNS1=DOXYG(K)/XMSO
      WRITE(16,1022) K,ALTD(K),UOXYG(K),XM,DNS1,POXYG(K),TOXYG(K),ADM
40    CONTINUE
      IF (NDIM.LT.NPT4) GO TO 100
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 50 K=NPT4,NDMQ,5
      US=SQRT(GAMMA*POXYG(K)/DOXYG(K))
      XM=UOXYG(K)/US
      ADM=ADMSO(K)/XMSO
      DNS1=DOXYG(K)/XMSO
      WRITE(16,1022) K,ALTD(K),UOXYG(K),XM,DNS1,POXYG(K),TOXYG(K),ADM
50    CONTINUE
      IF (NDIM.LT.NPT6) GO TO 100
      DO 60 K=NPT6,NDIM,10
      US=SQRT(GAMMA*POXYG(K)/DOXYG(K))
      XM=UOXYG(K)/US
      ADM=ADMSO(K)/XMSO
      DNS1=DOXYG(K)/XMSO
      WRITE(16,1022) K,ALTD(K),UOXYG(K),XM,DNS1,POXYG(K),TOXYG(K),ADM
60    CONTINUE
100   CONTINUE
      K=NDIM1
      XM=UBGNDO/WBGNDO
      DNS1=DBGNDO/XMSO
      WRITE(16,1012) K,ALTMAX,UBGNDO,XM,DNS1,PBGNDO,TBGNDO
      RETURN
      END
      SUBROUTINE PRNTHE
      INCLUDE 'common_variables.f'
C     
C
C
      WRITE(16,1010) TIME,DT,NSTEP
1010  FORMAT(1H1,10X,'TIME=',1PE12.4,'SEC',10X,'TIME STEP=',1PE12.4,
     ;'SEC',10X,'NSTEP=',I6)
      WRITE(16,1013)
1013  FORMAT(1H0,47X,'NEW HE+ PARAMETERS')
      WRITE(16,1011)
1011  FORMAT(16X,'ALT',10X,'VELOCITY',8X,'MACH NO',9X,'DENSITY',9X,
     ;'PRESSURE',6X,'TEMPERATURE',5X,' NET SOURCE'/)
      K=0
      XM=USURHE/WSURHE
      DNS1=DSURHE/XMSHE
      WRITE(16,1012) K,ALTMIN,USURHE,XM,DNS1,PSURHE,TSURHE
1012  FORMAT(3X,I3,0PF14.2,2X,5(1PE16.5))
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 30 K=1,NDMQ
      US=SQRT(GAMMA*PHEL(K)/DHEL(K))
      XM=UHEL(K)/US
      ADM=ADMSHE(K)/XMSHE
      DNS1=DHEL(K)/XMSHE
      WRITE(16,1022) K,ALTD(K),UHEL(K),XM,DNS1,PHEL(K),THEL(K),ADM
1022  FORMAT(3X,I3,0PF14.2,2X,6(1PE16.5))
30    CONTINUE
      IF (NDIM.LT.NPT2) GO TO 100
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 40 K=NPT2,NDMQ,2
      US=SQRT(GAMMA*PHEL(K)/DHEL(K))
      XM=UHEL(K)/US
      ADM=ADMSHE(K)/XMSHE
      DNS1=DHEL(K)/XMSHE
      WRITE(16,1022) K,ALTD(K),UHEL(K),XM,DNS1,PHEL(K),THEL(K),ADM
40    CONTINUE
      IF (NDIM.LT.NPT4) GO TO 100
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 50 K=NPT4,NDMQ,5
      US=SQRT(GAMMA*PHEL(K)/DHEL(K))
      XM=UHEL(K)/US
      ADM=ADMSHE(K)/XMSHE
      DNS1=DHEL(K)/XMSHE
      WRITE(16,1022) K,ALTD(K),UHEL(K),XM,DNS1,PHEL(K),THEL(K),ADM
50    CONTINUE
      IF (NDIM.LT.NPT6) GO TO 100
      DO 60 K=NPT6,NDIM,10
      US=SQRT(GAMMA*PHEL(K)/DHEL(K))
      XM=UHEL(K)/US
      ADM=ADMSHE(K)/XMSHE
      DNS1=DHEL(K)/XMSHE
      WRITE(16,1022) K,ALTD(K),UHEL(K),XM,DNS1,PHEL(K),THEL(K),ADM
60    CONTINUE
100   CONTINUE
      K=NDIM1
      XM=UBGNHE/WBGNHE
      DNS1=DBGNHE/XMSHE
      WRITE(16,1012) K,ALTMAX,UBGNHE,XM,DNS1,PBGNHE,TBGNHE
      RETURN
      END
      SUBROUTINE PRNTHP
      INCLUDE 'common_variables.f'
C
C
C
C
      WRITE(16,1010) TIME,DT,NSTEP
1010  FORMAT(1H1,10X,'TIME=',1PE12.4,'SEC',10X,'TIME STEP=',1PE12.4,
     ;'SEC',10X,'NSTEP=',I6)
      WRITE(16,1013)
1013  FORMAT(1H0,47X,'NEW H+ PARAMETERS')
      WRITE(16,1011)
1011  FORMAT(16X,'ALT',10X,'VELOCITY',8X,'MACH NO',9X,'DENSITY',9X,
     ;'PRESSURE',6X,'TEMPERATURE',5X,' NET SOURCE'/)
      K=0
      XM=USURFH/WSURFH
      DNS1=DSURFH/XMSH
      WRITE(16,1012) K,ALTMIN,USURFH,XM,DNS1,PSURFH,TSURFH
1012  FORMAT(3X,I3,0PF14.2,2X,5(1PE16.5))
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 30 K=1,NDMQ
      US=SQRT(GAMMA*PHYD(K)/DHYD(K))
      XM=UHYD(K)/US
      ADM=ADMSH(K)/XMSH
      DNS1=DHYD(K)/XMSH
      WRITE(16,1022) K,ALTD(K),UHYD(K),XM,DNS1,PHYD(K),THYD(K),ADM
1022  FORMAT(3X,I3,0PF14.2,2X,6(1PE16.5))
30    CONTINUE
      IF (NDIM.LT.NPT2) GO TO 100
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 40 K=NPT2,NDMQ,2
      US=SQRT(GAMMA*PHYD(K)/DHYD(K))
      XM=UHYD(K)/US
      ADM=ADMSH(K)/XMSH
      DNS1=DHYD(K)/XMSH
      WRITE(16,1022) K,ALTD(K),UHYD(K),XM,DNS1,PHYD(K),THYD(K),ADM
40    CONTINUE
      IF (NDIM.LT.NPT4) GO TO 100
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 50 K=NPT4,NDMQ,5
      US=SQRT(GAMMA*PHYD(K)/DHYD(K))
      XM=UHYD(K)/US
      ADM=ADMSH(K)/XMSH
      DNS1=DHYD(K)/XMSH
      WRITE(16,1022) K,ALTD(K),UHYD(K),XM,DNS1,PHYD(K),THYD(K),ADM
50    CONTINUE
      IF (NDIM.LT.NPT6) GO TO 100
      DO 60 K=NPT6,NDIM,10
      US=SQRT(GAMMA*PHYD(K)/DHYD(K))
      XM=UHYD(K)/US
      ADM=ADMSH(K)/XMSH
      DNS1=DHYD(K)/XMSH
      WRITE(16,1022) K,ALTD(K),UHYD(K),XM,DNS1,PHYD(K),THYD(K),ADM
60    CONTINUE
100   CONTINUE
      K=NDIM1
      XM=UBGNDH/WBGNDH
      DNS1=DBGNDH/XMSH
      WRITE(16,1012) K,ALTMAX,UBGNDH,XM,DNS1,PBGNDH,TBGNDH
      RETURN
      END
      SUBROUTINE PRNTEL
      INCLUDE 'common_variables.f'
C
C
C
      WRITE(16,1010) TIME,DT,NSTEP
1010  FORMAT(1H1,10X,'TIME=',1PE12.4,'SEC',10X,'TIME STEP=',1PE12.4,
     ;'SEC',10X,'NSTEP=',I6)
      WRITE(16,1013)
1013  FORMAT(1H0,47X,'NEW ELECTRON PARAMETERS')
      WRITE(16,1011)
1011  FORMAT(16X,'ALT',10X,'VELOCITY',8X,'MACH NO',9X,'DENSITY',9X,
     ;'PRESSURE',6X,'TEMPERATURE',5X,' NET SOURCE'/)
      K=0
      XM=USURFE/WSURFE
      DNS1=DSURFE/XMSE
      WRITE(16,1012) K,ALTMIN,USURFE,XM,DNS1,PSURFE,TSURFE
1012  FORMAT(3X,I3,0PF14.2,2X,5(1PE16.5))
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 30 K=1,NDMQ
      US=SQRT(GAMMA*PELECT(K)/DELECT(K))
      XM=UELECT(K)/US
      ADM=ADMSE(K)/XMSE
      DNS1=DELECT(K)/XMSE
      WRITE(16,1022) K,ALTD(K),UELECT(K),XM,DNS1,PELECT(K),TELECT(K),ADM
1022  FORMAT(3X,I3,0PF14.2,2X,6(1PE16.5))
30    CONTINUE
      IF (NDIM.LT.NPT2) GO TO 100
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 40 K=NPT2,NDMQ,2
      US=SQRT(GAMMA*PELECT(K)/DELECT(K))
      XM=UELECT(K)/US
      ADM=ADMSE(K)/XMSE
      DNS1=DELECT(K)/XMSE
      WRITE(16,1022) K,ALTD(K),UELECT(K),XM,DNS1,PELECT(K),TELECT(K),ADM
40    CONTINUE
      IF (NDIM.LT.NPT4) GO TO 100
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 50 K=NPT4,NDMQ,5
      US=SQRT(GAMMA*PELECT(K)/DELECT(K))
      XM=UELECT(K)/US
      ADM=ADMSE(K)/XMSE
      DNS1=DELECT(K)/XMSE
      WRITE(16,1022) K,ALTD(K),UELECT(K),XM,DNS1,PELECT(K),TELECT(K),ADM
50    CONTINUE
      IF (NDIM.LT.NPT6) GO TO 100
      DO 60 K=NPT6,NDIM,10
      US=SQRT(GAMMA*PELECT(K)/DELECT(K))
      XM=UELECT(K)/US
      ADM=ADMSE(K)/XMSE
      DNS1=DELECT(K)/XMSE
      WRITE(16,1022) K,ALTD(K),UELECT(K),XM,DNS1,PELECT(K),TELECT(K),ADM
60    CONTINUE
100   CONTINUE
      K=NDIM1
      XM=UBGNDE/WBGNDE
      DNS1=DBGNDE/XMSE
      WRITE(16,1012) K,ALTMAX,UBGNDE,XM,DNS1,PBGNDE,TBGNDE
      RETURN
      END
      SUBROUTINE PRNTEF
      INCLUDE 'common_variables.f'
C
C
C
      WRITE(16,1010) TIME,DT,NSTEP
1010  FORMAT(1H1,10X,'TIME=',1PE12.4,'SEC',10X,'TIME STEP=',1PE12.4,
     ;'SEC',10X,'NSTEP=',I6)
      WRITE(16,1013)
1013  FORMAT(1H0,40X,'NEW ELECTRIC FIELD AND SOURCE PARAMETERS')
      WRITE(16,1011)
1011  FORMAT(13X,'ALT',6X,'EFIELD',6X,'FCLSNO',6X,'ECLSNO',6X,'FCLSHE',
     ;6X,'ECLSHE',6X,'FCLSNH',6X,'ECLSNH',6X,'FCLSNE',6X,'ECLSNE')
      NDMQ=NPT1
      IF (NDIM.LT.NPT2) NDMQ=NDIM
      DO 30 K=1,NDMQ
      WRITE(16,1012) K,ALTD(K),EFIELD(K),FCLSNO(K),ECLSNO(K),FCLSHE(K),
     ;ECLSHE(K),FCLSNH(K),ECLSNH(K),FCLSNE(K),ECLSNE(K)
30    CONTINUE
      IF (NDIM.LT.NPT2) GO TO 100
      NDMQ=NPT3
      IF (NDIM.LT.NPT4) NDMQ=NDIM
      DO 40 K=NPT2,NDMQ,2
      WRITE(16,1012) K,ALTD(K),EFIELD(K),FCLSNO(K),ECLSNO(K),FCLSHE(K),
     ;ECLSHE(K),FCLSNH(K),ECLSNH(K),FCLSNE(K),ECLSNE(K)
40    CONTINUE
      IF (NDIM.LT.NPT4) GO TO 100
      NDMQ=NPT5
      IF (NDIM.LT.NPT6) NDMQ=NDIM
      DO 50 K=NPT4,NDMQ,5
      WRITE(16,1012) K,ALTD(K),EFIELD(K),FCLSNO(K),ECLSNO(K),FCLSHE(K),
     ;ECLSHE(K),FCLSNH(K),ECLSNH(K),FCLSNE(K),ECLSNE(K)
50    CONTINUE
      IF (NDIM.LT.NPT6) GO TO 100
      DO 60 K=NPT6,NDIM,10
      WRITE(16,1012) K,ALTD(K),EFIELD(K),FCLSNO(K),ECLSNO(K),FCLSHE(K),
     ;ECLSHE(K),FCLSNH(K),ECLSNH(K),FCLSNE(K),ECLSNE(K)
60    CONTINUE
100   CONTINUE
1012  FORMAT(3X,I3,0PF11.2,2X,9(1PE12.4))
      RETURN
      END

C ============================================================================

      SUBROUTINE PRNTSM
      INCLUDE 'common_variables.f'

      write (iUnitGraphics,"(a79)") 'Polarwind output_var11'
      write (iUnitGraphics,"(i7,1pe13.5,3i3)") nint(time/dt),time,1,1,12
      write (iUnitGraphics,"(3i4)") nDim
      write (iUnitGraphics,"(100(1pe13.5))") Gamma
      write (iUnitGraphics,"(a79)") 
     &     'alt u_O u_He u_H u_e logn_O logn_He logn_H logn_e T_O T_He T_H T_e gamma'
      DO K=1,NDIM
         QS1=UOXYG(K)/1.E5
         QS2=UHEL(K)/1.E5
         QS3=UHYD(K)/1.E5
         QS4=UELECT(K)/1.E5
         QS5=ALOG10(DOXYG(K)/XMSO)
         QS6=ALOG10(DHEL(K)/XMSHE)
         QS7=ALOG10(DHYD(K)/XMSH)
         QS8=ALOG10(DELECT(K)/XMSE)
         WRITE (iUnitGraphics,"(100(1pe18.10))") 
     &        ALTD(K),QS1,QS2,QS3,QS4,QS5,QS6,QS7,QS8,
     &        TOXYG(K),THEL(K),THYD(K),TELECT(K)
      enddo

      RETURN
      END
C                                                                      C
C**********************************************************************C
C                                                                      C
C     NEW MODATM SUBROUTINE USING MSIS MODEL                           C
C                                                                      C
C**********************************************************************C
C                                                                      C
      SUBROUTINE MODATM (ALT,XNO2,XNN2,XNO,XNH,XNHE,TEMP)
      REAL D(8),T(2),MT(10),ALTL(8)
      include 'common_variables.f'
 
      LOGICAL REPT
      DATA REPT/.FALSE./
C
C CONVERT INPUT ALT (CM) TO KM VALUES FOR MSIS.
C
      ALT1 = ALT/1.E+05
      CALL GGM(IART,GLONG,GLAT,GMLONG,GMLAT)
      MASS=48.
      IYR=IYD/1000.
      IDAY=IYD-1000.*IYR
      UT=24.*SEC/86400.
      IF (REPT) GO TO 20
C      WRITE (16,1) IYR,IDAY,UT,STL,GMLAT,GMLONG,GLAT,GLONG,F107A,F107,
C     #AP
C1     FORMAT(/' YEAR,DAY,UT,LOCTIM,GMLAT,GMLONG,GLAT,GLONG'/
C     #I3,I4,2F5.1,4F6.1//' F10.7AV,F10.7,AP(DAILY),AP(UT),AP(UT-3)'
C     #',AP(UT-6),AP(UT-9),AP(AVER(UT-12,UT-33)),AP(AVER(UT-36,UT-59))'/
C     #2F5.0,7F5.1/)
      REPT=.TRUE.
20    CALL GTS5(ALT1,MASS,D,T)
        XNN2 = D(3)
        XNO2 = D(4)
        XNHE = D(1)
        XNO  = D(2)
        XNH  = D(7)
        TEMP = T(2)
      END
C   *******************************************************************
      SUBROUTINE GTS5(ALT,MASS,D,T)
C        MSIS-86/CIRA 1986 Neutral Thermosphere Model
C         A.E.Hedin 3/15/85;2/26/87 (Variable Names Shortened)
C     INPUT:
C        IYD - YEAR AND DAY AS YYDDD
C        SEC - UT(SEC)
C        ALT - ALTITUDE(KM) (GREATER THAN 85 KM)
C        GLAT - GEODETIC LATITUDE(DEG)
C        GLONG - GEODETIC LONGITUDE(DEG)
C        STL - LOCAL APPARENT SOLAR TIME(HRS)
C        F107A - 3 MONTH AVERAGE OF F10.7 FLUX
C        F107 - DAILY F10.7 FLUX FOR PREVIOUS DAY
C        AP - MAGNETIC INDEX(DAILY) OR WHEN SW(9)=-1. :
C           - ARRAY CONTAINING:
C             (1) DAILY AP
C             (2) 3 HR AP INDEX FOR CURRENT TIME
C             (3) 3 HR AP INDEX FOR 3 HRS BEFORE CURRENT TIME
C             (4) 3 HR AP INDEX FOR 6 HRS BEFORE CURRENT TIME
C             (5) 3 HR AP INDEX FOR 9 HRS BEFORE CURRENT TIME
C             (6) AVERAGE OF EIGHT 3 HR AP INDICIES FROM 12 TO 33 HRS PRIOR
C                    TO CURRENT TIME
C             (7) AVERAGE OF EIGHT 3 HR AP INDICIES FROM 36 TO 59 HRS PRIOR
C                    TO CURRENT TIME
C        MASS - MASS NUMBER (ONLY DENSITY FOR SELECTED GAS IS
C                 CALCULATED.  MASS 0 IS TEMPERATURE.  MASS 48 FOR ALL.
C     OUTPUT:
C        D(1) - HE NUMBER DENSITY(CM-3)
C        D(2) - O NUMBER DENSITY(CM-3)
C        D(3) - N2 NUMBER DENSITY(CM-3)
C        D(4) - O2 NUMBER DENSITY(CM-3)
C        D(5) - AR NUMBER DENSITY(CM-3)
C        D(6) - TOTAL MASS DENSITY(GM/CM3)
C        D(7) - H NUMBER DENSITY(CM-3)
C        D(8) - N NUMBER DENSITY(CM-3)
C        T(1) - EXOSPHERIC TEMPERATURE
C        T(2) - TEMPERATURE AT ALT
C
C      TO GET OUTPUT IN M-3 and KG/M3:   CALL METERS(.TRUE.)
C
C          ADDITIONAL COMMENTS
C           (1) LOWER BOUND QUANTITIES IN COMMON/GTS3C/
C           (2) TO TURN ON AND OFF PARTICULAR VARIATIONS CALL TSELEC(SW)
C               WHERE SW IS A 25 ELEMENT ARRAY CONTAINING 0. FOR OFF, 1.
C               FOR ON, OR 2. FOR MAIN EFFECTS OFF BUT CROSS TERMS ON
C               FOR THE FOLLOWING VARIATIONS
C               1 - F10.7 EFFECT ON MEAN  2 - TIME INDEPENDENT
C               3 - SYMMETRICAL ANNUAL    4 - SYMMETRICAL SEMIANNUAL
C               5 - ASYMMETRICAL ANNUAL   6 - ASYMMETRICAL SEMIANNUAL
C               7 - DIURNAL               8 - SEMIDIURNAL
C               9 - DAILY AP             10 - ALL UT/LONG EFFECTS
C              11 - LONGITUDINAL         12 - UT AND MIXED UT/LONG
C              13 - MIXED AP/UT/LONG     14 - TERDIURNAL
C              15 - DEPARTURES FROM DIFFUSIVE EQUILIBRIUM
C              16 - ALL TINF VAR         17 - ALL TLB VAR
C              18 - ALL T0 VAR           19 - ALL S VAR
C              20 - ALL Z0 VAR           21 - ALL NLB VAR
C              22 - ALL TR12 VAR         23 - TURBO SCALE HEIGHT VAR
C
C              To get current values of SW: CALL TRETRV(SW)
C
      REAL D(8),T(2),MT(10),ALTL(8)
      include 'common_variables.f'
      LOGICAL METER
      
      COMMON/PARM5/PT(150),PD(150,7),PS(150),PDL(25,2)
      
      DATA MT/48,0,4,16,28,32,40,1,49,14/,IFL/0/
      DATA ALTL/200.,300.,150.,200.,240.,450.,320.,450./
      DATA IMR/0./
      IF(IFL.EQ.0.) THEN
       CALL PRMSG5
       IFL=1
      ENDIF
      YRD=IYD
C       Eq. A7
      TINF=PTM(1)*(1.+SW(16)*GLOBE5(YRD,SEC,GLAT,GLONG,STL,F107A,F107,
     $ AP,PT))*PT(1)
      ZA=PTM(5)*PDL(16,2)
C       Eq. A9
      T0=PTM(3)*PD(76,3)*(1.+SW(18)*GLOB5L(PD(76,3)))
C       Eq. A8
      TLB=PTM(2)*(1.+SW(17)*GLOB5L(PD(26,3)))*PD(26,3)
C       Eq. A10
      Z0=PTM(7)*(1.+SW(20)*GLOB5L(PD(51,3)))*PD(51,3)
C       Eq. A6
      G0=PTM(4)*PS(1)
     $ *(1.+SW(19)*GLOBE5(YRD,SEC,GLAT,GLONG,STL,F107A,F107,
     $ AP,PS))
C       Eq. A5
      S=G0/(TINF-TLB)
C       Eq. A11
      TR12=PD(101,3)*(1.+SW(22)*GLOB5L(PD(101,3)))
      T(1)=TINF
      IF(MASS.EQ.0) GO TO 50
C       Eq. A18  N2
      G28=SW(21)*GLOB5L(PD(1,3))
      YRD=IYD
      T(1)=TINF
      XMM=PDM(5,3)
      DO 10 J = 1,10
      IF(MASS.EQ.MT(J))   GO TO 15
   10 CONTINUE
      WRITE(16,100) MASS
      GO TO 90
   15 IF(ALT.GT.ALTL(6).AND.MASS.NE.28.AND.MASS.NE.48) GO TO 17
C
C       **** N2 DENSITY ****
C
C       Eq. A18
      DB28 = PDM(1,3)*EXP(G28)*PD(1,3)
C       Eq. A13 - A17
      D(3)=DENSS(ALT,DB28,TINF,TLB, 28.,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DD=D(3)
C       Eq. A19
      ZH28=PDM(3,3)
      ZHM28=PDM(4,3)*PDL(6,2)
      XMD=28.-XMM
      B28=DENSS(ZH28,DB28,TINF,TLB,XMD,-1.,TZ,PTM(6),S,T0,ZA,Z0,TR12)
      IF(ALT.GT.ALTL(3).OR.SW(15).EQ.0.) GO TO 17
      DM28=DENSS(ALT,B28,TINF,TLB,XMM,0.,TZ,PTM(6),S,T0,ZA,Z0,TR12)
C       Eq. A12
      D(3)=DNET(D(3),DM28,ZHM28,XMM,28.)
   17 CONTINUE
      GO TO (20,50,20,25,90,35,40,45,25,48),  J
   20 CONTINUE
C
C       **** HE DENSITY ****
C
C       Eq. A18
      G4 = SW(21)*GLOBE5(YRD,SEC,GLAT,GLONG,STL,F107A,F107,AP,PD(1,1))
      DB04 = PDM(1,1)*EXP(G4)*PD(1,1)
C       Eq. A13 - A17
      D(1)=DENSS(ALT,DB04,TINF,TLB, 4.,-.4,T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DD=D(1)
      IF(ALT.GT.ALTL(1).OR.SW(15).EQ.0.) GO TO 24
C       Eq. A19
      ZH04=PDM(3,1)
      B04=DENSS(ZH04,DB04,TINF,TLB,4.-XMM,-1.4,
     $  T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DM04=DENSS(ALT,B04,TINF,TLB,XMM,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
C       Eq. A12
      ZHM04=ZHM28
      D(1)=DNET(D(1),DM04,ZHM04,XMM,4.)
C       Eq. A20b
      RL=ALOG(B28*PDM(2,1)/B04)
C       Eq. A20a
      ZC04=PDM(5,1)*PDL(1,2)
      HC04=PDM(6,1)*PDL(2,2)
      D(1)=D(1)*CCOR(ALT,RL,HC04,ZC04)
   24 CONTINUE
      IF(MASS.NE.48)   GO TO 90
   25 CONTINUE
C
C      **** O DENSITY ****
C
C       Eq. A18
      G16= SW(21)*GLOBE5(YRD,SEC,GLAT,GLONG,STL,F107A,F107,AP,PD(1,2))
      DB16 =  PDM(1,2)*EXP(G16)*PD(1,2)
C       Eq. A13 - A17
      D(2)=DENSS(ALT,DB16,TINF,TLB, 16.,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DD=D(2)
      IF(ALT.GT.ALTL(2).OR.SW(15).EQ.0.) GO TO 34
C  Corrected from PDM(3,1) to PDM(3,2)  12/2/85
C       Eq. A19
      ZH16=PDM(3,2)
      B16=DENSS(ZH16,DB16,TINF,TLB,16-XMM,-1.,
     $  T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DM16=DENSS(ALT,B16,TINF,TLB,XMM,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
C       Eq. A12
      ZHM16=ZHM28
      D(2)=DNET(D(2),DM16,ZHM16,XMM,16.)
C       Eq. A20b
      RL=ALOG(B28*PDM(2,2)*ABS(PDL(17,2))/B16)
C       Eq. A20a
      HC16=PDM(6,2)*PDL(4,2)
      ZC16=PDM(5,2)*PDL(3,2)
      D(2)=D(2)*CCOR(ALT,RL,HC16,ZC16)
C       Eq. A21
      HCC16=PDM(8,2)*PDL(14,2)
      ZCC16=PDM(7,2)*PDL(13,2)
      RC16=PDM(4,2)*PDL(15,2)
      D(2)=D(2)*CCOR(ALT,RC16,HCC16,ZCC16)
   34 CONTINUE
      IF(MASS.NE.48 .AND. MASS.NE.49) GO TO 90
   35 CONTINUE
C
C       **** O2 DENSITY ****
C
C       Eq. A18
      G32= SW(21)*GLOBE5(YRD,SEC,GLAT,GLONG,STL,F107A,F107,AP,PD(1,4))
      DB32 = PDM(1,4)*EXP(G32)*PD(1,4)
C       Eq. A13 - A17
      D(4)=DENSS(ALT,DB32,TINF,TLB, 32.,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
      IF(MASS.EQ.49) THEN
         DD=DD+2.*D(4)
      ELSE
         DD=D(4)
      ENDIF
      IF(ALT.GT.ALTL(4).OR.SW(15).EQ.0.) GO TO 39
C       Eq. A19
      ZH32=PDM(3,4)
      B32=DENSS(ZH32,DB32,TINF,TLB,32.-XMM,-1.,
     $  T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DM32=DENSS(ALT,B32,TINF,TLB,XMM,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
C       Eq. A12
      ZHM32=ZHM28
      D(4)=DNET(D(4),DM32,ZHM32,XMM,32.)
C       Eq. A20b
      RL=ALOG(B28*PDM(2,4)/B32)
C       Eq. A20a
      HC32=PDM(6,4)*PDL(8,2)
      ZC32=PDM(5,4)*PDL(7,2)
      D(4)=D(4)*CCOR(ALT,RL,HC32,ZC32)
   39 CONTINUE
      IF(MASS.NE.48)   GO TO 90
   40 CONTINUE
C
C       **** AR DENSITY ****
C
C       Eq. A18
      G40= SW(21)*GLOBE5(YRD,SEC,GLAT,GLONG,STL,F107A,F107,AP,PD(1,5))
      DB40 = PDM(1,5)*EXP(G40)*PD(1,5)
C       Eq. A13 - A17
      D(5)=DENSS(ALT,DB40,TINF,TLB, 40.,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DD=D(5)
      IF(ALT.GT.ALTL(5).OR.SW(15).EQ.0.) GO TO 44
C       Eq. A19
      ZH40=PDM(3,5)
      B40=DENSS(ZH40,DB40,TINF,TLB,40.-XMM,-1.,
     $  T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DM40=DENSS(ALT,B40,TINF,TLB,XMM,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
C       Eq. A12
      ZHM40=ZHM28
      D(5)=DNET(D(5),DM40,ZHM40,XMM,40.)
C       Eq. A20b
      RL=ALOG(B28*PDM(2,5)/B40)
C       Eq. A20a
      HC40=PDM(6,5)*PDL(10,2)
      ZC40=PDM(5,5)*PDL(9,2)
      D(5)=D(5)*CCOR(ALT,RL,HC40,ZC40)
   44 CONTINUE
      IF(MASS.NE.48)   GO TO 90
   45 CONTINUE
C
C        **** HYDROGEN DENSITY ****
C
C       Eq. A18
      G1 = SW(21)*GLOBE5(YRD,SEC,GLAT,GLONG,STL,F107A,F107,AP,PD(1,6))
      DB01 = PDM(1,6)*EXP(G1)*PD(1,6)
C       Eq. A13 - A17
      D(7)=DENSS(ALT,DB01,TINF,TLB,1.,-.4,T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DD=D(7)
      IF(ALT.GT.ALTL(7).OR.SW(15).EQ.0.) GO TO 47
C       Eq. A19
      ZH01=PDM(3,6)
      B01=DENSS(ZH01,DB01,TINF,TLB,1.-XMM,-1.4,
     $  T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DM01=DENSS(ALT,B01,TINF,TLB,XMM,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
C       Eq. A12
      ZHM01=ZHM28
      D(7)=DNET(D(7),DM01,ZHM01,XMM,1.)
C       Eq. A20b
      RL=ALOG(B28*PDM(2,6)*ABS(PDL(18,2))/B01)
C       Eq. A20a
      HC01=PDM(6,6)*PDL(12,2)
      ZC01=PDM(5,6)*PDL(11,2)
      D(7)=D(7)*CCOR(ALT,RL,HC01,ZC01)
C       Eq. A21
      HCC01=PDM(8,6)*PDL(20,2)
      ZCC01=PDM(7,6)*PDL(19,2)
      RC01=PDM(4,6)*PDL(21,2)
      D(7)=D(7)*CCOR(ALT,RC01,HCC01,ZCC01)
   47 CONTINUE
   48 CONTINUE
C
C        **** ATOMIC NITROGEN DENSITY ****
C
C       Eq. A18
      G14 = SW(21)*GLOBE5(YRD,SEC,GLAT,GLONG,STL,F107A,F107,AP,PD(1,7))
      DB14 = PDM(1,7)*EXP(G14)*PD(1,7)
C       Eq. A13 - A17
      D(8)=DENSS(ALT,DB14,TINF,TLB,14.,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DD=D(8)
      IF(ALT.GT.ALTL(8).OR.SW(15).EQ.0.) GO TO 49
C       Eq. A19
      ZH14=PDM(3,7)
      B14=DENSS(ZH14,DB14,TINF,TLB,14.-XMM,-1.,
     $  T(2),PTM(6),S,T0,ZA,Z0,TR12)
      DM14=DENSS(ALT,B14,TINF,TLB,XMM,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
C       Eq. A12
      ZHM14=ZHM28
      D(8)=DNET(D(8),DM14,ZHM14,XMM,14.)
C       Eq. A20b
      RL=ALOG(B28*PDM(2,7)*ABS(PDL(3,1))/B14)
C       Eq. A20a
      HC14=PDM(6,7)*PDL(2,1)
      ZC14=PDM(5,7)*PDL(1,1)
      D(8)=D(8)*CCOR(ALT,RL,HC14,ZC14)
C       Eq. A21
      HCC14=PDM(8,7)*PDL(5,1)
      ZCC14=PDM(7,7)*PDL(4,1)
      RC14=PDM(4,7)*PDL(6,1)
      D(8)=D(8)*CCOR(ALT,RC14,HCC14,ZCC14)
   49 CONTINUE
      IF(MASS.NE.48) GO TO 90
C
C       TOTAL MASS DENSITY
C
      D(6) = 1.66E-24*(4.*D(1)+16.*D(2)+28.*D(3)+32.*D(4)+40.*D(5)+
     $       D(7)+14.*D(8))
      DB48=1.66E-24*(4.*DB04+16.*DB16+28.*DB28+32.*DB32+40.*DB40+DB01+
     $        14.*DB14)
      GO TO 90
   50 DDUM  = DENSS(ALT,1., TINF,TLB,0.,0.,T(2),PTM(6),S,T0,ZA,Z0,TR12)
      GO TO 90
   90 CONTINUE
      IF(IMR.EQ.1) THEN
        DO 95 I=1,8
          D(I)=D(I)*1.E6
   95   CONTINUE
        D(6)=D(6)/1000.
      ENDIF
      RETURN
  100 FORMAT(1X,'MASS', I5, '  NOT VALID')
      ENTRY METERS(METER)
      IMR=0
      IF(METER) IMR=1
      END
C--------------------------------------------------------------------
      FUNCTION DENSS(ALT,DLB,TINF,TLB,XM,ALPHA,TZ,ZLB,S2,T0,ZA,Z0,TR12)
C       Calculate Temperature and Density Profiles for MSIS models


CALEX I am not sure how to get rid of the common blocks since
CALEX some common variables are dummy variables in this function
      COMMON/PARMB/GSURF,RE

CALEX these common blocks are never used elsewhere
      COMMON/FIT/TAF
      COMMON/LSQV/MP,II,JG,LT,QPB(50),IERR,IFUN,N,J,DV(60)
      DATA RGAS/831.4/
      ZETA(ZZ,ZL)=(ZZ-ZL)*(RE+ZL)/(RE+ZZ)
      DENSS=1.
      Z=AMAX1(ALT,ZA)
C      Eq. A4a
      ZG2=ZETA(Z,ZLB)
C      Eq. A1a
      TT=TINF-(TINF-TLB)*EXP(-S2*ZG2)
      TA=TT
      TZ=TT
      DENSS=TZ
      IF(ALT.GE.ZA) GO TO 10
C      Eq. A4b
      ZG0=ZETA(Z0,ZA)
C      Eq. A2b
      DTA=(TINF-TA)*S2*((RE+ZLB)/(RE+ZA))**2
C      Eq. A3e
      T12=T0+TR12*(TA-T0)
C      Eq. A4b
      ZG1=ZETA(ALT,ZA)
C       CALCULATE TEMPERATURE BELOW ZA
C      Eq. A3a
      DD=0.666666*ZG0*DTA/TA**2 - 3.11111*(1./TA-1./T0)+
     $ 7.11111*(1./T12-1./T0)
C      Eq. A3b
      CC=ZG0*DTA/(2.*TA*TA) - (1./TA-1./T0) - 2.*DD
C      Eq. A3c
      BB=(1./TA-1./T0) - CC - DD
C      Eq. A3d
      X=(-(ZG1-ZG0)/ZG0)
C      Eq. A1b
      X2=X*X
      TZ=1./(1./T0+BB*X2+CC*X2*X2+DD*X2*X2*X2)
      DENSS=TZ
      TAF=(T12-T0)/(TA-T0)
   10 IF(XM.EQ.0.) GO TO 50
      IF(TA.GT.0. .AND. TZ.GT.0.) GO TO 20
         WRITE(16,*)ALT,XM,TINF,TLB,T0,TA,II,JG,N,DV(J),IFUN,S2,ZG0,TZ
         TT=TLB
         TA=TLB
         TZ=TLB
   20 CONTINUE
C      CALCULATE DENSITY ABOVE ZA
C      Eq. A17a
      GLB=GSURF/(1.+ZLB/RE)**2
C      Eq. A16a
      GAMMA=XM*GLB/(S2*RGAS*TINF)
C      Eq. A13, A14a, & A15
      DENSA=DLB*(TLB/TT)**(1.+ALPHA+GAMMA)*EXP(-S2*GAMMA*ZG2)
      DENSS=DENSA
      IF(ALT.GE.ZA) GO TO 50
C      CALCULATE DENSITY BELOW ZA
C      Eq. A17b
      GLB=GSURF/(1.+ZA/RE)**2
C      Eq. A16b
      GAMM=XM*GLB*ZG0/RGAS
C      Eq. A13, A14b, & A15
      DENSS=DENSA*(TA/TZ)**(1.+ALPHA)*
     $ EXP(GAMM*((X-1)/T0+BB*(X*X2-1.)/3.+CC*(X2*X2*X-1.)/5.+
     $ DD*(X2*X2*X2*X-1.)/7.))
   50 CONTINUE
CCCCCCWRITE(16,100)CXM,ALT,ZA,TINF,TLB,S2,T0,S1,TA,TZ,DLB,DENSA,DENSS
CC100 FORMAT(' D',13(1PE10.2))
      RETURN
      END
C--------------------------------------------------------------------
      FUNCTION GLOBE5(YRD,SEC,LAT,LONG,TLOC,F107A,F107,AP,P)
C       CALCULATE G(L) FUNCTION FOR MSIS-86/CIRA 1986
C       Upper Thermosphere Parameters
      REAL LAT, LONG
      DIMENSION P(150),SV(25),AP(7)
CALEX Some common variables in common_variables.f are dummy variables
CALEX as well.
      COMMON/TTEST/TINF,GB,ROUT,T(15)/CSW/SW(25),ISW,SWC(25)
     &      /LPOLY/PLG(9,4),CTLOC,STLOC,C2TLOC,S2TLOC,C3TLOC,S3TLOC,
     &             IYR,DAY,DF,DFA,APD,APDF,APT(4)
      DATA DGTR/1.74533E-2/,DR/1.72142E-2/, XL/1000./,TLL/1000./
     &  DAYL/-1./,P14/-1000./,P18/-1000./,P32/-1000./
     &  HR/.2618/,SR/7.2722E-5/,SV/25*1./,NSW/14/,P39/-1000./

CALEX Added save statement 8/25/04  
      save DAYL, P14, P18, P32, P39,CD14,CD18,CD32,CD39
C Eq. A24d
      G0(A)=(A-4.+(P(26)-1.)*(A-4.+(EXP(-ABS(P(25))*(A-4.))-1.)/
     &  ABS(P(25))))
C Eq. A24c
      SUMEX(EX)=1.+(1.-EX**19)/(1.-EX)*EX**(.5)
C Eq. A24a
      SG0(EX)=(G0(AP(2))+(G0(AP(3))*EX+G0(AP(4))*EX*EX+G0(AP(5))*EX**3
     $ +(G0(AP(6))*EX**4+G0(AP(7))*EX**12)*(1.-EX**8)/(1.-EX)))
     $ /SUMEX(EX)
      IF(ISW.NE.64999) CALL TSELEC(SV)
      T(10) = 0.
      T(11) = 0.
      T(12) = 0.
      T(13)=0.
   10 CONTINUE
      IYR = YRD/1000.
      DAY = YRD - IYR*1000.
C Eq. A22 (remainder of code)
      IF(XL.EQ.LAT)   GO TO 15
C CALCULATE LEGENDRE POLYNOMIALS
      C = SIN(LAT*DGTR)
      S = COS(LAT*DGTR)
      C2 = C*C
      C4 = C2*C2
      S2 = S*S
      PLG(2,1) = C
      PLG(3,1) = 0.5*(3.*C2 -1.)
      PLG(4,1) = 0.5*(5.*C*C2-3.*C)
      PLG(5,1) = (35.*C4 - 30.*C2 + 3.)/8.
      PLG(6,1) = (63.*C2*C2*C - 70.*C2*C + 15.*C)/8.
      PLG(7,1) = (11.*C*PLG(6,1) - 5.*PLG(5,1))/6.
      PLG(2,2) = S
      PLG(3,2) = 3.*C*S
      PLG(4,2) = 1.5*(5.*C2-1.)*S
      PLG(5,2) = 2.5*(7.*C2*C-3.*C)*S
      PLG(6,2) = 1.875*(21.*C4 - 14.*C2 +1.)*S
      PLG(7,2) = (11.*C*PLG(6,2)-6.*PLG(5,2))/5.
      PLG(3,3) = 3.*S2
      PLG(4,3) = 15.*S2*C
      PLG(5,3) = 7.5*(7.*C2 -1.)*S2
      PLG(6,3) = 3.*C*PLG(5,3)-2.*PLG(4,3)
      PLG(7,3)=(11.*C*PLG(6,3)-7.*PLG(5,3))/4.
      PLG(8,3)=(13.*C*PLG(7,3)-8.*PLG(6,3))/5.
      PLG(4,4) = 15.*S2*S
      PLG(5,4) = 105.*S2*S*C
      PLG(6,4)=(9.*C*PLG(5,4)-7.*PLG(4,4))/2.
      PLG(7,4)=(11.*C*PLG(6,4)-8.*PLG(5,4))/3.
      XL=LAT
   15 CONTINUE
      IF(TLL.EQ.TLOC)   GO TO 16
      STLOC = SIN(HR*TLOC)
      CTLOC = COS(HR*TLOC)
      S2TLOC = SIN(2.*HR*TLOC)
      C2TLOC = COS(2.*HR*TLOC)
      S3TLOC = SIN(3.*HR*TLOC)
      C3TLOC = COS(3.*HR*TLOC)
      TLL = TLOC
   16 CONTINUE

C      write(*,*) 'day,dayl,P(14),P14,P18,P(32),P32,P(39),P39=',
C     ; day,dayl,P(14),P14,P18,P(32),P32,P(39),P39

      IF(DAY.NE.DAYL.OR.P(14).NE.P14) CD14=COS(DR*(DAY-P(14)))
      IF(DAY.NE.DAYL.OR.P(14).NE.P14) C2D14=COS(DR*2*(DAY-P(14)))
      IF(DAY.NE.DAYL.OR.P(18).NE.P18) CD18=COS(2.*DR*(DAY-P(18)))
      IF(DAY.NE.DAYL.OR.P(32).NE.P32) CD32=COS(DR*(DAY-P(32)))
      IF(DAY.NE.DAYL.OR.P(39).NE.P39) CD39=COS(2.*DR*(DAY-P(39)))
      DAYL = DAY
      P14 = P(14)
      P18 = P(18)
      P32 = P(32)
      P39 = P(39)
C      write (*,*) p14,p18,p32,p39
C         F10.7 EFFECT
      DF = F107 - F107A
      DFA=F107A-150.
      T(1) =  P(20)*DF + P(21)*DF*DF + P(22)*DFA
     $ + P(30)*DFA**2
      F1 = 1. + (P(48)*DFA +P(20)*DF+P(21)*DF*DF)*SWC(1)
      F2 = 1. + (P(50)*DFA+P(20)*DF+P(21)*DF*DF)*SWC(1)
C        TIME INDEPENDENT
      T(2) =
     1  (P(2)*PLG(3,1) + P(3)*PLG(5,1)+P(23)*PLG(7,1))
     $ +(P(15)*PLG(3,1))*DFA*SWC(1)
     2 +P(27)*PLG(2,1)
C        SYMMETRICAL ANNUAL
      
      T(3) =
     1 (P(19) )*CD32
C        SYMMETRICAL SEMIANNUAL
      T(4) =
     1 (P(16)+P(17)*PLG(3,1))*CD18
C        ASYMMETRICAL ANNUAL
C      write(*,*) 'ok'
C      write(*,*) F1,P(10),PLG(2,1),P(11),PLG(2,1),CD14
C      write(*,*) F1,P(10),PLG(2,1),P(11),PLG(2,1),CD14

      T(5) =  F1*
     1  (P(10)*PLG(2,1) + P(11)*PLG(4,1))*CD14
C         ASYMMETRICAL SEMIANNUAL
      T(6) =    P(38)*PLG(2,1)*CD39
C        DIURNAL
      T71 = (P(12)*PLG(3,2) + P(36)*PLG(2,2))*CD14*SWC(5)
      T72 = (P(13)*PLG(3,2) + P(37)*PLG(2,2))*CD14*SWC(5)
      T(7) = F2*
     1 ((P(4)*PLG(2,2) + P(5)*PLG(4,2) + P(28)*PLG(6,2)
     2 + T71)*CTLOC
     4 + (P(7)*PLG(2,2) + P(8)*PLG(4,2) +P(29)*PLG(6,2)
     5 + T72)*STLOC)
C        SEMIDIURNAL
      T81 = (P(24)*PLG(4,3))*CD14*SWC(5)
      T82 = (P(34)*PLG(4,3))*CD14*SWC(5)
      T(8) = F2*
     1 ((P(6)*PLG(3,3) + P(42)*PLG(5,3) + T81)*C2TLOC
     3 +(P(9)*PLG(3,3) + P(43)*PLG(5,3) + T82)*S2TLOC)
C        TERDIURNAL
      T(14) = F2*
     1 ((P(40)*PLG(4,4)+(P(94)*PLG(5,4)+P(47)*PLG(7,4))*CD14*SWC(5))*
     $ S3TLOC
     2 +(P(41)*PLG(4,4)+(P(95)*PLG(5,4)+P(49)*PLG(7,4))*CD14*SWC(5))*
     $ C3TLOC)
C          MAGNETIC ACTIVITY BASED ON DAILY AP
      IF(SW(9).EQ.-1. .AND. P(52).NE.0.) GO TO 30
      APD=(AP(1)-4.)
      P44=P(44)
      P45=P(45)
      IF(P44.LT.0) P44=1.E-5
      APDF = (APD+(P45-1.)*(APD+(EXP(-P44  *APD)-1.)/P44  ))
      T(9)=APDF*(P(33)+P(46)*PLG(3,1)+P(35)*PLG(5,1)+
     $ (P(101)*PLG(2,1)+P(102)*PLG(4,1)+P(103)*PLG(6,1))*CD14*SWC(5)+
     $ (P(122)*PLG(2,2)+P(123)*PLG(4,2)+P(124)*PLG(6,2))*SWC(7)*
     $ COS(HR*(TLOC-P(125))))
      GO TO 40
   30 CONTINUE
      EXP1 = EXP(-10800.*ABS(P(52))/(1.+P(139)*(45.-ABS(LAT))))
      IF(EXP1.GT..99999) EXP1=.99999
      EXP2 = EXP(-10800.*ABS(P(54)))
      IF(EXP2.GT..99999) EXP2=.99999
      IF(P(25).LT.1.E-4) P(25)=1.E-4
      APT(1)=SG0(EXP1)
      APT(3)=SG0(EXP2)
      T(9) = APT(1)*(P(51)+P(97)*PLG(3,1)+P(55)*PLG(5,1)+
     $ (P(126)*PLG(2,1)+P(127)*PLG(4,1)+P(128)*PLG(6,1))*CD14*SWC(5)+
     $ (P(129)*PLG(2,2)+P(130)*PLG(4,2)+P(131)*PLG(6,2))*SWC(7)*
     $ COS(HR*(TLOC-P(132))))
  40  CONTINUE
      IF(SW(10).EQ.0.OR.LONG.LE.-1000.) GO TO 49
C        LONGITUDINAL
      T(11)= (1.+P(90)*PLG(2,1))*(1.+P(81)*DFA*SWC(1))*
     $((P(65)*PLG(3,2)+P(66)*PLG(5,2)+P(67)*PLG(7,2)
     $ +P(104)*PLG(2,2)+P(105)*PLG(4,2)+P(106)*PLG(6,2)
     $ +SWC(5)*(P(110)*PLG(2,2)+P(111)*PLG(4,2)+P(112)*PLG(6,2))*CD14)*
     $     COS(DGTR*LONG)
     $ +(P(91)*PLG(3,2)+P(92)*PLG(5,2)+P(93)*PLG(7,2)
     $ +P(107)*PLG(2,2)+P(108)*PLG(4,2)+P(109)*PLG(6,2)
     $ +SWC(5)*(P(113)*PLG(2,2)+P(114)*PLG(4,2)+P(115)*PLG(6,2))*CD14)*
     $  SIN(DGTR*LONG))
C        UT AND MIXED UT,LONGITUDE
      T(12)=(1.+P(96)*PLG(2,1))*(1.+P(82)*DFA*SWC(1))*
     $(1.+P(120)*PLG(2,1)*SWC(5)*CD14)*
     $((P(69)*PLG(2,1)+P(70)*PLG(4,1)+P(71)*PLG(6,1))*
     $     COS(SR*(SEC-P(72))))
      T(12)=T(12)+SWC(11)*
     $ (P(77)*PLG(4,3)+P(78)*PLG(6,3)+P(79)*PLG(8,3))*
     $     COS(SR*(SEC-P(80))+2.*DGTR*LONG)*(1.+P(138)*DFA*SWC(1))
C        UT,LONGITUDE MAGNETIC ACTIVITY
      IF(SW(9).EQ.-1. .AND. P(52).NE.0.) GO TO 45
      T(13)= APDF*SWC(11)*(1.+P(121)*PLG(2,1))*
     $((P( 61)*PLG(3,2)+P( 62)*PLG(5,2)+P( 63)*PLG(7,2))*
     $     COS(DGTR*(LONG-P( 64))))
     $ +APDF*SWC(11)*SWC(5)*
     $ (P(116)*PLG(2,2)+P(117)*PLG(4,2)+P(118)*PLG(6,2))*
     $     CD14*COS(DGTR*(LONG-P(119)))
     $ + APDF*SWC(12)*
     $ (P( 84)*PLG(2,1)+P( 85)*PLG(4,1)+P( 86)*PLG(6,1))*
     $     COS(SR*(SEC-P( 76)))
      GOTO 48
   45 CONTINUE
      T(13)=APT(1)*SWC(11)*(1.+P(133)*PLG(2,1))*
     $((P(53)*PLG(3,2)+P(99)*PLG(5,2)+P(68)*PLG(7,2))*
     $     COS(DGTR*(LONG-P(98))))
     $ +APT(1)*SWC(11)*SWC(5)*
     $ (P(134)*PLG(2,2)+P(135)*PLG(4,2)+P(136)*PLG(6,2))*
     $     CD14*COS(DGTR*(LONG-P(137)))
     $ +APT(1)*SWC(12)*
     $ (P(56)*PLG(2,1)+P(57)*PLG(4,1)+P(58)*PLG(6,1))*
     $     COS(SR*(SEC-P(59)))
   48 CONTINUE
C  PARMS NOT USED: 60,83,100,140-150
   49 TINF = 0.
      IF(SW(9).EQ.-1.) TINF=P(31)
      DO 50 I = 1,NSW
   50 TINF = TINF + ABS(SW(I))*T(I)
      GLOBE5 = TINF
      RETURN
      END
C--------------------------------------------------------------------
      SUBROUTINE TSELEC(SV)
C        SET SWITCHES
C     origionally:  DIMENSION SV(1),SAV(25),SVV(1)
      include 'common_variables.f'
      REAL SV(25),SAV(25),SVV(1)
c      COMMON/CSW/SW(25),ISW,SWC(25)
      DO 100 I = 1,25
        SAV(I)=SV(I)
        SW(I)=AMOD(SV(I),2.)
        IF(ABS(SV(I)).GT.0.) THEN
          SWC(I)=1.
        ELSE
          SWC(I)=0.
        ENDIF
  100 CONTINUE
      ISW=64999
      RETURN
      ENTRY TRETRV(SVV)
      DO 200 I=1,25
        SVV(I)=SAV(I)
  200 CONTINUE
      END
C--------------------------------------------------------------------
      FUNCTION GLOB5L(P)

C      LIMITED PARAMETER VERSION OF GLOBE 9/2/82
C       CALCULATE G(L) FUNCTION FOR MSIS-86/CIRA 1986
C       Lower Thermosphere Parameters

CC      implicit none
      include 'common_variables.f'

C      COMMON/LPOLY/PLG(9,4),CTLOC,STLOC,C2TLOC,S2TLOC,C3TLOC,S3TLOC,
C     $ IYR,DAY,DF,DFA,APD,APDF,APT(4)/CSW/SW(25),ISW,SWC(25)
      REAL P(150),T(15)
      DATA DR/1.72142E-2/,T/15*0./
      DATA DAYL/-1./,P7/-1000./,P9/-1000./,P11/-1000./

      save CD7, CD9, CD11

      IF(DAY.NE.DAYL.OR.P7.NE.P(7)) CD7=COS(DR*(DAY-P(7)))
      IF(DAY.NE.DAYL.OR.P9.NE.P(9)) CD9=COS(2.*DR*(DAY-P(9)))
      IF(DAY.NE.DAYL.OR.P11.NE.P(11)) CD11=COS(DR*(DAY-P(11)))
      DAYL=DAY
      P7=P(7)
      P9=P(9)
      P11=P(11)
C`
      T(1)=P(2)*DFA
      T(2)=P(4)*PLG(3,1)
      T(3)=P(6)*CD7
      T(4)=(P(8) )*CD9
      T(5)=(P(10)*PLG(2,1)+P(22)*PLG(4,1))*CD11
      T(6)=0.
      T(7)=(P(14)*PLG(2,2)*CTLOC+P(15)*PLG(2,2)*STLOC)
      T(8)=(P(16)*PLG(3,3)+P(18)*PLG(5,3)
     $     +(P(20)*PLG(6,3))*CD11*SWC(5)
     $     )*C2TLOC
     $     +(P(17)*PLG(3,3)+P(19)*PLG(5,3)
     $     +(P(21)*PLG(6,3))*CD11*SWC(5)
     $     )*S2TLOC
      T(14)=(P(12)*PLG(4,4)*C3TLOC
     $     +P(25)*PLG(4,4)*S3TLOC)
      IF(SW(9).EQ.1)
     $ T(9)=APDF*(P(23)+P(24)*PLG(3,1)*SWC(2))
      IF(SW(9).EQ.-1)
     $ T(9)=(P(3)*APT(3)+P(5)*PLG(3,1)*APT(3)*SWC(2))
C       PARMS NOT USED: 13
CALEX NOTE: TTT was origionally TT but this conflicts with a
CALEX definition in common_variables.f      
      TTT=0.
      DO 50 I=1,14
   50 TTT=TTT+ABS(SW(I))*T(I)
      GLOB5L=TTT
      RETURN
      END
C--------------------------------------------------------------------
      FUNCTION DNET(DD,DM,ZHM,XMM,XM)
C       8/20/80
C       TURBOPAUSE CORRECTION FOR MSIS MODELS
C       Eq. A12b
      A=ZHM/(XMM-XM)
C       Eq. A12a
      YLOG=A*ALOG(DM/DD)
      IF(YLOG.LT.-10.) GO TO 10
      IF(YLOG.GT.10.)  GO TO 20
        DNET=DD*(1.+EXP(YLOG))**(1/A)
        GO TO 50
   10 CONTINUE
        DNET=DD
        GO TO 50
   20 CONTINUE
        DNET=DM
        GO TO 50
   50 CONTINUE
      RETURN
      END
C--------------------------------------------------------------------
      FUNCTION  CCOR(ALT, R,H1,ZH)
C        CHEMISTRY/DISSOCIATION CORRECTION FOR MSIS MODELS
C     Eq. A20a or Eq. A21
      E=(ALT-ZH)/H1
      IF(E.GT.70.) GO TO 20
      IF(E.LT.-70.) GO TO 10
        EX=EXP(E)
        CCOR=R/(1.+EX)
        GO TO 50
   10   CCOR=R
        GO TO 50
   20   CCOR=0.
        GO TO 50
   50 CONTINUE
      CCOR=EXP(CCOR)
       RETURN
      END
C--------------------------------------------------------------------
      SUBROUTINE PRMSG5
C          CIRA     11-FEB-86

      implicit none

      CHARACTER*4 ISD(3),IST(2)
      include 'common_variables.f'

      integer I

C      COMMON/PARM5/PT1(50),PT2(50),PT3(50),PA1(50),PA2(50),PA3(50),
C     * PB1(50),PB2(50),PB3(50),PC1(50),PC2(50),PC3(50),
C     * PD1(50),PD2(50),PD3(50),PE1(50),PE2(50),PE3(50),
C     * PF1(50),PF2(50),PF3(50),PG1(50),PG2(50),PG3(50),
C     * PH1(50),PH2(50),PH3(50),PI1(50)
      
      
      GSURF=980.665
      RE=6356.77
      DATA ISD/'11-F','EB-8','6   '/,IST/'18:2','3:31'/
      DO 10 I=1,3
        ISDATE(I)=ISD(I)
   10 CONTINUE
      DO 20 I=1,2
        ISTIME(I)=IST(I)
   20 CONTINUE
      NAME(1)='CIRA'
      NAME(2)='-86 '
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                 DROP IN MSIS86 COEFFICIENTS                  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      BLOCK DATA
      COMMON/PARM5/PT1(50),PT2(50),PT3(50),PA1(50),PA2(50),PA3(50),
     * PB1(50),PB2(50),PB3(50),PC1(50),PC2(50),PC3(50),
     * PD1(50),PD2(50),PD3(50),PE1(50),PE2(50),PE3(50),
     * PF1(50),PF2(50),PF3(50),PG1(50),PG2(50),PG3(50),
     * PH1(50),PH2(50),PH3(50),PI1(50)
      COMMON/LOWER5/PTM(8),PDM(8,7)
      DATA PT1/ 0.996040E+00, 0.385528E-01, 0.303445E-02,-0.105531E+00,
     ,-0.607134E-02,-0.516278E-03,-0.115622E+00, 0.202240E-02,
     , 0.990156E-02,-0.127371E+00,-0.302449E-01, 0.123512E-01,
     ,-0.526277E-02,-0.845398E+01, 0.000000E+00, 0.142370E-01,
     , 0.000000E+00, 0.125818E+03, 0.805486E-02, 0.164419E-02,
     ,-0.621452E-05, 0.311701E-02, 0.000000E+00, 0.386578E-02,
     , 0.132397E+00, 0.213315E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.641110E-05, 0.000000E+00, 0.300150E+02,
     , 0.533297E-02, 0.389146E-02, 0.204725E-02, 0.000000E+00,
     , 0.000000E+00,-0.192645E-01, 0.275905E+01, 0.147284E-02,
     , 0.341345E-03,-0.117388E-02,-0.354589E-03, 0.113139E+00,
     , 0.169134E+00, 0.508295E-02, 0.365016E-04, 0.426385E-02,
     , 0.115102E-03, 0.511819E-02/
      DATA PT2/ 0.609108E-02, 0.404995E-04, 0.153049E-02, 0.241470E-04,
     , 0.230764E-02, 0.155267E-02, 0.133722E-02,-0.182318E-02,
     ,-0.263007E+03, 0.000000E+00, 0.137337E-02, 0.995774E-03,
     , 0.000000E+00,-0.108983E+03, 0.562606E-02, 0.594053E-02,
     , 0.109358E-02, 0.000000E+00,-0.133410E-01,-0.243409E-01,
     ,-0.135688E-01, 0.311370E+05, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.283023E+04, 0.845583E-03, 0.538706E-03,
     , 0.000000E+00, 0.247956E+03, 0.292246E-02, 0.000000E+00,
     , 0.000000E+00, 0.747703E-04, 0.887993E-03, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     ,-0.116540E-01,-0.449173E-02,-0.353189E-03,-0.173933E-03,
     ,-0.153218E-03,-0.565411E+00, 0.777272E-02,-0.911784E+02,
     , 0.645187E-03, 0.000000E+00/
      DATA PT3/-0.837685E-03, 0.242318E-02, 0.473796E-02,-0.301801E-02,
     ,-0.423564E-02,-0.248289E-02, 0.919286E-03, 0.216372E-02,
     , 0.863968E-03, 0.189689E-02, 0.415654E-02, 0.000000E+00,
     , 0.118068E-01, 0.331190E-02, 0.000000E+00, 0.120222E-02,
     , 0.000000E+00, 0.000000E+00,-0.307246E+01, 0.000000E+00,
     , 0.000000E+00, 0.672403E-03, 0.108930E-02, 0.972278E-03,
     , 0.468242E+01,-0.315034E-03, 0.400059E-02, 0.515036E-02,
     , 0.162989E-02, 0.108824E-02, 0.995261E-03, 0.418955E+01,
     ,-0.364059E+00, 0.170182E-02, 0.000000E+00, 0.000000E+00,
     ,-0.320120E+01, 0.000000E+00, 0.580206E-02, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PA1/ 0.104934E+01,-0.288362E-01,-0.207095E+00,-0.103314E+00,
     ,-0.702373E-02, 0.129664E-01, 0.408853E+00,-0.919895E-02,
     ,-0.188660E-01, 0.140927E+01, 0.175033E+00, 0.187351E-01,
     , 0.110979E+00,-0.742871E+01, 0.000000E+00, 0.267143E+00,
     ,-0.595979E-01, 0.105038E+03,-0.840963E-01,-0.697632E-03,
     , 0.206521E-05, 0.765306E-03, 0.000000E+00, 0.000000E+00,
     , 0.126762E+00, 0.128876E+00,-0.504479E-01,-0.130735E-01,
     ,-0.224348E-01, 0.000000E+00, 0.000000E+00,-0.150832E+03,
     ,-0.629928E-02, 0.000000E+00,-0.407760E-02, 0.000000E+00,
     , 0.000000E+00, 0.525725E-01,-0.311486E+02,-0.313351E-02,
     , 0.275838E-02, 0.000000E+00, 0.000000E+00, 0.111247E+00,
     , 0.108815E+00,-0.466713E-01, 0.000000E+00,-0.329329E-02,
     , 0.000000E+00, 0.167838E-02/
      DATA PA2/-0.916691E-02, 0.345044E-04,-0.971806E-02, 0.000000E+00,
     ,-0.204672E-02,-0.786899E-02,-0.798285E-02, 0.536515E-02,
     ,-0.531172E+04, 0.000000E+00,-0.642781E-02,-0.171690E-02,
     , 0.000000E+00,-0.679131E+02,-0.179912E-01,-0.158305E-01,
     ,-0.712313E-02, 0.000000E+00, 0.253477E-01, 0.852960E-01,
     , 0.102163E+00, 0.295009E+05, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.684625E+04,-0.619098E-02,-0.269289E-02,
     , 0.000000E+00,-0.520231E+03,-0.633463E-02, 0.000000E+00,
     , 0.000000E+00,-0.602428E-02,-0.407077E-02, 0.542264E-02,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.407560E-01, 0.282288E-01, 0.908088E-02, 0.000000E+00,
     , 0.000000E+00,-0.405204E+00,-0.597931E-01,-0.731823E+02,
     ,-0.206620E-02, 0.000000E+00/
      DATA PA3/-0.372723E-02,-0.188146E-01,-0.101794E-01, 0.804633E-02,
     , 0.101090E-01, 0.873253E-02, 0.238268E-01, 0.480444E-02,
     , 0.171088E-02, 0.396369E-01,-0.213809E-01, 0.000000E+00,
     ,-0.102588E+00,-0.591702E-02, 0.000000E+00, 0.270923E-02,
     , 0.000000E+00, 0.000000E+00,-0.175043E+03, 0.603489E+00,
     ,-0.617589E+00, 0.838098E-02, 0.183871E-02,-0.705329E-03,
     ,-0.406644E+01,-0.509347E-02,-0.284344E-01,-0.124160E-01,
     , 0.133665E-01, 0.393410E-02,-0.503723E-03,-0.457683E+01,
     ,-0.529542E+00,-0.425812E-02, 0.000000E+00, 0.000000E+00,
     , 0.191541E+02, 0.000000E+00, 0.323247E-02, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PB1/ 0.931113E+00,-0.138721E+00,-0.133457E+00,-0.529542E-01,
     ,-0.444983E-02, 0.135264E-01, 0.598075E-01,-0.362880E-01,
     ,-0.312798E-01, 0.372068E+00, 0.295974E-01, 0.120509E-01,
     , 0.521995E-01,-0.778888E+01, 0.000000E+00, 0.118634E+00,
     ,-0.204495E-01, 0.103280E+03, 0.982432E-01, 0.477694E-03,
     , 0.000000E+00, 0.274372E-02, 0.000000E+00, 0.000000E+00,
     , 0.757809E-01, 0.171403E+00,-0.105205E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00,-0.873348E+01,
     ,-0.581094E-02, 0.000000E+00,-0.814944E-02, 0.000000E+00,
     , 0.000000E+00, 0.517255E-01,-0.153028E+02,-0.348932E-02,
     , 0.961771E-03, 0.557732E-02,-0.454180E-03, 0.988213E-01,
     , 0.940456E-01,-0.318797E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.232122E-02/
      DATA PB2/-0.600220E-02, 0.277654E-04,-0.322019E-02, 0.000000E+00,
     ,-0.378551E-02,-0.334809E-02,-0.170668E-02, 0.000000E+00,
     , 0.636184E+04, 0.000000E+00, 0.159986E-02,-0.388204E-02,
     ,-0.164825E-02,-0.747955E+02,-0.105360E-01,-0.945723E-02,
     ,-0.159824E-02,-0.706730E-03,-0.168513E-01,-0.113023E+00,
     ,-0.636637E-01,-0.137709E+05, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.152368E+05,-0.586061E-02,-0.253108E-02,
     , 0.000000E+00,-0.254837E+04,-0.328988E-02, 0.000000E+00,
     , 0.000000E+00,-0.276364E-02, 0.967923E-02, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.434255E-01, 0.114020E-01,-0.618447E-02, 0.000000E+00,
     , 0.000000E+00,-0.302568E+00,-0.327694E-01,-0.671589E+02,
     ,-0.228340E-02, 0.000000E+00/
      DATA PB3/ 0.306230E-02,-0.465113E-02,-0.973421E-02, 0.128326E-01,
     , 0.788553E-02, 0.797197E-02,-0.120760E-01,-0.767547E-02,
     ,-0.120755E-02,-0.298523E-01,-0.126560E-01, 0.000000E+00,
     ,-0.568350E-01,-0.153039E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.242911E-02,-0.401347E-02,-0.219074E-02,
     , 0.311281E+01, 0.323251E-02,-0.639523E-02,-0.663069E-02,
     ,-0.304403E-03,-0.401920E-02,-0.118708E-02, 0.415211E+01,
     ,-0.201896E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PC1/ 0.106903E+01, 0.377113E-03, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.898481E-01,-0.236325E+02, 0.208180E-01,
     , 0.139638E+03,-0.119444E+00,-0.845398E+01,-0.399776E-05,
     , 0.000000E+00, 0.366210E-02,-0.178929E-02, 0.190412E-01,
     ,-0.392257E-01, 0.632343E-02, 0.548144E-02, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     ,-0.243022E-02, 0.976619E+00, 0.568478E-03, 0.582026E-02,
     , 0.000000E+00, 0.621998E-02, 0.000000E+00, 0.000000E+00,
     , 0.107674E-01, 0.893820E+02,-0.192414E-01,-0.845398E+01,
     , 0.000000E+00, 0.000000E+00,-0.200200E-01,-0.195833E-02,
     ,-0.938391E-02, 0.131480E-01,-0.260147E-02,-0.808556E-03,
     , 0.511651E-04, 0.255717E-02, 0.000000E+00, 0.466814E-02,
     , 0.664196E-02, 0.000000E+00/
      DATA PC2/ 0.998594E+00, 0.190038E-03, 0.000000E+00,-0.243825E-01,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.522105E-01,-0.845398E+01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.767271E-02,
     , 0.564539E-02,-0.270623E-02,-0.526454E-03, 0.137075E-02,
     , 0.133060E-02, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.949197E+00, 0.000000E+00, 0.000000E+00,
     ,-0.768008E-01, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     ,-0.137993E-01,-0.140136E+01, 0.120481E+00,-0.845398E+01,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.987746E-02, 0.175330E-02,-0.688835E-03, 0.287022E-02,
     , 0.000000E+00, 0.000000E+00, 0.744513E-01, 0.000000E+0,0
     , 0.000000E+00, 0.000000E+00/
      DATA PC3/ 0.152840E+00, 0.000000E+00, 0.000000E+00, 0.116252E+01,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.649190E+00,-0.845398E+01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00,-0.584949E-01,
     ,-0.102105E+00, 0.299153E-01,-0.486227E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PD1/ 0.931402E+00, 0.137976E+00, 0.000000E+00, 0.323736E-03,
     , 0.000000E+00,-0.910906E-02, 0.707506E-01, 0.000000E+00,
     ,-0.516650E-01, 0.689755E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.845398E+01, 0.000000E+00, 0.281140E-01,
     , 0.000000E+00, 0.736009E+02, 0.596604E-01, 0.000000E+00,
     , 0.000000E+00,-0.151792E-02, 0.000000E+00, 0.000000E+00,
     , 0.132397E+00, 0.213315E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.948758E+01,
     , 0.884541E-02, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.113139E+00,
     , 0.169134E+00, 0.145192E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PD2/ 0.107906E-01, 0.299942E-04, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00,-0.148930E-01,-0.787184E-02,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     ,-0.683420E-01,-0.441778E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.229730E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PD3/ 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PE1/ 0.868053E+00, 0.236364E+00, 0.134306E+00, 0.103086E-01,
     , 0.000000E+00,-0.379164E-02,-0.157806E+00, 0.000000E+00,
     ,-0.587644E-01,-0.312508E+00, 0.000000E+00, 0.437387E-01,
     ,-0.354091E-01,-0.223636E+02, 0.000000E+00,-0.533976E-01,
     , 0.000000E+00, 0.114091E+03, 0.517497E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.132397E+00, 0.213315E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.342702E+03,
     , 0.157033E-01, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00,-0.366278E-02,
     ,-0.116193E-02, 0.000000E+00, 0.000000E+00, 0.113139E+00,
     , 0.169134E+00, 0.178431E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PE2/ 0.162864E-01, 0.316963E-04, 0.127968E-01, 0.000000E+00,
     , 0.000000E+00,-0.704599E-02, 0.207921E-02, 0.636660E-02,
     , 0.229940E+05, 0.000000E+00, 0.127833E-01,-0.208036E-02,
     ,-0.461820E-02,-0.629391E+02,-0.120745E-01, 0.136675E-01,
     , 0.136011E-01,-0.537162E-02, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.192509E+05, 0.835522E-02, 0.419439E-02,
     , 0.000000E+00, 0.120366E+05, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.100034E-01,-0.233267E-02, 0.972374E-02,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     ,-0.265079E-01,-0.209125E-01,-0.109465E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.217252E-01,-0.712385E+02,
     ,-0.189428E-02, 0.000000E+00/
      DATA PE3/-0.602006E-02, 0.169058E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.290646E-01, 0.348971E-02, 0.000000E+00,
     , 0.501174E-01, 0.550595E-01, 0.000000E+00,-0.955897E-02,
     , 0.000000E+00, 0.000000E+00,-0.151693E+04, 0.000000E+00,
     , 0.000000E+00, 0.129306E-01, 0.269567E-02, 0.000000E+00,
     , 0.392243E+01,-0.847690E-02, 0.116896E-01, 0.000000E+00,
     , 0.148967E-01, 0.544521E-02, 0.000000E+00, 0.564918E+01,
     , 0.000000E+00,-0.772178E-02, 0.000000E+00, 0.000000E+00,
     ,-0.734042E+02, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PF1/ 0.127515E+01,-0.210472E+00,-0.177924E+00, 0.218900E+00,
     , 0.288436E-01, 0.190077E-01, 0.291001E+00, 0.217437E-01,
     ,-0.105186E-01, 0.436141E+00, 0.107605E+00, 0.330755E-01,
     , 0.400581E-01,-0.958051E+01, 0.000000E+00, 0.154028E-01,
     , 0.000000E+00, 0.734194E+02, 0.496540E-01,-0.595906E-02,
     , 0.384512E-04,-0.136000E-01, 0.000000E+00, 0.000000E+00,
     , 0.132397E+00, 0.213315E+00,-0.416610E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.146276E+03,
     ,-0.198408E-01, 0.000000E+00, 0.132530E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00,-0.104687E-03,
     ,-0.147562E-02, 0.000000E+00, 0.000000E+00, 0.113139E+00,
     , 0.169134E+00,-0.126913E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.608370E-02/
      DATA PF2/-0.257587E-01, 0.319022E-04, 0.000000E+00, 0.000000E+00,
     , 0.156644E-01, 0.103640E-01, 0.105771E-02, 0.000000E+00,
     , 0.357949E+04, 0.000000E+00,-0.125672E-02, 0.152783E-02,
     , 0.130518E-02, 0.755558E+01,-0.920341E-02,-0.209142E-01,
     ,-0.134106E-01, 0.000000E+00,-0.483312E-01, 0.830900E-01,
     , 0.988009E-01,-0.141148E+05, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.105513E+04, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.673442E-02, 0.201691E-02, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.598019E-01, 0.633298E-02,-0.112871E-02, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00,-0.128604E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PF3/-0.494960E-02,-0.136415E-01,-0.115039E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.586860E-02,-0.141732E-02, 0.213697E-02,
     , 0.263845E+01,-0.834186E-02,-0.187336E-01,-0.190870E-01,
     ,-0.803810E-02,-0.284279E-02, 0.256722E-02, 0.171429E+01,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PG1/ 0.573587E+02,-0.398747E+00,0.00000E+00,-0.529554E+00,
     ,-0.582186E-02, 0.714177E-01,-0.679279E+00,-0.167715E+00,
     ,-0.642434E-01,-0.211569E+00,-0.159922E+00,-0.171024E-03,
     ,-0.115885E+00, 0.651603E+01, 0.000000E+00,-0.176683E+00,
     , 0.650395E-01, 0.143504E+01, 0.928208E-01, 0.511662E-02,
     , 0.000000E+00, 0.995121E-02, 0.000000E+00, 0.000000E+00,
     , 0.132397E+00, 0.213315E+00, 0.101451E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.567667E+02,
     , 0.238192E-02, 0.000000E+00,-0.188240E-01, 0.000000E+00,
     , 0.000000E+00, 0.476218E-01, 0.235206E+02, 0.475901E-02,
     , 0.576162E-02, 0.151815E-01,-0.192730E-01, 0.113139E+00,
     , 0.169134E+00,-0.288771E-01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.118418E-02/
      DATA PG2/-0.368927E-02, 0.314704E-04, 0.882198E-02, 0.000000E+00,
     ,-0.192562E-01,-0.258674E-02,-0.219913E-01, 0.000000E+00,
     , 0.438655E+04, 0.000000E+00, 0.760126E-02, 0.259438E-02,
     , 0.172310E-02, 0.779204E+02, 0.797786E-03,-0.770510E-02,
     , 0.190982E-02, 0.272707E-02, 0.101016E-01, 0.116537E+00,
     ,-0.312236E-02, 0.139783E+05, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.130712E+04, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.320544E-02,-0.206970E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.159010E-01,-0.191427E-02,-0.342829E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00,-0.345379E-01, 0.894518E+02,
     , 0.171556E-02, 0.000000E+00/
      DATA PG3/-0.765278E-02,-0.208987E-03,-0.157393E-01, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.860673E-02,-0.119922E-01,-0.646356E-02,
     ,-0.300107E+01,-0.932511E-02,-0.150205E-01,-0.867835E-02,
     ,-0.764801E-02,-0.131495E-01,-0.676720E-02,-0.182396E+01,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PH1/ 0.951363E+00,-0.467542E-01, 0.120260E+00, 0.000000E+00,
     , 0.000000E+00, 0.191357E-01, 0.000000E+00, 0.000000E+00,
     , 0.125429E-02,-0.133240E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.845398E+01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.252317E-02, 0.000000E+00,-0.973404E-02,
     , 0.132397E+00, 0.213315E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00,-0.718482E-03, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.787683E-02,-0.233698E-02, 0.113139E+00,
     , 0.169134E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PH2/ 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PH3/ 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00/
      DATA PI1/ 0.933804E+00, 0.547446E+01, 0.153263E+00, 0.919303E+00,
     , 0.164109E+02, 0.427083E+01, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.000000E+00, 0.115897E+01, 0.471094E+00, 0.109459E+01,
     , 0.525012E+01, 0.100000E+01, 0.100000E+01, 0.103999E+01,
     , 0.767132E+00, 0.110514E+01, 0.175636E+01, 0.110845E+01,
     , 0.233439E+01, 0.796532E+00, 0.431520E+01, 0.407300E+01,
     , 0.101885E+01, 0.239547E+00, 0.253791E-05, 0.842931E+00,
     , 0.104192E+01, 0.200202E+01, 0.100000E+01, 0.100000E+01,
     , 0.100000E+01, 0.100000E+01/
      DATA PTM/ 0.104130E+04, 0.386000E+03, 0.190000E+03, 0.166728E+02,
     , 0.115000E+03, 0.120000E+03, 0.945537E+02, 0.000000E+00/
      DATA PDM/ 0.245600E+08, 0.671072E-05, 0.100000E+03, 0.000000E+00,
     , 0.110000E+03, 0.100000E+02, 0.000000E+00, 0.000000E+00,
     , 0.859400E+11, 0.540000E+00, 0.105000E+03,-0.800000E+01,
     , 0.110000E+03, 0.100000E+02, 0.900000E+02, 0.200000E+01,
     , 0.281000E+12, 0.000000E+00, 0.105000E+03, 0.280000E+02,
     , 0.289500E+02, 0.000000E+00, 0.000000E+00, 0.000000E+00,
     , 0.330000E+11, 0.268270E+00, 0.105000E+03, 0.000000E+00,
     , 0.110000E+03, 0.100000E+02, 0.000000E+00, 0.000000E+00,
     , 0.133000E+10, 0.119615E-01, 0.105000E+03, 0.000000E+00,
     , 0.110000E+03, 0.100000E+02, 0.000000E+00, 0.000000E+00,
     , 0.176100E+06, 0.100000E+01, 0.950000E+02,-0.800000E+01,
     , 0.110000E+03, 0.100000E+02, 0.900000E+02, 0.200000E+01,
     , 0.100000E+08, 0.100000E+01, 0.105000E+03,-0.800000E+01,
     , 0.110000E+03, 0.100000E+02, 0.900000E+02, 0.200000E+01/
      END
C        OPEN(UNIT=12,FILE='MSIS86.DAT',FORM='FORMATTED',STATUS='OLD')
C        READ(12,1290) PT1,PT2,PT3,PA1,PA2,PA3,PB1,PB2,PB3,PC1,PC2,
C     &    PC3,PD1,PD2,PD3,PE1,PE2,PE3,PF1,PF2,PF3,PG1,PG2,PG3,PH1,
C     &    PH2,PH3,PI1,PTM,PDM
CCCCCCCCCCCCC IN PC VERSION: 1290    FORMAT(5E13.6)
C1290  FORMAT(1X,5E13.6)
CCCCCCCCCCCCC------------------------------------------------------------------
      SUBROUTINE GGM(ART,XLG,BG,XLM,BM)
C CALCULATES GEOMAGNETIC LONGITUDE (XLM) AND LATITUDE (BM)
C FROM GEOGRAFIC LONGITUDE (XLG) AND LATITUDE (BG) FOR ART=0
C AND REVERSE FOR ART=1. ALL ANGLES IN DEGREE.
C LATITUDE:-90 TO 90. LONGITUDE:0 TO 360 EAST.
      INTEGER ART
      FAKTOR=.0174532925
      ZPI=FAKTOR*360.
      CBG=11.4*FAKTOR
      CI=COS(CBG)
      SI=SIN(CBG)
      IF(ART.EQ.0) GOTO 10
      CBM=COS(BM*FAKTOR)
      SBM=SIN(BM*FAKTOR)
      CLM=COS(XLM*FAKTOR)
      SLM=SIN(XLM*FAKTOR)
      SBG=SBM*CI-CBM*CLM*SI
      BG=ASIN(SBG)
      CBG=COS(BG)
      SLG=(CBM*SLM)/CBG
      CLG=(SBM*SI+CBM*CLM*CI)/CBG
        IF(CLG.GT.1.) CLG=1.
        XLG=ACOS(CLG)
      IF(SLG.LT.0.0) XLG=ZPI-ACOS(CLG)
      BG=BG/FAKTOR
      XLG=XLG/FAKTOR
      XLG=XLG-69.8
      IF(XLG.LT.0.0) XLG=XLG+360.0
        RETURN
10    YLG=XLG+69.8
      CBG=COS(BG*FAKTOR)
      SBG=SIN(BG*FAKTOR)
      CLG=COS(YLG*FAKTOR)
      SLG=SIN(YLG*FAKTOR)
      SBM=SBG*CI+CBG*CLG*SI
      BM=ASIN(SBM)
      CBM=COS(BM)
      SLM=(CBG*SLG)/CBM
      CLM=(-SBG*SI+CBG*CLG*CI)/CBM
      XLM=ACOS(CLM)
      IF(SLM.LT..0) XLM=ZPI-ACOS(CLM)
      BM=BM/FAKTOR
      XLM=XLM/FAKTOR
      END
C                                                                      C
C**********************************************************************C
C                                                                      C
C     END OF MSIS                                                      C
C                                                                      C
C**********************************************************************C
C Subroutine GLOWEX
C
C S.C. Solomon, 6/89; Adapted for polar wind model by R. Cannata, 9/89
C
C Supplied to subroutine in labeled common /CGLOW/
C ISCALE  =0 for contrast ratio scaling of solar flux, =1 for linear interp.
C JLOCAL  =0 for electron transport calculation, =1 for local effects only
C IDATE   Date, in form yyddd
C UT      Universal Time, seconds
C GLAT    Geographic latitude, degrees
C GLONG   Geographic longitude, degrees
C F107    Solar F10.7 flux index for day being modeled (not previous day)
C F107A   Solar F10.7 flux index 81-day centered average
C EFLUX   Auroral electron fluxes: hard, soft, cusp, drizzle; erg cm-2, s-1
C EZERO   Auroral electron flux characteristic energies: h, s, c, d; keV
C ZZ      altitude array, km  (NO !!!!!! CM !!!!!)
C ZO      O number density at each altitude, cm-3
C ZN2     N2  "      "      "   "     "       "
C ZO2     O2         "
C ZNO     NO         "
C ZNS     N(4S)      "
C ZND     N(2D)      "
C ZRHO    mass density at each altitude, gm cm-3
C ZE      electron density at each alt, cm-3
C ZTN     Neutral temperature at each alt, K
C ZTI     Ion temperature at each alt, K
C ZTE     Electron temp at each alt, K (if zero, Brace/Theis model fr. IRI used)
C PHITOP  Low energy electron flux array from conjugate point, cm-2 s-1 eV-1
C RAT(JMAX)  ALTITUDE SPECIFIC FRACTION OF IONIZATION RAT WHICH COMES FROM 
C         PHOTOELECTRONS 
C
C Calculated by subroutine:
C ECALC   calculated electron density assuming photochemical equilibrium
C         below 200 km and using given O+ density at or above 200 km
C ZXDEN   array of excited and and/or ionized state densities,
C         O+(2P), O+(2D), O+(4S), N2+, N+, O2+, NO+, N2(A), N(2P), N(2D),
C         O(1S), O(1D), 8 spares, at each altitude, cm-3
C ZETA    array of volume emission rates  at 3371A, 4278A, 5200A, 5577A,
C         6300A, 7320A, 14 spares, at each altitude, cm-3 s-1
C ZCETA   array of reaction contributions to each v.e.r at each alt, cm-3 s-1
C VCB     array of vertical column brightnesses (as above), Rayleighs
C SZA     solar zenith angle, radians
C DIP     magnetic field dip angle, radians
C EFRAC   energy conservation check from electron transport routine, (out-in)/in
C IERR    error code returned from electron transport routine, should = 0
C
C Array dimensions:
C JMAX    number of altitude levels
C NBINS   number of energetic electron energy bins
C LMAX    number of wavelength intervals for solar flux
C NMAJ    number of major species
C NEX     number of ionized/excited species
C NW      number of airglow emission wavelengths
C NC      number of component production terms for each emission
C NST     number of states produced by photoionization/dissociation
C NEI     number of states produced by electron impact
C NF      number of available types of auroral fluxes
C
C
      SUBROUTINE GLOWEX
C
      include 'common_variables.f'
C      PARAMETER (JMAX=92)
C      PARAMETER (NBINS=84)
C      PARAMETER (LMAX=59)
C      PARAMETER (NMAJ=3)
C      PARAMETER (NEX=20)
C      PARAMETER (NW=20)
C      PARAMETER (NC=10)
C      PARAMETER (NST=6)
C      PARAMETER (NEI=10)
C      PARAMETER (NF=4)
C
      REAL ZVCD(NMAJ,JMAX)
c      DIMENSION PHOTOTF(601)
c      DIMENSION ALTD(601),RAD(601),RBOUND(601),photott(601)
      REAL photott(MaxGrid)
C      COMMON /CGLOW/
C     >  EFLUX(NF), EZERO(NF),
C     >  SZA, DIP, ISCALE, JLOCAL, EFRAC, IERR,
C     >  ZO(JMAX), ZN2(JMAX), ZO2(JMAX), ZNO(JMAX),
C     >  ZNS(JMAX), ZND(JMAX), ZRHO(JMAX), ZE(JMAX),
C     >  ZCOL(NMAJ,JMAX),ZTN(JMAX),ZMAJ(NMAJ,JMAX),ZZ(JMAX),
C     >  ZTI(JMAX), ZTE(JMAX),
C     >  WAVE1(LMAX), WAVE2(LMAX), SFLUX(LMAX),
C     >  ENER(NBINS), DEL(NBINS), PHITOP(NBINS),
C     >  PESPEC(NBINS,JMAX), SESPEC(NBINS,JMAX),
C     >  PHOTOI(NST,NMAJ,JMAX),PHOTOD(NST,NMAJ,JMAX),PHONO(NST,JMAX),
C     >  QTI(JMAX),AURI(NMAJ,JMAX),PIA(NMAJ,JMAX),SION(NMAJ,JMAX),
C     >  UFLX(NBINS,JMAX), DFLX(NBINS,JMAX), AGLW(NEI,NMAJ,JMAX),
C     >  EHEAT(JMAX), TEZ(JMAX), ECALC(JMAX),
C     >  ZXDEN(NEX,JMAX), ZETA(NW,JMAX), ZCETA(NC,NW,JMAX),VCB(NW),
C     >  NNN(NMAJ)
C
CALEX
      
CALEX origionally iyd was idate but this is inconsistant with 
CALEX common_variables.f
C      COMMON /MSIS1/ IDATE,UT,SEC,GLAT,GLONG,STL,F107A,F107,AP(7),IART
C     $,GMLAT,GMLONG
c      COMMON /SPCE/ ALTMIN,ALTMAX,ALTD,RAD,RBOUND,DRBND,DTR1,DTR2
c      COMMON /CMDN/ NDIM,NDIM1,DT,DTMX,TIME,TMAX,NSTEP,NPRINT,NSTPMX
c     ;,NDIM2,NDIMM,DTX1,DTX2
c      COMMON /PHOT/PHOTOTF(601),phototp(601)
c      COMMON /INTG/IFACTOR
      DATA IFIRST/1/, PI/3.1415926536/
      SAVE IFIRST
C
C UT GENERATED IN SUB MODATM IN HOURS...GLOWEX NEEDS UT IN SEC SO DEFINE "UTG"
      UTG = SEC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      I = 0
      J = 0
C  IFACTOR SCALES THE ALTITUDE INTERVAL FOR ATTENUATION CALCULATIONS
C  IN TERMS OF THE CELL THICKNESS ADOPTED IN MAIN PROGRAM
C  DMX MUST BE A POSITIVE EVEN INTEGER !
       IFACTOR = 2E5
       IDMX =INT(DRBND/IFACTOR)
       DO 101 K = 90,1000,IDMX
       I = I + 1
       ZKK = K*1.E05
       ZZ(I) = ZKK
101    CONTINUE 
      DO 100 I =1,JMAX
            J = J+1     
      CALL MODATM(ZZ(I),ZO2(J),ZN2(J),ZO(J),XXX,XXX,ZTN(J))
100   CONTINUE
C
       DO 102 I = 1,JMAX
          ZMAJ(1,I) = ZO(I)
          ZMAJ(2,I) = ZO2(I)
          ZMAJ(3,I) = ZN2(I)
 
102    CONTINUE
      ISCALE = 0
      JLOCAL = 1
      J = 0
C
C First call only, set up energy grid and scale solar flux:
C
      IF (IFIRST .EQ. 1) THEN
C
        IFIRST = 0
        DO 20 N=1,NBINS
          IF (N .LE. 21) THEN
            ENER(N) = 0.5 * FLOAT(N)
          ELSE
            ENER(N) = EXP (0.05 * FLOAT(N+26))
          ENDIF
   20   CONTINUE
        DEL(1) = 0.5
        DO 40 N=2,NBINS
          DEL(N) = ENER(N)-ENER(N-1)
   40   CONTINUE
        DO 60 N=1,NBINS
          ENER(N) = ENER(N) - DEL(N)/2.0
   60   CONTINUE
C
        CALL SSFLUX (ISCALE, F107, F107A, WAVE1, WAVE2, SFLUX, LMAX)
C
      ENDIF
C
C
C Find magnetic dip angle and solar zenith angle (radians):
C
      CALL FIELDM (GLAT, GLONG, 300., XF, YF, ZF, FF, DIP, DEC, SDIP)
      DIP = ABS(DIP) * PI/180.
C
      CALL SOLZEN (IYD, UTG, GLAT, GLONG, SZA)
      SZA = SZA * PI/180.
      SZAD = SZA*360./6.283185
      WRITE(16,9996)SZAD
 9996 FORMAT(26X,'SOLAR ZENITH ANGLE:',1F8.2,' DEGREES')
C Calculate slant path column densities in the direction of sun of major
C species:
C
 
        CALL RCOLUM (SZA, ZZ, ZMAJ, ZTN, ZCOL, ZVCD, JMAX, NMAJ)
C
C Call Subroutine EPHOTO to calculate the photoelectron production
C spectrum and photoionization rates as a function of altitude:
C
        CALL EPHOTO
C
      WRITE(16,9997)
CALEX note IDATE HERE is IYD in the rest of the subroutine
 9997 FORMAT('   IDATE ','  UTG   ','   SEC   ','    GLAT    ',
     $' GLONG    ',' STL   ',' F107A   ','  F107   ',
     $'   AP(3)',' IART   ',' GMLAT   ','   GMLONG   ',
     $'   SZAD    ')
C
      WRITE(16,9995)IYD,UTG,SEC,GLAT,GLONG,STL,F107A,F107,AP(3)
     $,IART,GMLAT,GMLONG,SZAD
 9995 FORMAT(1X,I7,8(1X,F8.2),2X,I2,4X,F7.2,4X,F7.2,5X,F7.2)
C
C
       IF (GMLAT .GE. 75.0)CALL PRECIP(IDMX,ALTMIN,PHOTOTP)
C
C       DO 109 J=291,391
C       PHOTOTP(J)=PHOTOTP(290)
       DO 109 J=14,391
       PHOTOTP(J)=PHOTOTP(14)
C      IF (J .LE. 16)THEN 
C      WRITE(16,9999)PHOTOTP(J-1),PHOTOTP(14)
C 9999 FORMAT(10X,'PHOTOTP(J-1) VALUE/PHOTOTP(J) VALUE',2(1PE15.4))
C      ENDIF
  109  CONTINUE
C   NOW ADD EUV AND PARTICLE IONIZATIONS!!!!!!1
      DO 105 I = 1,391
      PHOTOTT(I) = PHOTOTF(I) + PHOTOTP(I)
      IF (I .LE. 20) THEN
C      WRITE(16,9993)PHOTOTF(I),PHOTOTP(I),PHOTOTT(I),
C     $(ZZ(I))
C 9993 FORMAT('EUVF PRECF TOTF ALT ',4(1X,1PE12.4))
      ENDIF
C NOW RENAME TO MATCH MAIN PROGRAM
      PHOTOTF(I) = PHOTOTT(I)      
C
  105 CONTINUE    
      RETURN
      END
C
C    Subroutine SSFLUX scales the solar flux according to the 10.7 cm flux
C F107 and the 81-day centered average 10.7 cm flux F107A.  The longwave
C boundary WAVE1 and shortwave boundary WAVE2 of the wavelenth bins are
C returned (Angstroms), and the solar flux in photons cm-2 s-1 returned
C in SFLUX.
C   If ISCALE=0 the flux is scaled using parameterization methods based on
C F107 and F107A.  For ionizing EUV, Hinteregger's contrast ratio method
C is used, based on the Torr and Torr (JGR 90, 6675, 1985) bin structure
C for reference spectrum SC#21REFW.  The 1026A (H LyB) and 335A (FeXVI)
C enhancement ratios are calculated from Hinteregger's formula, using the
C coefficients which reduce to the reference values at F107=71.5,
C F107A=75.4.  The 'best fit' coefficients are not used as they produce some
C negative values at low solar activity, but remain in a 'commented out'
C data statement for reference.  The rest of the spectrum is then calculated
C from these key emissions using Hinteregger's method.  Scaling factors
C were calculated by the author from contrast ratios in the original
C spectrum data file.  For FUV in the 1050A-1350A region, 50A interval
C averaging was done by the author from SC#21REFW, and scaling factors
C also calculated.  This is a mere place holder since 50A bins are not
C adequate for actual band calculations in this region.  For Lyman alpha,
C which is treated seperately as an individual line, Rottman's
C paraterization cited by Bossy (PSS 31, 977, 1983) is used.  For the
C SR continuum, the Torr et al. (JGR 80, 6063, 1980) parameterization
C is used with the coefficients adjusted to reflect the measurements of Rottman
C (JGR 86, 6697, 1981), Mount et al. (JGR 85, 4271, 1980), and Mount and
C Rottman (JGR 86, 9193, 1981; JGR 88, 5403, 1983; JGR 90, 13031, 1985).
C (N.b. - the evidence from SME indicates that the change with solar activity
C of the SR continuum flux is much smaller than what is used here - personal
C communication from Gary Rottman.) 
C   If ISCALE=1 linear interpolation between high and low activity spectra
C is used, based on F107 alone, and assuming that the low activity spectrum
C corresponds to F107=68 and the high activitiy spectrum to F107=243.
C The Hinteregger SC#21REFW and F79050 spectra as binned by Torr and Torr
C are used for ionizing EUV.  For the 1050A-1350A region, the SC#21REFW
C spectrum  averaged into 50A intervals is used for low solar activity;
C the high activity spectrum was obtained by scaling this spectrum
C using the contrast ratios.  For Lyman alpha and the SR continuum,
C linear interpolation amounts to the same thing as the aformentioned
C parameterization.
C    In either case, the EUV fluxes between 250A and 50A are normalized
C upwards (Richards and Torr, 1984).  The normalization coefficient is 2
C at F107=68 and reduces linearly to 1 at F107=243.
C    X-ray fluxes shortwards of 50A are included, 10/88.  The Hinteregger
C fluxes were used to 18A; shortwards of there approximations taken from 495
C notes are employed on a temporary basis.
C
C Definitions:
C ISCALE   =0 for contrast ratio method, =1 for linear interpolation
C F107     daily 10.7 cm flux
C F107A    81-day centered average 10.7 cm flux
C WAVE1    longwave bound of spectral intervals
C WAVE2    shortwave bound of spectral intervals (= WAVE1 for indiv. lines)
C SFLUX    scaled solar flux returned by subroutine
C LMAX     dimension of WAVE1, WAVE2, and SFLUX arrays, must be <= LM
C WAVEL    = WAVE1
C WAVES    = WAVE2
C RFLUX    low solar activity reference flux
C XFLUX    high solar activity flux
C SCALE1   scaling factors for H LyB-keyed chromospheric emissions
C SCALE2   scaling factors for FeXVI-keyed coronal emissions
C LM       dimension of above arrays, currently = 59
C SRA      'A' value for S-R continuum scaling formula
C SRB      'B' value for S-R continuum scaling formula
C B1       fit coefficients for H LyB
C B2       fit coefficients for FeXVI
C R1       enhancement ratio for H LyB
C R2       enhancement ratio for FeXVI
C SFNORM   normalization factor for scaling flux shortwards of 250A
C
C
      SUBROUTINE SSFLUX(ISCALE, F107, F107A, WAVE1, WAVE2, SFLUX, LMAX)
C
      PARAMETER (LM=59)
C
      DIMENSION WAVE1(LMAX), WAVE2(LMAX), SFLUX(LMAX),
     >          WAVEL(LM), WAVES(LM), RFLUX(LM), XFLUX(LM),
     >          SCALE1(LM), SCALE2(LM), SRA(8), SRB(8), B1(3), B2(3)
C
C new B's:
      DATA B1/1.0, 0.0138, 0.005/, B2/1.0, 0.59425, 0.3811/
C
C old B's, commented out:
C     DATA B1/1.31, 0.01106, 0.00492/, B2/-6.618, 0.66159, 0.38319/
C
      DATA WAVEL/ 1750.00, 1700.00, 1650.00, 1600.00, 1550.00, 1500.00,
     >            1450.00, 1400.00, 1350.00, 1300.00, 1250.00, 1215.67,
     >            1200.00, 1150.00, 1100.00, 1050.00, 1031.91, 1025.72,
     >            1000.00,  977.02,  950.00,  900.00,  850.00,  800.00,
     >             789.36,  770.41,  765.15,  750.00,  703.31,  700.00,
     >             650.00,  629.73,  609.76,  600.00,  584.33,  554.37,
     >             550.00,  500.00,  465.22,  450.00,  400.00,  368.07,
     >             350.00,  303.78,  303.31,  300.00,  284.15,  256.30,
     >             250.00,  200.00,  150.00,  100.00,   50.00,   32.00,
     >              23.00,   16.00,    8.00,    4.00,    2.00/
      DATA WAVES/ 1700.00, 1650.00, 1600.00, 1550.00, 1500.00, 1450.00,
     >            1400.00, 1350.00, 1300.00, 1250.00, 1200.00, 1215.67,
     >            1150.00, 1100.00, 1050.00, 1000.00, 1031.91, 1025.72,
     >             950.00,  977.02,  900.00,  850.00,  800.00,  750.00,
     >             789.36,  770.41,  765.15,  700.00,  703.31,  650.00,
     >             600.00,  629.73,  609.76,  550.00,  584.33,  554.37,
     >             500.00,  450.00,  465.22,  400.00,  350.00,  368.07,
     >             300.00,  303.78,  303.31,  250.00,  284.15,  256.30,
     >             200.00,  150.00,  100.00,   50.00,   32.00,   23.00,
     >              16.00,    8.00,    4.00,    2.00,    1.00/
      DATA RFLUX/  370.45,  203.69,   96.00,   69.71,   50.70,   26.67,
     >              17.21,    8.26,   12.86,    4.10,    5.20,  333.80,
     >               2.78,    0.70,    3.07,    3.64,    3.18,    4.38,
     >               1.78,    5.96,    4.22,    4.43,    1.93,    0.87,
     >               0.79,    0.24,    0.20,    0.17,    0.39,    0.22,
     >               0.17,    1.50,    0.45,    0.48,    1.58,    0.80,
     >               0.51,    0.31,    0.18,    0.39,    0.21,    0.74,
     >               0.87,    6.00,    0.24,    0.84,    0.10,    0.27,
     >               0.92,    1.84,    0.13,    0.38,  0.0215,  0.0067,
     >             0.0009,  0.0003,   1.E-6,   3.E-9,   1.E-11/
      DATA XFLUX/  464.20,  241.50,  131.50,  101.90,   81.32,   48.71,
     >              37.16,   21.14,   30.70,   11.20,   12.00,  438.80,
     >               6.50,    1.60,    6.40,    8.66,    9.04,   13.12,
     >               4.42,   13.18,   12.03,   13.29,    5.01,    2.18,
     >               1.59,    0.67,    0.43,    0.43,    0.72,    0.46,
     >               0.48,    3.02,    1.46,    1.02,    4.86,    1.59,
     >               1.57,    1.67,    0.36,    0.99,    2.20,    1.39,
     >               5.63,   11.28,    2.50,    4.14,    3.16,    0.59,
     >               3.70,    4.85,    0.34,    1.15,    0.18,    0.08,
     >              0.025,    0.03,   1.E-3,   3.E-5,   1.E-6/
      DATA SCALE1/35347.5, 33095.6, 18040.6, 13733.0, 12564.2, 7121.38,
     >            6608.74, 5779.89, 8009.80, 3186.34, 3033.78,  47555.,
     >            1692.09,  405.95, 1516.20, 2731.70, 3314.57, 4375.00,
     >            1316.91, 3621.91, 3908.56, 4432.54, 1541.21,  531.73,
     >             364.83,    0.00,  116.00,  129.41,  162.48,   94.07,
     >              41.29,  709.50,    0.00,  268.47, 1561.05,  367.64,
     >             290.06,  184.36,    0.00,   86.15,    7.50,    0.00,
     >               0.00, 2220.00,    0.00,   61.00,    0.00,   86.95,
     >             206.00,  135.89,   60.35,  157.12,    7.06,    0.75,
     >               0.00,    0.00,    0.00,    0.00,    0.00/
      DATA SCALE2/   0.00,    0.00,    0.00,    0.00,    0.00,    0.00,
     >               0.00,    0.00,    0.00,    0.00,    0.00,    0.00,
     >               0.00,    0.00,    0.00,    0.00,    0.00,    0.00,
     >               0.00,    0.00,    0.00,    0.00,    0.00,    0.00,
     >               0.00,    5.34,    0.00,    0.00,    0.00,    0.54,
     >               3.30,    0.00,   12.60,    0.00,    0.00,    0.00,
     >               5.34,   11.63,    2.28,    5.56,   24.93,    8.16,
     >              60.69,    0.00,   28.20,   45.90,   40.80,    1.27,
     >              35.47,   42.80,    1.12,    6.19,    1.26,    0.69,
     >               0.23,    0.30,    0.01,   3.E-4,   1.E-5/
      DATA SRA/     0.536,   0.216,   0.203,   0.184,   0.175,   0.126,
     >              0.114,   0.073/
      DATA SRB/     334.0,   189.0,    82.2,    57.2,    38.8,    18.1,
     >               9.46,    3.30/
C
C
      IF (ISCALE .EQ. 0) THEN
        R1 =  B1(1) + B1(2)*(F107-71.5) + B1(3)*(F107-F107A+3.9)
        R2 =  B2(1) + B2(2)*(F107-71.5) + B2(3)*(F107-F107A+3.9)
        DO 100 L=1,LMAX
        IF (L .LT. 9) THEN
          SFLUX(L) = SRA(L) * F107 + SRB(L)
        ELSE
          IF (L .EQ. 12) THEN
            SFLUX(L) = 332. + 0.6 * (F107-65.)
          ELSE
            SFLUX(L) = (RFLUX(L) + ((R1-1.)*SCALE1(L)
     >                            + (R2-1.)*SCALE2(L)) / 1000.)
            IF (SFLUX(L) .LT. 0.01) SFLUX(L) = 0.01
          ENDIF
        ENDIF
  100   CONTINUE
      ELSE
        FRAT = (F107-68.) / (243.-68.)
        DO 200 L=1,LMAX
        SFLUX(L) = RFLUX(L) + (XFLUX(L)-RFLUX(L)) * FRAT
  200   CONTINUE
      ENDIF
C
      SFNORM = 2. - (F107-68.) / (243.-68.)
      IF (SFNORM .LT. 1.0) SFNORM = 1.0
C
      DO 300 L=1,LMAX
      WAVE1(L) = WAVEL(L)
      WAVE2(L) = WAVES(L)
      IF (WAVE1(L) .LT. 251. .AND. WAVE2(L) .GT. 0.1)
     >   SFLUX(L) = SFLUX(L) * SFNORM
      SFLUX(L) = SFLUX(L) * 1.E9
  300 CONTINUE
      RETURN
      END
C
C
C
C
      SUBROUTINE FIELDM(DLAT,DLONG,ALT,X,Y,Z,F,DIP,DEC,SMODIP)
C
C This subroutine was excerpted from the IRI package, S C Solomon, 6/88.
C It's original name was FIELDG which was changed to avoid any naming
C conflict when used at the same time as IRI.  Labeled common /CONST/
C which contained only the degree/radian conversion factor UMR was
C changed to a data statement.
C
C THIS IS A SPECIAL VERSION OF THE POGO 68/10 MAGNETIC FIELD
C LEGENDRE MODEL. TRANSFORMATION COEFF. G(144) VALID FOR 1973.
C INPUT: DLAT, DLONG=GEOGRAPHIC COORDINATES/DEG.(-90/90,0/360),
C        ALT=ALTITUDE/KM.
C OUTPUT: F TOTAL FIELD (GAUSS), Z DOWNWARD VERTICAL COMPONENT
C        X,Y COMPONENTS IN THE EQUATORIAL PLANE (X TO ZERO LONGITUDE).
C        DIP INCLINATION ANGLE(DEGREE). SMODIP RAWER'S MODFIED DIP.
C SHEIK,1977.
      DIMENSION H(144),XI(3),G(144),FEL1(72),FEL2(72)
      DATA UMR/.0174532952/
      DATA FEL1/0.0, 0.1506723,0.0101742, -0.0286519, 0.0092606,
     & -0.0130846, 0.0089594, -0.0136808,-0.0001508, -0.0093977,
     & 0.0130650, 0.0020520, -0.0121956, -0.0023451, -0.0208555,
     & 0.0068416,-0.0142659, -0.0093322, -0.0021364, -0.0078910,
     & 0.0045586,  0.0128904, -0.0002951, -0.0237245,0.0289493,
     & 0.0074605, -0.0105741, -0.0005116, -0.0105732, -0.0058542,
     &0.0033268, 0.0078164,0.0211234, 0.0099309, 0.0362792,
     &-0.0201070,-0.0046350,-0.0058722,0.0011147,-0.0013949,
     & -0.0108838,  0.0322263, -0.0147390,  0.0031247, 0.0111986,
     & -0.0109394,0.0058112,  0.2739046, -0.0155682, -0.0253272,
     &  0.0163782, 0.0205730,  0.0022081, 0.0112749,-0.0098427,
     & 0.0072705, 0.0195189, -0.0081132, -0.0071889, -0.0579970,
     & -0.0856642, 0.1884260,-0.7391512, 0.1210288, -0.0241888,
     & -0.0052464, -0.0096312, -0.0044834, 0.0201764,  0.0258343,
     &0.0083033,  0.0077187/
      DATA FEL2/0.0586055,0.0102236,-0.0396107,
     & -0.0167860, -0.2019911, -0.5810815,0.0379916,  3.7508268,
     & 1.8133030, -0.0564250, -0.0557352, 0.1335347, -0.0142641,
     & -0.1024618,0.0970994, -0.0751830,-0.1274948, 0.0402073,
     &  0.0386290, 0.1883088,  0.1838960, -0.7848989,0.7591817,
     & -0.9302389,-0.8560960, 0.6633250, -4.6363869, -13.2599277,
     & 0.1002136,  0.0855714,-0.0991981, -0.0765378,-0.0455264,
     &  0.1169326, -0.2604067, 0.1800076, -0.2223685, -0.6347679,
     &0.5334222, -0.3459502,-0.1573697,  0.8589464, 1.7815990,
     &-6.3347645, -3.1513653, -9.9927750,13.3327637, -35.4897308,
     &37.3466339, -0.5257398,  0.0571474, -0.5421217,  0.2404770,
     & -0.1747774,-0.3433644, 0.4829708,0.3935944, 0.4885033,
     &  0.8488121, -0.7640999, -1.8884945, 3.2930784,-7.3497229,
     & 0.1672821,-0.2306652, 10.5782146, 12.6031065, 8.6579742,
     & 215.5209961, -27.1419220,22.3405762,1108.6394043/
      K=0
      DO 10 I=1,72
      K=K+1
      G(K)=FEL1(I)
 10   G(72+K)=FEL2(I)
      RLAT=DLAT*UMR
      CT=SIN(RLAT)
      ST=COS(RLAT)
      NMAX=11
      D=SQRT(40680925.0-272336.0*CT*CT)
      RLONG=DLONG*UMR
      CP=COS(RLONG)
      SP=SIN(RLONG)
      ZZZ=(ALT+40408589.0/D)*CT/6371.2
      RHO=(ALT+40680925.0/D)*ST/6371.2
      XXX=RHO*CP
      YYY=RHO*SP
      RQ=1.0/(XXX*XXX+YYY*YYY+ZZZ*ZZZ)
      XI(1)=XXX*RQ
      XI(2)=YYY*RQ
      XI(3)=ZZZ*RQ
      IHMAX=NMAX*NMAX+1
      LAST=IHMAX+NMAX+NMAX
      IMAX=NMAX+NMAX-1
      DO 100 I=IHMAX,LAST
 100  H(I)=G(I)
      DO 200 K=1,3,2
      I=IMAX
      IH=IHMAX
 300  IL=IH-I
      F1=2./(I-K+2.)
      X1=XI(1)*F1
      Y1=XI(2)*F1
      Z1=XI(3)*(F1+F1)
      I=I-2
      IF((I-1).LT.0) GOTO 400
      IF((I-1).EQ.0) GOTO 500
      DO 600 M=3,I,2
      H(IL+M+1)=G(IL+M+1)+Z1*H(IH+M+1)+X1*(H(IH+M+3)-H(IH+M-1))-
     &Y1*(H(IH+M+2)+H(IH+M-2))
      H(IL+M)=G(IL+M)+Z1*H(IH+M)+X1*(H(IH+M+2)-H(IH+M-2))+
     &Y1*(H(IH+M+3)+H(IH+M-1))
 600  CONTINUE
 500  H(IL+2)=G(IL+2)+Z1*H(IH+2)+X1*H(IH+4)-Y1*(H(IH+3)+H(IH))
      H(IL+1)=G(IL+1)+Z1*H(IH+1)+Y1*H(IH+4)+X1*(H(IH+3)-H(IH))
 400  H(IL)=G(IL)+Z1*H(IH)+2.0*(X1*H(IH+1)+Y1*H(IH+2))
 700  IH=IL
      IF(I.GE.K) GOTO 300
 200  CONTINUE
      S=0.5*H(1)+2.0*(H(2)*XI(3)+H(3)*XI(1)+H(4)*XI(2))
      XT=(RQ+RQ)*SQRT(RQ)
      X=XT*(H(3)-S*XXX)
      Y=XT*(H(4)-S*YYY)
      Z=XT*(H(2)-S*ZZZ)
      F=SQRT(X*X+Y*Y+Z*Z)
      BRH0=Y*SP+X*CP
      Y=Y*CP-X*SP
      X=Z*ST-BRH0*CT
      Z=-Z*CT-BRH0*ST
      DIP=ASIN(Z/F)
      DEC=ASIN(Y/SQRT(X*X+Y*Y))
      SMODIP=ASIN(DIP/SQRT(DIP*DIP+ST))
      DIP=DIP/UMR
      DEC=DEC/UMR
      SMODIP=SMODIP/UMR
      RETURN
      END
C
C
C
C
      SUBROUTINE SOLZEN (IDATE, UTG, GLAT, GLONG, SZA)
C
C Returns Solar Zenith Angle SZA in degrees for specified date in form yyddd,
C universal time in seconds, geographic latitude and longitude in degrees.
C
C S.C. Solomon, 9/88
C
      DATA PI/3.1415926536/
C
      RLAT = GLAT * PI/180.
      RLONG = GLONG * PI/180.
      CALL SUNCOR (IDATE, UTG, SDEC, SRASN, GST)
      RH = SRASN - (GST+RLONG)
      COSSZA = SIN(SDEC)*SIN(RLAT) + COS(SDEC)*COS(RLAT)*COS(RH)
CALEX sza=solar zenith angle      
      SZA = ACOS(COSSZA) * 180./PI
      RETURN
      END
C
C
C
C
C Subroutine SUNCOR returns the declination SDEC and right ascension SRASN
C of the sun in GEI coordinates, radians, for a given date IDATE in yyddd
C format and universal time UTG in seconds.  Greenwich Sidereal Time GST
C in radians is also returned.  Reference:  C.T. Russell, Geophysical
C Coordinate Transforms
C
      SUBROUTINE SUNCOR (IDATE, UTG, SDEC, SRASN, GST)
      DATA PI/3.1415926536/
C
      FDAY=UTG/86400.
      IYR=IDATE/1000
      IDAY=IDATE-IYR*1000
      DJ=365*IYR+(IYR-1)/4+IDAY+FDAY-0.5
      T=DJ/36525.
      VL=AMOD(279.696678+.9856473354*DJ,360.)
      GST=AMOD(279.696678+.9856473354*DJ+360.*FDAY+180.,360.) * PI/180.
      G=AMOD(358.475845+.985600267*DJ,360.) * PI/180.
      SLONG=VL+(1.91946-.004789*T)*SIN(G)+.020094*SIN(2.*G)
      OBLIQ=(23.45229-0.0130125*T) *PI/180.
      SLP=(SLONG-.005686) * PI/180.
      SIND=SIN(OBLIQ)*SIN(SLP)
      COSD=SQRT(1.-SIND**2)
      SDEC=ATAN(SIND/COSD)
      SRASN=3.14159-ATAN2(1./TAN(OBLIQ)*SIND/COSD,-COS(SLP)/COSD)
      RETURN
      END
C
C Subroutine RCOLUM Calculates the column density ZCOL for each species
C ZMAJ above height ZZ at solar zenith angle CHI.  Uses Chapman function
C fit to account for spherical geometry.  If CHI is less than 90 degrees,
C column densities are calculated directly; if CHI is greater than
C 90 degrees the column density at grazing height for 90 degrees is calculated
C and doubled and the column density above ZZ(J) is subtracted; if CHI is
C such that the grazing height is less than the radius of the earth the column
C densities are set to 'infinity', i.e., 1.0E30.  Densities supplied in
C array ZMAJ are used in the calculation except where grazing height is
C below the lowest level specified, in this case values are interpolated
C logarithmically from the US standard atmosphere at sea level, the tropopause,
C the stratopause, and the mesopause.
C
C
      SUBROUTINE RCOLUM (CHI, ZZ, ZMAJ, TN, ZCOL, ZVCD, JMAX, NMAJ)
C
      PARAMETER (NM=3)
      PARAMETER (NU=4)
C
      DIMENSION ZZ(JMAX),ZMAJ(NMAJ,JMAX),TN(JMAX),ZCOL(NMAJ,JMAX),
     >      ZVCD(NMAJ,JMAX), ZCG(NM), ZUS(NU), TNUS(NU), ZCUS(NM,NU)
C
      DATA PI/3.1415926535/, RE/6.37E8/
      DATA ZUS/0., 1.5E6, 5.E6, 9.E6/, TNUS/288., 217., 271., 187./
      DATA ZCUS/8.00E17, 4.54E24, 1.69E25,
     >          8.00E17, 5.46E23, 2.03E24,
     >          8.00E17, 3.63E21, 1.35E22,
     >          7.80E17, 8.48E18, 3.16E19/
C
      CALL VCD (ZZ, ZMAJ, ZVCD, JMAX, NMAJ)
C
      IF (CHI .GE. 2.) THEN 
        DO 40 I=1,NMAJ
        DO 40 J=1,JMAX
        ZCOL(I,J) = 1.0E30
   40   CONTINUE
        RETURN
      ENDIF
C
      IF (CHI .LE. PI/2.) THEN
        DO 60 I=1,NMAJ
        DO 60 J=1,JMAX
        ZCOL(I,J) = ZVCD(I,J) * CHAP(CHI,ZZ(J),TN(J),I)
   60   CONTINUE
      ELSE
        DO 220 J=1,JMAX
        GHRG=(RE+ZZ(J))*SIN(CHI) 
        GHZ=GHRG-RE 
        IF (GHZ .LE. 0.) THEN
          DO 80 I=1,NMAJ
          ZCOL(I,J) = 1.0E30
   80     CONTINUE
          GOTO 220
        ENDIF
C         PRINT*,GHZ,ZZ(1)
        IF (GHZ .GE. ZZ(1)) THEN
          DO 100 JG=1,J-1
            IF (ZZ(JG) .LE. GHZ .AND. ZZ(JG+1) .GT. GHZ) GOTO 120
  100     CONTINUE
C          IF (JG .GE. J) JG = J-1
  120     TNG = TN(JG)+(TN(JG+1)-TN(JG))*(GHZ-ZZ(JG))/(ZZ(JG+1)-ZZ(JG))
          DO 140 I=1,NMAJ
          ZCG(I) = ZVCD(I,JG) * (ZVCD(I,JG+1) / ZVCD(I,JG)) **
     >                      ((GHZ-ZZ(JG)) / (ZZ(JG+1)-ZZ(JG)))
  140     CONTINUE
        ELSE
          DO 160 JG=1,3
          IF (ZUS(JG) .LT. GHZ .AND. ZUS(JG+1) .GT. GHZ) GOTO 180
  160     CONTINUE
C          IF (JG .GE. 4) JG = 3
  180     TNG = TNUS(JG)
     >        + (TNUS(JG+1)-TNUS(JG))*(GHZ-ZUS(JG))/(ZUS(JG+1)-ZUS(JG))
C          PRINT*,JG,GHZ,ZUS(JG),ZUS(JG+1)
          DO 200 I=1,NMAJ
          ZCG(I) = ZCUS(I,JG) * (ZCUS(I,JG+1) / ZCUS(I,JG)) **
     >                      ((GHZ-ZUS(JG)) / (ZUS(JG+1)-ZUS(JG)))
  200     CONTINUE
        ENDIF
        DO 210 I=1,NMAJ
        ZCOL(I,J) = 2. * ZCG(I) * CHAP(PI/2.,GHZ,TNG,I)
     >              - ZVCD(I,J) * CHAP(CHI,ZZ(J),TN(J),I)
  210   CONTINUE
  220   CONTINUE
      ENDIF
C
      RETURN 
      END 
 
C
C
C
C
      FUNCTION CHAP (CHI, Z, T, I)
      DIMENSION AM(3)
      DATA AM/16., 32., 28./, PI/3.1415926535/, RE/6.37E8/, G/978.1/
      GR=G*(RE/(RE+Z))**2 
      HN=1.38E-16*T/(AM(I)*1.662E-24*GR)
      HG=(RE+Z)/HN 
      HF=0.5*HG*(COS(CHI)**2) 
      SQHF=SQRT(HF) 
      CHAP=SQRT(0.5*PI*HG)*SPERFC(SQHF) 
      RETURN
      END
C
      FUNCTION SPERFC(DUMMY) 
      IF (DUMMY .LE. 8.) THEN
        SPERFC = (1.0606963+0.55643831*DUMMY) /
     >           (1.0619896+1.7245609*DUMMY+DUMMY*DUMMY)
      ELSE
        SPERFC=0.56498823/(0.06651874+DUMMY) 
      ENDIF 
      RETURN 
      END 
C
C
C
C
      SUBROUTINE VCD(ZZ,ZMAJ,ZVCD,JMAX,NMAJ)
      DIMENSION ZZ(JMAX), ZMAJ(NMAJ,JMAX), ZVCD(NMAJ,JMAX)
C
      DO 200 I=1,NMAJ
      ZVCD(I,JMAX) =   ZMAJ(I,JMAX)
     >               * (ZZ(JMAX)-ZZ(JMAX-1))
     >               / ALOG(ZMAJ(I,JMAX-1)/ZMAJ(I,JMAX))
      DO 200 J=JMAX-1,1,-1
      RAT = ZMAJ(I,J+1) / ZMAJ(I,J)
      ZVCD(I,J) =   ZVCD(I,J+1)
     >            + ZMAJ(I,J) * (ZZ(J)-ZZ(J+1)) / ALOG(RAT) * (1.-RAT)
C       PRINT*,RAT,ZMAJ(I,J+1),ZVCD(I,J)
 
  200 CONTINUE
      RETURN
      END
C
C
C
C
C Subroutine EPHOTO calculates the photoelectron production spectrum
C
C Adapted from Banks & Nagy 2-stream input code by Stan Solomon, 6/88
C
C Uses continuously variable energy grid
C 3 species:  O, O2, N2
C
C Supplied by calling routine:
C WAVE1   wavelength array, upper bound, Angstroms
C WAVE2   wavelength array, lower bound, Angstroms
C SFLUX   solar flux array, photons cm-2 sec-1
C ZZ      altitude array, cm above earth
C ZMAJ    density array for species O, O2, N2, altitude, cm-3
C ZNO     density of NO at each altitude, cm-3
C ZCOL    slant column density array for species O, O2, N2, altitude, cm-2
C ENER    energy grid for photoelectrons, eV
C DEL     array of energy grid increments, eV
C
C Calculated by subroutine:
C PESPEC  photoelectron production spectrum for each altitude, cm-3 s-1
C PHOTOI  photoionization rates for each state, species, altitude, cm-3 s-1
C PHOTOD  photodissociation/exc. rates for state, species, alt., cm-3 s-1
C PHONO   photoionization/dissociation/excitation rates for NO, cm-3 s-1
C
C Other definitions:
C SPECT   photoelectron production spectrum at current z, cm-3 s-1
C FLUX    solar flux at altitude
C TPOT    ionization potentials for each species, state, eV
C SIGABS  photoabsorption cross sections, O, O2, N2; cm2
C SIGION  photoionization cross sections, O, O2, N2; cm2
C SIGAO, SIGAO2, SIGAN2, SIGIO, SIGIO2, SIGIN2; cross section data arrays
C NNN     number of states for each species
C PROB    branching ratios for each state, species, and wavelength interval
C PROBO, PROBO2, PROBN2; branching ratio data arrays
C EPSIL1  energy loss for each state, species, wavelength, lower bound; eV
C EPSIL2  energy loss for each state, species, wavelength, upper bound; eV
C SIGNO   NO photoionization xsect at Ly-alpha
C
C Array dimensions:
C JMAX    number of altitude levels for GLOW's internal calculations
C NBINS   number of energetic electron energy bins
C LMAX    number of wavelength intervals for solar flux
C NMAJ    number of major species
C NEX     number of ionized/excited species
C NW      number of airglow emission wavelengths
C NC      number of component production terms for each emission
C NST     number of states produced by photoionization/dissociation
C NEI     number of states produced by electron impact
C NF      number of available types of auroral fluxes
C
C
      SUBROUTINE EPHOTO
C
      include 'common_variables.f'

      DIMENSION SPECT(NBINS), FLUX(LMAX),
     >          SIGION(NMAJ,LMAX), SIGABS(NMAJ,LMAX),
     >          TPOT(NST,NMAJ), PROB(NST,NMAJ,LMAX),
     >          EPSIL1(NST,NMAJ,LMAX), EPSIL2(NST,NMAJ,LMAX),
     >          SIGAO(LMAX), SIGAO2(LMAX), SIGAN2(LMAX),
     >          SIGIO(LMAX), SIGIO2(LMAX), SIGIN2(LMAX),
     >          PROBO(NST,LMAX), PROBO2(NST,LMAX), PROBN2(NST,LMAX),
     >          PHOTOTE(NMAJ,JMAX),PHOTOTR(JMAX),TAU1(JMAX),
     >          RAT(JMAX), PHOTOT(JMAX)

      DATA (RAT(L),L=1,JMAX)/JMAX*0./

C      SAVE IFIRST
      DATA SIGNO/2.0 E-18/, IFIRST/1/

CCC   NNN/5,4,6/
C
      DATA TPOT/13.60, 16.90, 18.60, 28.50, 40.00,  0.00,
     >          12.10, 16.10, 18.20, 20.00,  0.00,  0.00,
     >          15.60, 16.70, 18.80, 30.00, 34.80, 25.00/
C NB - absorption and ionization cross sections are multiplied by 1.E-18
C on first call.
      DATA SIGAO /  18 * 0.00,
     >             0.00, 0.00, 2.12, 4.18, 4.38, 4.23,
     >             4.28, 4.18, 4.18, 8.00,11.35,10.04,
     >            12.21,12.22,12.23,11.90,12.17,12.13,
     >            11.91,11.64,11.25,11.21, 9.64, 9.95,
     >             8.67, 7.70, 7.68, 6.61, 7.13, 6.05,
     >             5.30, 2.90, 1.60, 0.59, 0.16, 0.05,
     >             0.51, 0.07, .012, .002, .0002/
C
      DATA SIGAO2/ 0.50, 1.50, 3.40, 6.00,10.00,13.00,
     >            15.00,12.00, 2.20, 0.30, 3.00, 0.01,
     >             0.30, 0.10, 1.00, 1.10, 1.00, 1.60,
     >            16.53, 4.00,15.54, 9.85,20.87,27.09,
     >            26.66,25.18,21.96,29.05,25.00,26.27,
     >            26.02,25.80,26.10,25.04,22.00,25.59,
     >            24.06,21.59,20.40,19.39,18.17,18.40,
     >            17.19,16.80,16.80,15.10,15.70,13.20,
     >            10.60, 7.10, 4.00, 1.18, 0.32, 0.10,
     >             1.02, 0.14, .024, .004, .0004/
C
      DATA SIGAN2/  18 * 0.00,
     >            36.16, 0.70,16.99,46.63,15.05,30.71,
     >            19.26,26.88,35.46,30.94,26.30,29.75,
     >            23.22,23.20,23.10,22.38,23.20,24.69,
     >            24.53,21.85,21.80,21.07,17.51,18.00,
     >            13.00,11.60,11.60,10.30,10.60, 9.70,
     >             8.00, 4.40, 1.90, 0.60, 0.24, 1.16,
     >             0.48, 0.09, .015, .003, .0003/
C
      DATA SIGIO /  18 * 0.00,
     >             0.00, 0.00, 2.12, 4.18, 4.38, 4.23,
     >             4.28, 4.18, 4.18, 8.00,11.35,10.04,
     >            12.21,12.22,12.23,11.90,12.17,12.13,
     >            11.91,11.64,11.25,11.21, 9.64, 9.95,
     >             8.67, 7.70, 7.68, 6.61, 7.13, 6.05,
     >             5.30, 2.90, 1.60, 0.59, 0.16, 0.05,
     >             0.51, 0.07, .012, .002, .0002/
C
      DATA SIGIO2/ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             0.00, 0.00, 0.00, 0.27, 0.00, 1.00,
     >            12.22, 2.50, 9.34, 4.69, 6.12, 9.39,
     >            11.05, 9.69, 8.59,23.81,23.00,22.05,
     >            25.94,25.80,26.10,25.04,22.00,25.59,
     >            24.06,21.59,20.40,19.39,18.17,18.40,
     >            17.19,16.80,16.80,15.10,15.70,13.20,
     >            10.60, 7.10, 4.00, 1.18, 0.32, 0.10,
     >             1.02, 0.14, .024, .004, .0004/
C
      DATA SIGIN2/  18 * 0.00,
     >             0.00, 0.00, 0.00, 0.00, 0.00,16.75,
     >            10.18,18.39,23.77,23.20,23.00,25.06,
     >            23.22,23.20,23.10,22.38,23.20,24.69,
     >            24.53,21.85,21.80,21.07,17.51,18.00,
     >            13.00,11.60,11.60,10.30,10.60, 9.70,
     >             8.00, 4.40, 1.90, 0.60, 0.24, 1.16,
     >             0.48, 0.09, .015, .003, .0003/
C
      DATA ((PROBO(K,L),K=1,6),L=1,38)
     >           / 120 * 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             0.52, 0.48, 0.00, 0.00, 0.00, 0.00,
     >             0.43, 0.57, 0.00, 0.00, 0.00, 0.00,
     >             0.40, 0.55, 0.05, 0.00, 0.00, 0.00,
     >             0.30, 0.45, 0.25, 0.00, 0.00, 0.00,
     >             0.41, 0.45, 0.24, 0.00, 0.00, 0.00,
     >             0.30, 0.45, 0.25, 0.00, 0.00, 0.00,
     >             0.29, 0.45, 0.26, 0.00, 0.00, 0.00,
     >             0.29, 0.45, 0.25, 0.00, 0.00, 0.00,
     >             0.29, 0.45, 0.26, 0.00, 0.00, 0.00,
     >             0.28, 0.45, 0.26, 0.00, 0.00, 0.00,
     >             0.28, 0.45, 0.27, 0.00, 0.00, 0.00/
      DATA ((PROBO(K,L),K=1,6),L=39,52)
     >           / 0.28, 0.45, 0.27, 0.00, 0.00, 0.00,
     >             0.27, 0.42, 0.26, 0.05, 0.00, 0.00,
     >             0.26, 0.40, 0.25, 0.08, 0.00, 0.00,
     >             0.26, 0.40, 0.25, 0.08, 0.00, 0.00,
     >             0.26, 0.40, 0.25, 0.09, 0.00, 0.00,
     >             0.25, 0.37, 0.24, 0.09, 0.04, 0.00,
     >             0.25, 0.37, 0.24, 0.09, 0.04, 0.00,
     >             0.25, 0.36, 0.23, 0.10, 0.06, 0.00,
     >             0.25, 0.37, 0.23, 0.10, 0.05, 0.00,
     >             0.25, 0.36, 0.23, 0.10, 0.06, 0.00,
     >             0.30, 0.31, 0.20, 0.11, 0.07, 0.00,
     >             0.37, 0.26, 0.17, 0.13, 0.06, 0.00,
     >             0.29, 0.32, 0.21, 0.10, 0.08, 0.00,
     >             0.30, 0.32, 0.21, 0.09, 0.08, 0.00/
      DATA ((PROBO(K,L),K=1,6),L=53,59)
     >           / 0.30, 0.32, 0.21, 0.09, 0.08, 0.00,
     >             0.30, 0.32, 0.21, 0.09, 0.08, 0.00,
     >             0.30, 0.32, 0.21, 0.09, 0.08, 0.00,
     >             0.30, 0.32, 0.21, 0.09, 0.08, 0.00,
     >             0.30, 0.32, 0.21, 0.09, 0.08, 0.00,
     >             0.30, 0.32, 0.21, 0.09, 0.08, 0.00,
     >             0.30, 0.32, 0.21, 0.09, 0.08, 0.00/
C
      DATA ((PROBO2(K,L),K=1,6),L=1,33)
     >           /  90 * 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             0.96, 0.04, 0.00, 0.00, 0.00, 0.00,
     >             0.90, 0.10, 0.00, 0.00, 0.00, 0.00,
     >             0.56, 0.44, 0.00, 0.00, 0.00, 0.00,
     >             0.56, 0.40, 0.00, 0.00, 0.00, 0.00,
     >             0.40, 0.46, 0.14, 0.00, 0.00, 0.00,
     >             0.24, 0.36, 0.35, 0.05, 0.00, 0.00,
     >             0.24, 0.36, 0.35, 0.05, 0.00, 0.00,
     >             0.23, 0.38, 0.31, 0.07, 0.00, 0.00/
      DATA ((PROBO2(K,L),K=1,6),L=34,52)
     >           / 0.35, 0.28, 0.21, 0.16, 0.00, 0.00,
     >             0.30, 0.33, 0.21, 0.16, 0.00, 0.00,
     >             0.36, 0.24, 0.22, 0.18, 0.00, 0.00,
     >             0.36, 0.28, 0.13, 0.23, 0.00, 0.00,
     >             0.42, 0.25, 0.12, 0.21, 0.00, 0.00,
     >             0.42, 0.25, 0.12, 0.21, 0.00, 0.00,
     >             0.42, 0.24, 0.12, 0.22, 0.00, 0.00,
     >             0.40, 0.22, 0.12, 0.26, 0.00, 0.00,
     >             0.37, 0.21, 0.12, 0.30, 0.00, 0.00,
     >             0.36, 0.20, 0.12, 0.32, 0.00, 0.00,
     >             0.35, 0.19, 0.11, 0.35, 0.00, 0.00,
     >             0.35, 0.19, 0.11, 0.35, 0.00, 0.00,
     >             0.34, 0.18, 0.11, 0.37, 0.00, 0.00,
     >             0.34, 0.18, 0.11, 0.37, 0.00, 0.00,
     >             0.34, 0.18, 0.11, 0.37, 0.00, 0.00,
     >             0.33, 0.18, 0.10, 0.39, 0.00, 0.00,
     >             0.30, 0.16, 0.09, 0.45, 0.00, 0.00,
     >             0.20, 0.11, 0.07, 0.62, 0.00, 0.00,
     >             0.10, 0.06, 0.04, 0.80, 0.00, 0.00/
      DATA ((PROBO2(K,L),K=1,6),L=53,59)
     >           / 0.10, 0.06, 0.04, 0.80, 0.00, 0.00,
     >             0.10, 0.06, 0.04, 0.80, 0.00, 0.00,
     >             0.10, 0.06, 0.04, 0.80, 0.00, 0.00,
     >             0.10, 0.06, 0.04, 0.80, 0.00, 0.00,
     >             0.10, 0.06, 0.04, 0.80, 0.00, 0.00,
     >             0.10, 0.06, 0.04, 0.80, 0.00, 0.00,
     >             0.10, 0.06, 0.04, 0.80, 0.00, 0.00/
C
      DATA ((PROBN2(K,L),K=1,6),L=1,38)
     >           / 120 * 0.00,
     >             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
     >             0.53, 0.47, 0.00, 0.00, 0.00, 0.00,
     >             0.64, 0.36, 0.00, 0.00, 0.00, 0.00,
     >             0.34, 0.66, 0.00, 0.00, 0.00, 0.00,
     >             0.31, 0.59, 0.10, 0.00, 0.00, 0.00,
     >             0.31, 0.59, 0.10, 0.00, 0.00, 0.00,
     >             0.31, 0.59, 0.10, 0.00, 0.00, 0.00,
     >             0.33, 0.57, 0.10, 0.00, 0.00, 0.00,
     >             0.32, 0.58, 0.10, 0.00, 0.00, 0.00,
     >             0.35, 0.55, 0.10, 0.00, 0.00, 0.00,
     >             0.38, 0.53, 0.09, 0.00, 0.00, 0.00,
     >             0.40, 0.47, 0.09, 0.00, 0.00, 0.04/
      DATA ((PROBN2(K,L),K=1,6),L=39,52)
     >           / 0.42, 0.46, 0.08, 0.00, 0.00, 0.04,
     >             0.44, 0.44, 0.08, 0.00, 0.00, 0.04,
     >             0.35, 0.46, 0.10, 0.03, 0.00, 0.06,
     >             0.33, 0.46, 0.10, 0.03, 0.00, 0.07,
     >             0.25, 0.43, 0.10, 0.05, 0.01, 0.16,
     >             0.22, 0.38, 0.09, 0.06, 0.05, 0.20,
     >             0.22, 0.38, 0.09, 0.06, 0.05, 0.20,
     >             0.20, 0.33, 0.07, 0.03, 0.10, 0.26,
     >             0.20, 0.36, 0.07, 0.04, 0.09, 0.24,
     >             0.19, 0.27, 0.07, 0.04, 0.12, 0.31,
     >             0.18, 0.21, 0.07, 0.04, 0.15, 0.35,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36/
      DATA ((PROBN2(K,L),K=1,6),L=53,59)
     >           / 0.17, 0.18, 0.07, 0.04, 0.17, 0.36,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36,
     >             0.17, 0.18, 0.07, 0.04, 0.17, 0.36/
C
C
C First time only:  pack photoabsorption, photoioniation cross sections and
C convert to cm2; pack branching ratios; calculate energy losses:
C
      NNN(1)=5
      NNN(2)=4
      NNN(3)=6


      IF (IFIRST .EQ. 1) THEN
      IFIRST = 0
        DO 10 L=1,LMAX
        SIGABS(1,L) = SIGAO(L)  * 1.E-18
        SIGABS(2,L) = SIGAO2(L) * 1.E-18
        SIGABS(3,L) = SIGAN2(L) * 1.E-18
        SIGION(1,L) = SIGIO(L)  * 1.E-18
        SIGION(2,L) = SIGIO2(L) * 1.E-18
        SIGION(3,L) = SIGIN2(L) * 1.E-18
   10   CONTINUE
C
        DO 20 L=1,LMAX
        DO 20 K=1,NST
        PROB(K,1,L) = PROBO(K,L)
        PROB(K,2,L) = PROBO2(K,L)
        PROB(K,3,L) = PROBN2(K,L)
   20   CONTINUE
C
        DO 40 L=1,LMAX 
        DO 40 I=1,NMAJ 
        DO 40 K=1,NNN(I) 
        EPSIL1(K,I,L)=12397.7/WAVE1(L)-TPOT(K,I) 
        EPSIL2(K,I,L)=12397.7/WAVE2(L)-TPOT(K,I) 
   40   CONTINUE 
C
      ENDIF
C
C
C Main loop over altitude:
C
      DO 700 J=1,JMAX
C
      DO 53 I=1,NMAJ
      PHONO(I,J) = 0.
      DO 53 K=1,NST
      PHOTOI(K,I,J) = 0.
      PHOTOD(K,I,J) = 0.
   53 CONTINUE
      DO 55 M=1,NBINS
      SPECT(M) = 0.0 
   55 CONTINUE
C
C loop over wavelengths:
C
      DO 400 L=1,LMAX 
C
C
C Calculate attenuated solar flux:
C
      TAU=0. 
      DO 57 I=1,NMAJ 
         TAU=TAU+SIGABS(I,L)*ZCOL(I,J) 
C      TAU=TAU+SIGABS(I,L)*ZCOL(I,J)*1.E5 
C  NOW CALCULATE FRACTION OF IONIZATION WHICH ARISES DUE TO PHOTOELECTRONS
C  THIS SCHEME DESCRIBED BY RICHARDS AND TORR, JGR, MAY 1988, pp 4063-4064
         IF(I.EQ.1 .AND. WAVE1(L) .LE. 250. .AND. WAVE2(L) .GE. 200.
     >        .AND. ZZ(J) .GT. 0.90E7 .AND. TAU .LT. 9.0)THEN
            RATD=EXP(-TAU)+2*(EXP(-1.3*TAU)+
     >           EXP(-2.0*TAU)+EXP(-2.5*TAU))
            RAT(J)=2.4*(EXP(-TAU))/RATD
         ENDIF
C     PRINT*,TAU
 57   CONTINUE
      IF (TAU .LT. 20) THEN
         FLUX(L)=SFLUX(L)*EXP(-TAU) 
      ELSE
         FLUX(L) = 0.0
      ENDIF
C
C
C Calculate SRC photodissociation of O2, photodissociation of N2, and
C photoionization of NO by solar Ly-alpha:
C
      IF (WAVE1(L) .LT. 1751. AND. WAVE2(L) .GT. 1349.)
     >   PHOTOD(1,2,J) = PHOTOD(1,2,J) + ZMAJ(2,J)*SIGABS(2,L)*FLUX(L)
      PHOTOD(1,3,J) = PHOTOD(1,3,J) +
     >                ZMAJ(3,J)*(SIGABS(3,L)-SIGION(3,L))*FLUX(L)
      IF (WAVE1(L) .LT. 1216. .AND. WAVE2(L) .GT. 1215.)
     >   PHONO(1,J) = PHONO(1,J) + ZNO(J)*SIGNO*FLUX(L)
C
C Loop over species:
C
      DO 300 I=1,NMAJ 
C
C
C Loop over states:
C
      DO 200 K=1,NNN(I) 
C
      E1= EPSIL1(K,I,L) 
      E2= EPSIL2(K,I,L) 
      IF(E2.LT.0.) GO TO 200 
      IF(E1.LT.0.) THEN
        E1=0. 
        DSPECT=(ZMAJ(I,J)*SIGION(I,L)*FLUX(L)*PROB(K,I,L))* 
     >         (E2/(EPSIL2(K,I,L)-EPSIL1(K,I,L))) 
      ELSE
        DSPECT= ZMAJ(I,J)*SIGION(I,L)*FLUX(L)*PROB(K,I,L) 
      ENDIF
      Y=E2-E1 
C SUMMATION OVER ENTIRE WAVELENGTH INTERVAL 
      PHOTOI(K,I,J) = PHOTOI(K,I,J) + DSPECT
C
  200 CONTINUE 
C
  300 CONTINUE
C
  400 CONTINUE 
C
C Put photoelectron spectrum into return array:
C
      DO 500 M=1,NBINS 
      PESPEC(M,J)=SPECT(M)
  500 CONTINUE
C
  700 CONTINUE
C
C    SUM UP PHOTOIONIZATION RATE FOR OXYGEN; ALL STATES FOR EACH ALTITUDE
      DO 402 J = 1,JMAX
C    PHOTOT IS PHOTOIONIZATION RATE (CM-3 SEC-1)
      PHOTOT(J) = 0.0
      DO 401 K  =  1,NNN(1)
      PHOTOT(J) = PHOTOT(J) + PHOTOI(K,1,J)
  401 CONTINUE 
C   SAVE THE PRIMARY PHOTOIONIZATION RATE 'PHOTOT'
          PHOTOTR(J) = PHOTOT(J)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      
C VERTICAL TRANSPORT (ESCAPE) OF PHOTOELECTRONS ABOVE 250 KM REDUCES
C IMPACT IONIZATION EFFECTIVENESS AND FURTHER LOWERS THE RATIO OF P.E.
C IONIZATION TO EUV IONIZATION.   THEREFORE, APPLY LINEAR CORRECTION
C TO MATCH RICHARDS AND TORR PROFILE, JGR,MAY,88,PG 4063 FIG 5.
C ALTITUDE OF INTERPOLATION 250 TO 750 KM
C
      IF (ZZ(J) .GT. 0.250E8 .AND. ZZ(J) .LT. 0.760E8)THEN
          RAT(J)=RAT(J)*(ZZ(17)/ZZ(J))
         ENDIF
         IF (ZZ(J) .GT. 0.750E8) RAT(J)= RAT(67) 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C   FOLD IN THE CONTRIBUTION FROM PHOTOELECTRONS
C         write(44,*) 'ok'
C         write(44,*) 'PHOTOTR(J)+PHOTOTR(J)*RAT(J)',
C     ;    PHOTOTR(J),PHOTOTR(J),RAT(J)
         
         PHOTOTR(J)= PHOTOTR(J)+PHOTOTR(J)*RAT(J)
C   COMPUTE THE PRIMARY PHOTOIONIZATION FREQUENCY (SEC-1) FOR OPTICAL DEPTH CALC
          PHOTOTF(J) =  PHOTOT(J)/ZMAJ(1,J)
       ZZ(J) = ZZ(J)/1.E5
  402 CONTINUE
C
       WRITE(16,9991)
 9991 FORMAT(5X,'      ALT   ','      TAU  ','     PHOT RATE',
     $ '      PHOTOE ','     PHOTO FREQ  ')  
C
C CALCULATE TAU1 AS A FUNCTION OF ALTITIUDE 
      DO 403 J = 1,JMAX
      IF (PHOTOTF(J).GE.1.E-20.AND.PHOTOTF(JMAX).GE.1.E-20)THEN
           TAU1(J) =ALOG((PHOTOTF(JMAX)/PHOTOTF(J)))
        ELSE
          TAU1(J)= 99.999
        ENDIF
C  NOW  COMPUTE THE TOTAL PHOTOIONIZATION FREQUENCY (SEC-1)
        PHOTOTF(J) =  PHOTOTR(J)/ZMAJ(1,J)
        IF(PHOTOTF(J) .LT. 1.E-12) PHOTOTF(J)=9.99E-13   
C
 403  CONTINUE
C       J=0
C REDUCE TOTAL PHOTIONIZATION ARRAY AND OTHER ARRAYS TO "PW SIZE"
       DO 399 K=1,JMAX
          IF (ZZ(K) .LE. (ALTMIN/1.E5))THEN
            J = 1 
            PHOTOTF(J)=PHOTOTF(K)
            ZZ(J)=ZZ(K)
            TAU1(J)=TAU1(K)
            RAT(J)=RAT(K)
            PHOTOTR(J)=PHOTOTR(K)
            KKK =INT( K + IFACTOR/1E5)
           ENDIF
 399   CONTINUE
C
             J = 1
            DO 499 L= KKK,(JMAX-1),IFACTOR/1E5
            PHOTOTF(J+1)=PHOTOTF(L)
            ZZ(J+1)=ZZ(L)
            TAU1(J+1)=TAU1(L)
            RAT(J+1)=RAT(L)
            PHOTOTR(J+1)=PHOTOTR(L)
            ISUM=J
            J= J + 1
 499  CONTINUE
C NOW FILL PHOTOIONIZATION ARRAY TO MATCH PW CODE SIZE
       DO 404 J=ISUM,NDIM1
       PHOTOTF(J)=PHOTOTF(ISUM+1)
  404  CONTINUE
C
       DO 405 J = 1,40
C PRINT LOW ALT PHOTONIZATION VALUES
      WRITE(16,9994)ZZ(J),TAU1(J),PHOTOTR(J),RAT(J),PHOTOTF(J)
 9994 FORMAT(6X,F9.1,5X,F7.3,5X,F9.3,6X,F7.5,1X,1PE15.3)
  405  CONTINUE
C
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE BOXNUM (E1, E2, M1, M2, R1, R2, NBINS, DEL, ENER)
C
C This subroutine finds the box numbers corresponding to
C energies E1 and E2, and calls them M1 and M2
C 
C R1 is the upper edge of the lower box, R2 is the lower edge of the
C upper box.
C
C
      DIMENSION DEL(NBINS), ENER(NBINS)
C
      DO 100 I=1,NBINS
      IF (E1.GE.ENER(I)-DEL(I)/2. .AND. E1.LT.ENER(I)+DEL(I)/2.)
     >  GOTO 200
  100 CONTINUE
C
      IF (E1 .LT. 0.25) THEN
        M1 = 1
        R1 = 0.75
      ELSE
        M1 = NBINS+1
        R1 = ENER(I) + DEL(I) * 2.
      ENDIF
      GOTO 300
C
  200 M1 = I
      R1 = ENER(I) + DEL(I) / 2.
C
  300 DO 400 I=1,NBINS
      IF (E2.GE.ENER(I)-DEL(I)/2. .AND. E2.LT.ENER(I)+DEL(I)/2.)
     >  GOTO 500
  400 CONTINUE
C
      IF (E2 .LT. 0.25) THEN
        M2 = 1
        R2 = 0.25
      ELSE
        M2 = NBINS+1
        R2 = ENER(I) + DEL(I)
      ENDIF
      GOTO 600
C
  500 M2 = I
      R2 = ENER(I) - DEL(I) / 2.
C
  600 RETURN 
C
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE PRECIP(IDMX,ALTMIN,PHOTOTP)
C THIS SUBROUTINE CALCULATES IONIZATION FREQUENCIES FOR ATOMIC OXYGEN
C BASED ON USER-SPECIFIED ELECTRON PRECIPITATION
       REAL MO,MD,NO,NN2,NO2,NH,NHE,TN,GEE
       REAL  ZZZZ(601),G(601),PHOTOTP(601),IONRATE(601)

CALEX Here was a big problem!! IONRATE was implicitly defined to be integer
CALEX type. If you look below at how it is used, it appears clear to me
CALEX that it should be of type real. After all, it is an ionization rate!!
C     DIMENSION ZZZZ(601),G(601),PHOTOTP(601),IONRATE(601)

       DIMENSION FLUX1(4),ALF1(4)
CALEX again common_variables.f includes common variables
       COMMON /MSIS1/IDATE,UT,SEC,GLAT,GLONG,STL,F107A,F107,AP(7),IART
     $,GMLAT,GMLONG
C                    rain   cusp  aurora  mix
       DATA FLUX1 /  0.03,  0.3,  1.5,    .3  /
       DATA ALF1 /   0.2,   0.1,  0.75,   .2 /
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C      PICK A ENERGY AND FLUX VALUE!!!!!!!!!!!!!!!!!!!!!!!!
C      DEFINE AN AVERAGE PARTICLE ENERGY (KEV)
          ALF  = ALF1(1)
C      DEFINE A CHARACTERISTIC PRECIPITATING ELECTRON FLUX (ERGS/CM2/SEC)
          FLUX = (FLUX1(1)*1.602E9)/(2.*ALF)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C USE KM FOR ALT ARRAY GENERATION!!! ALTMIN COMES IN AS CM!!!!!
       ALTMIN1 = ALTMIN/1E05
C
      IZMIN = INT(ALTMIN1)
      INTER = IDMX*2
      IZMAX = INTER*300
      INTERR = (IZMAX-IZMIN)/INTER
      I=0  
C       ALT ARRAY LOOP VARIABLES IN KM 
          DO 101 K = IZMIN,IZMAX,INTER
            I = I+1
            ZKK = K*1.E05
            ZZZZ(I) = ZKK
            G(I) = 983.06/((1+ZZZZ(I)/6356.77E05)**2)
 101      CONTINUE
          DO 102 I= 1,INTERR
C             PRINT*,ZZZZ(I) 
C MSIS GETS ALT IN CM    
             CALL MODATM(ZZZZ(I),NO2,NN2,NO,NH,NHE,TN)
C    XNDD IS TOTAL NUMBER DENSITY PARTICLES CM-3; 
         XNDD = NO2 + NN2 + NO + NH +NHE
C    MD IS TOTAL MOLECULAR WT
         MD= (NO2 *32.+ NN2 *28.+ NO *16. + NH *2.+NHE*4. )
C    NOW DETERMINE AVG MOLECULAR WEIGHT
         AMW= MD/XNDD
C    COMPUTE MASS DENSITY(GM/CM-3)    
         RHO = MD*1.6726E-24
         H = (8.317E07*TN)/(AMW*G(I))
         D = RHO*H
C          PRINT*,D,ALF,H,RHO
             X = ((D/4.E-06)**0.606)/ALF
C     FY IS A DIMENSIONLESS ENERGY DISSIPATION FUNCTION AFTER LAZAREV
C     (GEOMAGN. AERONOMIYA,1967,7,219-223) WHICH WAS MODIFIED FOR AN 
C     ISOTROPIC DISTRIBUTION OF ENERGETIC PARTICLES BY ROBLE (PRIVATE
C     COMMUNICATION,1988). SEE ROBLE ET AL (GRL NOV 88) FOR DETAILS.
C
      FY = 3.233*(X**2.56588)*EXP(-2.2541*(X**0.7297198))+
     $ 1.106907*(X**1.71349)*EXP(-1.8835444*(X**0.86472135))
C
C      PRINT*,'      RHO            H            D             X        
C     $           FY     '
C      PRINT*,RHO,H,D,X,FY
C CALCULATE TOTAL IONIZATION RATE (CM-3 SEC-1) BY PRECIPITATING ELECTRONS
      TOTION = FLUX*ALF*FY/(35.E-03*H)
C COMPUTE PORTION OF OXYGEN IONIZATION
      GEE = 0.92*NN2+1.5*NO2+0.56*NO
C  IONRATE (ATOMS CM-3 SEC-1) IS IONIZATION RATE FOR JUST O+ PRODUCTION 
      IONRATE(I) = (0.5*NO2+0.56*NO)*TOTION/GEE
C  NOW COMPUTE O+ IONIZATION FREQUENCY
      PHOTOTP(I)= IONRATE(I)/(0.56*NO + 0.5*NO2) 
C
  102  CONTINUE
C      WRITE(16,9992)(PHOTOTP(J),J,(ZZZZ(J)/1.E05),J = 1,23)
C 9992 FORMAT(1PE15.4,I4,1PE15.4,'PRCP FRQ,J,ALT PRECIP OUT')
      RETURN
      END

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      
      FUNCTION CVMGP(A,B,C)

      IF(C.GE.0.)THEN
         CVMGP=A
      ELSE
         CVMGP=B
      ENDIF
      RETURN

      END
 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
