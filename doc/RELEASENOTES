RELEASE NOTES FOR BATSRUS

Version Notes

5.31	better definition of true_cell and true_block variable, will allow
	easier implementation of multiple bodies.

	improved calc_gradients, fixed logic for using neighbor cells
	     for gradients, uses new true_cell variable to determine
	     use, faster and more efficient code for minmod limiter,
	     new limiters easier to add.

	various fixes for projection scheme.  Not yet verified correct.

	fixec pIO, pIOa, and pIOb for noclobber

	other misc. minor changes to a few files

5.32	Complete replacement of ionosphere with Aaron's new version.
	     Note that some double precision variables were replaced with
	     reals, check that accuracy dependancies are OK.
	     Additional input file parameters added.

	Major reorganization of Makefiles and directory structure.
	     Makefile now checks for machine architecture automatically.
	     Use "make dist" to create distribution code.
	     Use "make rundir" to create sample run directory with all
	     appropriate links and subdirectories.

	Projection bug fixed (again). Should not use B0 in energy conservation.

	Reworked BATioPP (output file type 4) and pIOa, pIOb 
	(output file type 9).
	They now do all that's needed, as well as checking to see that
	postprocessing executable exists and checking machine architecture
	to issue correct mpi command.

==========================================================================
5.40	Major revision
==========================================================================

--------------------------------------------------------------------------
	NEW PARAMETER FILE
--------------------------------------------------------------------------

	The input parameter file is named

PARAM.in

	(used to be BATSRUS.in). It contains commands with a hashmark (#)
	as the first character followed by arbitrary non-space/TAB characters.
	The rest of the line after a space/TAB character is ignored. 
	Each command is followed by a number of parameters, which can
	be integer, real, logical, or strings. Any of these can be followed
	by a comment, however, strings have to be separated with a TAB from
	the comment, since string may contain space. For example

#DIVB
T			UseDivbSource
F			UseProjection

#PROJECTION
bicgstab		proj_method:   'cg' or 'bicgstab'
max			proj_typestop: 'rel' or 'max'
0.			proj_divbcoeff
0.001D0			proj_divbconst
30			proj_matvecmax
...

	Note that logical variables can be given as T, F or .true., .false.

--------------------------------------------------------------------------
	MULTI SESSION FEATURES
--------------------------------------------------------------------------

	One can do consecutive sessions and modify parameters after each run.
	This is achieved by the 

#RUN 

	command, which results in BATSRUS running with the current input
	parameters until the stopping condition is fulfilled, and then it
	returns to the parameter file to read further instructions.
	For example, one can switch to time accurate 
	mode at the end of a session, and continue the run.
 
	*Note* that frequency of saves for the plot files and the
	stopping condition t_max can only be set when time_accurate is
        .true. already.

	To better separate the sessions in the parameter file, the
	#RUN command (and actually any other command) can be followed 
	by an arbitrary string as long as there is a space/TAB 
	character immediately following the command, e.g. here are
	the last few lines from Param/SSSS_300:

....

#RUN    ######################################################

#BORIS
.true.                  boris_correction
0.01                    boris_cLIGHT_factor

#STOP
300                     nITER

#RUN    ######################################################

#BORIS
.false.                  boris_correction

#END

--------------------------------------------------------------------------
	INCLUDED PARAMETER FILES
--------------------------------------------------------------------------

	PARAM.in can include other parameter files with the #INCLUDE
	commmand. Typically the files in the new 

Param/ 

	directory can be used. For example Smart Steady State Startup is 
	now achieved by 

#INCLUDE
Param/SSSS_800

	which will run several sessions with various schemes and refinement
	up to time step 800, where the user can set #SCHEME and other
	parameters. Or one can include some standard initial condition:

#INPUT
Param/EarthGGCM5nTNorth

	so that PARAM.in becomes shorter. Parameter files can be nested.
	All the input parameters are read at the beginning of the run,
        even if there are several sessions. Consequently the parameter
	files can be changed after the run has started and read_inputs
	displays a message like

Read_inputs read and broadcast nline=156 lines of text

--------------------------------------------------------------------------
	NEW OPTIONS IN PARAM.in
--------------------------------------------------------------------------

--------------------------------------------------------------------------
	SETTING STOPPING TIME, FREQUENCY OF PROGRESS AND SAVES
--------------------------------------------------------------------------
	Stopping time can be set with 

#STOP 
100	n_step
124.5	t_max

	as number of time steps, and/or as t_max for time accurate runs.

#PROGRESS
10
100

	sets how often the timing results are shown on the screen.

	The frequency of saving plot, restart, ionosphere, spacecraft,
	and planet files can be done individually using the 

dn_output(nfile)
dt_output(nfile)

	arrays (the latter can only be set when time_accurate is .true.).
	The appropriate array elements can be set following the 

#SAVERESTART        (ifile= restart_     = 1)

#SPACECRAFT         (ifile= spacecraft_  = 2)

#PLANET             (ifile= planet_      = 3)

#IONOSPHERE	    (ifile= ionosphere_  = 4)

#SAVEPLOT	    (ifile= plot_+1,2...,nplotfiles = 5,6...,nfiles)

	commands. In case of SAVEPLOT the number of plot files nplotfile
	needs to be set (at most 10 plotfiles can be defined for a session).
	The named integer parameters restart_, spacecraft_, etc. as well
	as the related variables are defined in

src/ModIO.f90

	Note that 

dn_output(ifile)=0 

	means that the file is saved BEFORE the first time step as well 
	as after every time step, while

dn_output(ifile)=1

	means that the file is saved AFTER every step, finally

dn_output(ifile)=-1 

	indicates that no saves are required except for the
	final save at the end of the very last session. 

--------------------------------------------------------------------------
        PLOT FILE TYPES
--------------------------------------------------------------------------

	The plot files are identified by the string array 

plot_type(nfile)

	which can have the following values currently

"3d"  full 3D plot file (used to be IOUTa =9)
"x=y" 2D cut along x=y  (used to be IOUTb =9)
"x=0" 2D cut along x=0  (used to be IOUTbx=9)
"y=0" 2D cut along y=0  (used to be IOUTby=9)
"z=0" 2D cut along z=0  (used to be IOUTbz=9)
"cut" 3D, 2D, or 1D cut (new!)

	The new "cut" plot file cuts an arbitrary brick determined by

plot_range(6,ifile)     (xmin,xmax,ymin,ymax,zmin,zmax)

	out of the simulation domain. A resolution 

plot_dx(3,ifile)        (dx,dy,dz for the plot)

	can also be defined. For example, one can have a crude overall 
	3D plotfile, or a finer resolution of a smaller region. 
        If the width of the region is less or equal than plot_dx in some
        direction(s), a 2D or 1D cut is obtained. The plot_range and
	plot_dx are automatically adjusted to conform with the size of
	the simulation box and the sizes of the blocks. 

--------------------------------------------------------------------------
	PLOT FILE NAMES
--------------------------------------------------------------------------

	Names of the plot files now start with the plot_type, followed
	by _N_, where N is an integer identifier (one can save several
	cuts from the same run, which need to be distinguished), and then
	the timestep _n000.... The header files for the new cut files 
	end with .h, while for the other plot_types, with .H as before.
	For example:

IO2/x=0_1_n000100.H              # header of 1st plot file of type x=y at n=100
IO2/x=0_1_n000100_pe0000.dat     # data from processor 0
IO2/cut_2_n000400.h		 # header of 2nd plot file of type cut at n=400
IO2/cut_1_n000400_pe0002.dat     # data from processor 2

	The header files now contain useful information, such as time step
	and simulation time when the save was done. For the cut files
	the number of processors, number of saved variables,
	plot_range, plot_dx, gamma, and names of variables are also saved.

	Note that file names can now be easily formed with the 

subroutine space2zero(string)

	found in 

src/library.f90

--------------------------------------------------------------------------
	POST PROCESSING SCRIPTS AND PROCESSIO PROGRAM
--------------------------------------------------------------------------

	In the main directory type

make PIO

	to produce

ProcessIO.exe 

	which can onvert a raw plot file 

IO2/inputfile.DAT

	into a Tekplot file

IO2/outputfile.DAT

	The inputfile.DAT needs to be produced first from the many
	IO2/*pe*.dat files which are saved by BATSRUS. This can be done
	with the 

pIO

	script, which collects the IO2/*pe*.dat files into IO2/*.DAT
	for each time step. Then one can make a link to one file, 
	run ProcessIO.exe, and move the output file, e.g.

cd IO2
ln -s y=0_1_n000300.DAT inputfile.DAT
ProcessIO.exe
mv outputfile.DAT newy=0_1_n000300.dat

	These steps can be done automatically with the 

pIO2d

	and

pIO3d

	scripts (used to be "pIOa" and "pIOb", but with the new file names
	that would not make much sense). 
	These scripts collect the individual *pe* files into
	a single file for each time step, and then postprocess and gzip them.
	The only difference between pIO3d and pIO2d is that they only 
	process 3D (3d*) and 2D (?=*) plot files respectively. 

--------------------------------------------------------------------------
	POSTCUT PROGRAM
--------------------------------------------------------------------------

	Type

make PCUT

	in the main directory to compile

PostCut.exe

	which collects information from all the cut_?_n??????_pe????.dat
	files and produces a single structured grid file with extension 
	".out", e.g.

IO2/cut_1_n000400.out

	This file can be visualized by the IDL routines used for VAC.
	These are provided in the 

Idl/ 

	directory together with the startup file

.idlrc

	in the main directory and a complete HTML manual 

Idl/MANUAL.html

	which can be read with a browser.
	The cut files should be easy to read with other visualization
	packages, since it contains a single uniform structured grid.

	To run this program, the .h file is needed as standard input,
	so run it like

PostCut.exe < IO2/cut_2_n000400.h

	To do many of the PostCut conversions in a single step, use the 

pIOcut

	script, which runs PostCut for all the time steps, and removes
	the *.h header files as well as the cut*.dat data files. 
	The resulting .out files can be put together to make a single
	file for an animation, e.g.

cat IO2/cut_2_*.out > IO2/cut_2.out
rm IO2/cut_2_*.out

==========================================================================
5.41
==========================================================================

--------------------------------------------------------------------------
	Ray tracing
--------------------------------------------------------------------------

	The new source files are

ModRaytrace.f90
ray_trace.f90
ray_pass.f90

	The raytracing calculates the values in

ray(3,2,1:nCellsI,1:nCellsJ,1:nCellsK,nBLK)

	array declared in ModRayTrace.f90 with the following meaning:

ray(1,1,i,j,k,iBLK)   - Theta coordinate of footpoint in +B direction 
			-90  < Theta1 < 90
ray(2,1,i,j,k,iBLK)   - Phi   coordinate of footpoint in +B direction
			 -180 < Phi1   < 180
ray(1,2,i,j,k,iBLK)   - Theta coordinate of footpoint in -B direction
			 -90  < Theta2 < 90
ray(2,2,i,j,k,iBLK)   - Phi   coordinate of footpoint in -B direction
			 -180 < Phi2   < 180
ray(3,1,i,j,k,iBLK)   - status variable with values 

	+3.	connected in both directions
	+2.	connected in 1st direction, open in 2nd
	+1.	connected in 2nd direction, open in 1st
	 0.	open field line in both direction
	-1.	a point inside a body or a field line connected to a body
	-2.	loop (a closed field line fully inside a block)
	-3.	unassigned (a closed plasmoid, or an error in the algorithm)

	Raytracing can be switched on with

#RAYTRACE

	in the PARAM.in file. Results of raytracing can be saved 
	into plotfiles of

plot_type(ifile)="ray"

--------------------------------------------------------------------------
	NOMPI library
--------------------------------------------------------------------------

	BATSRUS can now be compiled on a single processor (or shared memory)
	machine without MPI. First

make NOMPI

	to compile the tiny

src/libNOMPI.a

	library, then change the MPILIB definition to

MPILIB = -L. -lNOMPI

	in the appropriate

src/Makefile.MACHINE

	file and (re)compile the code with 

make

	The resulting code runs without MPI, simply type

BATRSRUS.exe

	in the run directory.


--------------------------------------------------------------------------
	Constrained Transport and Central Difference schemes
--------------------------------------------------------------------------

	field-interpolated CD scheme implemented for a single block
	flux-interpolated  CT scheme implemented for a single block

	The field-CD scheme did not produce acceptable results.
	The flux-CT scheme seems to work properly.
	Both schemes require time accurate simulation.

==========================================================================
5.42
==========================================================================
	
nITER
	is not changed after a restart file is read, rather it is
        now compared to 

iteration_number

	which always starts from 0, while

n_step

	contains the total number of steps, starting from n_step0 of the
	restart file.

Time_Simulation

	is now in seconds.

	The flux interpolated CONSTRAINED TRANSPORT scheme is now implemented
        for arbitrary grid, but div B is not yet conserved at resolution 
        changes, and mesh refinement will not conserve div B either.
	The experimental CENTRAL DIFFERENCE scheme has been removed.

exchange_messages

	now calls message_pass_dir with send_corners=.true. always
	This should not change performance significantly and simplifies
	logic appreciably since ray tracing, constrained transport, or 
	some plotfiles require one layer of corner and edge ghost cells.

==========================================================================
5.43
==========================================================================

	New

ModCT.f90

	module for Constrained Transport variables.

==========================================================================
5.44
==========================================================================

	Constrained Transport works with AMR including refinement and
	resolution changes. Still to do: coarsening and 2nd order refinement.

==========================================================================
5.5
==========================================================================

	Merged code, major release

	2nd body option included

	Inner and outer boundary conditions can be read from PARAM.in

	AMR refinement options are read from PARAM.in

==========================================================================
5.51
==========================================================================

	Bugs removed

==========================================================================
5.52
==========================================================================

	Timur Linde's div B diffusion is added, experimental

	restart.H header file is saved with every restart
	It contains time step and time, and also info about saving
	the face centered B field for UseConstrainB=.true.

	logfile can be saved to monitor total mass, energy, momentum etc:

#SAVELOGFILE
T
10		dn
0.02		dt

==========================================================================
5.53 from 5.51
==========================================================================

	Body refinement option removed

	RefineCrit="Rcurrents" added

==========================================================================
5.54
==========================================================================

	Merged 5.53 and 5.52

	Makefile.IRIX64 improved to avoid a compiler bug for options -r8 -O3

---------------------------------------------------------------------
	NEW IDL FILE OPTIONS
---------------------------------------------------------------------

	SAVEPLOTFILE options rewritten completely, see Param/FULL

	Option to save unstructured IDL file	

	Option to save arbitrary list of variables and equation params for IDL

	Two-side averaging for x=0, y=0, z=0 cuts is now done for IDL files too

	PostCut.exe is renamed to PostIDL.exe

	pIOcut is renamed to pIDL and it has to be called with a parameter,e.g.

pIDL IO2/cut_mhd
pIDL IO2/cut_mhd KEEP

	to process IO2/cut_mhd*.idl files. If any second parameter is given,
	the .h and .idl files are not deleted. 
	From the main directory use

make pIDL
make pIDL TYPE='y=0'
make pIDL TYPE='y=0 KEEP'

	to process run/IO2/*.idl or run/IO2/y=0*.idl files, respectively

	temporary IDL data files have extension .idl (used to be .dat)

==========================================================================
5.55
==========================================================================

	Two bugs fixed in create_soln_blocks.f90

	Debug options via oktest added to specify_refinement.f90,
	specify_coarsening.f90 and coarsen_grid.f90

	Main Makefile changed so that "make rundir" now does links with
	full pathname rather than ../

	Makefiles changed so that MPI header files are copied when making
	any parallel executable, not just BATSRUS.exe

	SSSS Parameter file changed so that boris factor only drops to
	0.03 rather than 0.01.  A few other minor changes were made to SSSS.

==========================================================================
5.56
==========================================================================

	1 bug fixed in PARAM.in (TAB inside plot_string 'y=0 raw idl')

	1 bug fixed in write_plot_idl (missing ira parameter in MPI_reduce)

	1 bug in Makefile.Linux corrected (OS undefined) also updated

	mpif90_linux.h and mpif90_linux-r8.h are updated

---------------------------------------------------------------------
	DIVB DIFFUSION
---------------------------------------------------------------------

	DivbDiffusion now seems to work.

#DIVB
T		UseDivbSource
T		UseDivbDiffusion
F		UseProjection
F		UseConstrainB

	Make sure that the source is added explicitly:

#IMPLICIT
F		point_implicit

	You can also adjust the coefficient for the diffusione

#DIVBDIFFUSION
0.4		divbdiff_coeff

	although the default value is optimal in the sense that 
	it is close to the maximum diffusion but still stable.

---------------------------------------------------------------------
	NEW STOPPING CONDITIONS
---------------------------------------------------------------------

	Stop and save files if cputime exceeds maximum given by

#CPUTIMEMAX
4000		cputime_max (seconds)

	Stop and save files if 

#CHECSTOPFILE
.true.

	and a

BATSRUS.STOP

	file exists in the same directory where BATSRUS.exe is. 

==========================================================================
5.57
==========================================================================

	1 bug fixed in main: for nITER=0 the code now stops as expected

	1 bug fixed in read_inputs: hashmark was missing from '#DIPOLE'

	1 bug fixed in project_B: .not.true_BLK --> body_BLK in boundphi

	bugs fixed in write_plot_idl and PostIDL: 
		now y=0, x=0, z=0 structured IDL plotfiles are correct

-------------------------------------------------------------
	CONTSTRAINED TRANSPORT
-------------------------------------------------------------

	projection of initial/restart B field for constrained transport

	coarsening works for constrained transport

	second order prolongation for CT scheme is implemented.

-------------------------------------------------------------
	OUTPUT, IDL
-------------------------------------------------------------

	dn_output and dt_output frequencies are now absolute and not
	relative to the restart values of n_step and time_simulation.
	For example, if dn_output=100 and the restart is at 830 steps,
	the first save will be at n_step=900 and not 930 as before.
	dt_output works similarly using int(time_simulation/dt_output)
	as a counter for saving the file. Plots saved before AMR or at
	the end of the simulation are of course not equally spaced in general.

	progress reports and final timing reports now consistently refer
	to the number of total time steps (n_step) as "N", and the number
	of iterations for this run (iteration_number) as "iteration". 

	saving logfile is not shown on STDOUT

	PostIDL now writes more compact info onto the screen

	pIDL script now also runs with no arguments (same as pIDL IO2/). 
	pIDL -help prints usage info.

	New IDL plotting modes for 2D irregular grids obtained with 
	plot_dx = -1. In IDL set transform='none' and select one of

plotmode='contirr'
plotmode='contlabelirr'
plotmode='contfillirr'

	These plot modes work for the default axistype='coord' only.
	The 'cut' index array does not work for irregular grids, however,
	the plotting region can be easily modified by the system variables:

!x.region=[-10.,20.]
!y.region=[-32.,32.]
.r plotfunc

-------------------------------------------------------------
	NEW PROLONGATION OPTION FOR AMR
-------------------------------------------------------------

	In #PROLONGATION, prolong_type='minmod' or 'minmod2' now affects
	the prolongation of the AMR scheme to use minmod limited slopes
	instead of the left and right slopes used until now. This enforces
	conservation of momentum and mass during AMR.

-------------------------------------------------------------
	BOUNDARY CONDITIONS
-------------------------------------------------------------

	New outerBCtype with fixed boundary condition without B0 correction. 
	Usage:

#OUTERBOUNDARY
fixedB1

	All small case 'fixedb1' is also accepted.
	This is the default outerBCtype for problem_rotation. 

	New innerBCtype with fixed B1=0, corotating velocity, fixed rho and P.
	Usage:

#INNERBOUNDARY
ionosphereB0

	All small case 'ionosphereb0' is also accepted.
	This is the new default innerBCtype for Earth, Saturn, Jupiter and
	problem_rotation. For Venus the default is 'reflect', for the other
	problems there is a separate inner boundary subroutine.

	The variables Magneto_rho_dim and Magneto_T_dim have been renamed to
	the more appropriate Body_rho_dim and Body_T_dim. In addition, the
	dimensionless Body_rho and Body_p variables are declared in ModPhysics.
	These variables are used for fixed type innerboundaries, and to set
	density and pressure inside the bodies.

==========================================================================
5.58
==========================================================================

	1 bug in main : close(logfile_) --> close(unit_logfile)

	2 bugs are fixed which caused the code crash on the Linux cluster:
	restrict_block: Assig default 1, not 0, for corners
	prolong_block : Assig default 1, not 0, for corners
	This avoids division by zero in correctE in the unused corner cells.
				(this bug was introduced in 5.57)

	1 bug in restrict_block: ghosts cells are assigned 
	This matters for coarsened and immediately refined blocks
				(this bug was introduced in 5.57)

	1 bug in find_neighbors: OutBlockPrt%Pts is not tested if unset
				(the NAG compiler needs this)

	1 bug in library.f90: allocate arrays on all PE-s even if not used
	                      and deallocate them in subroutine error_report
				(the NAG compiler needs this)

	1 bug in read_inputs: Start_Time_Array is now initialized to 3/21/2000

-----------------------------------------------------------------------
	Message Passing Options
-----------------------------------------------------------------------

	In #OPTIMIZE the optimize_message_pass have three new options:

	optimize_message_pass='old' uses

message_pass_equal
message_pass_reschange

	optimize_message_pass='oldopt' uses

message_pass_equal_opt
message_pass_reschange_opt

	optimize_message_pass='all' uses

messagepass_all

	even if there is no need for corners (ie. typelimiter is not 'LSG')

	EXCHANGE_MESSAGES now does not message pass E_BLK and
	it calls correctE for all used blocks. This allows the use
	of message_pass_equal_opt and message_pass_reschange_opt,
	and it may speed up things a bit for the other message pass versions.

	NOTE: ray tracing and constraied transport can't be used
	if corners are not passed. Projection uses message_pass_dir
	for efficiency, although it does not need corners.

------------------------------------------------------------------------
	Platform and message pass combinations 
------------------------------------------------------------------------

	SGI (cylon): 'oldopt' crashes if nBLK is too large, 
		     for example nBLK=1500 for 4x4x4 blocks.
		     NOTE: the compiler warns about stack frame!!!

	Linux      : 'oldopt' is fastest, 'old' works, all others fail due to
						       a compiler bug
	T3E	   : there is a memory leak for message_pass_dir, probably
	 	     an MPI problem


----------------------------------------------
	TESTING PLATFORMS AND VERSIONS
-----------------------------------------------

	The new TEST subdirectory of src_v5.58 contains a PARAM.in for
	testing purposes, as well as logfiles obtained on different
	machines using this test. The TEST directory is linked into
	the run directory by make rundir_rel or make rundir_abs.

----------------------------------
	OTHER CHANGES
----------------------------------

	logfile now contains min(P) and max(P) in the last two columns

	restart.H is only read by proc 0 now and the input is broadcast

	incorrect InitialRefineType is caught now in specify_refinement

	version number is corrected in write_progress.f90

	Script/Linux/Kill_BATS script kills running BATSRUS.exe on all PE-s.

==========================================================================
5.59
==========================================================================

	2 bugs in update_states and update_states_boris:
		do i=1,4 --> do itry=1,4
		This bug meant that the time step reduction was
		only applied once.

	2 bugs in pIO2d and pIO3D : -x ProcessIO --> -x ../ProcessIO

	Improved time step reduction algorithm: 5.00 --> 5.50 after do itry=1,4
		This slight overreduction helps to make the relative
		change in pressure become smaller than the required 20%.

	test_string = 'show_pmin' and 'show_pmax' will show the location
		of minimum and maximum pressure whenever the logfile is saved

==========================================================================
5.60
==========================================================================

	Total rewrite of timestep reduction in update_states* and main
	        -removed all instances of dtf and its variants
		-removed negative density and pressure check from
		 update_states and put in new routine in main called update_check
		-update_check checks percentage change in density and pressure
		 after each update and reduces the timestep if needed
		-this now works for time accurate as well as local timestepping!

	Modified cfl input:
		-only input one value, cfl, rather than cfl1 and cfl2
		-cfl is now included in time array
		-only dependance on multistage time-stepping is in update_states*

	Param/SSSS modified to only use Boris factor of 1.0

	Timestep calculation changed:
		-all flux calculations now compute Vdt from _hf values, not
		 max of _lf and _rf values
		-calc_timestep now uses the sum of the max of Vdt in each
		 direction instead of summ of all 6 Vdt values.  (effectively
		 doubles timestep)

	Bug in read_inputs fixed:
		-THETAtilt now converted to radians at read, not each call to
		 read_inputs

	update_states_boris bug fixes:
		-dependancies in conversion between standard momentum and
		 "Boris momentum" on new/old rho and B fixed

	update_states* reorganized
		-in addition to the above mentioned timestep reduction and boris
		 fixes, the "Assign interior solution to ghost cells" section
		 has been removed.  It was a safety net in place to find long
		 gone bugs in the code.  Also, the magnetotail flow problem
		 modifications have been pulled from each version of 
		 update_states and put into its own routine at the end of 
		 update_states.f90.  Some of the loop structure has also been 
		 cleaned up.

	write_plot_tec fixed:
		-did not correctly use corners to compute corner values, fixed.
		-now computes all cell corner values for block before writing
		 (more efficient looping).

==========================================================================
5.61
==========================================================================

	Files created: amr_physics.f90, amr_criteria.f90, update_states_MHD.f90
	Files removed: specify_coarsening.f90

	Russanov face fluxes: extra calculations removed, now runs faster

	Initialization and Reinitialization of ionosphere and magnetosphere
		now contained in new routine at top of magnetosphere.f90.
		Was done in various routines before, including main and amr.

	Added CodeSpeed variable, which computes cells/second/processor

	Moved update_check routine out of main.f90 and into update_states.f90

	Moved update_states_MHD routine out of update_states.f90 to its own file

	Totally rewritten AMR:
		Coarsening and refinement based on physics now done in one
		combined step with much more control over the outcome.
		Redesign fixes bug where blocks could be coarsened and refined
		in same AMR.  Also does not allow refinement level changes for
		neighboring body blocks.

		-new octree routines to manage the tree, including new variables
		 stored on the octree via pointers:
			coarsen, refine, body, LEVmin, LEVmax
		-lev variable removed from calling argument of several coarsening
			and refining routines.  It was not used
		-fixRefinementLevels modified to not allow refinement level
			changes between neighboring blocks cut by the body
		-coarsen_grid:
			coarsen_grid is now a front end for parallel_coarsen
			which just gathers the coarsen flags from each processor
			so that every processor has all coarsen flags.
		-refine_grid:
			refine_grid is now a front end for parallel_refine
			which just gathers the refine flags from each processor
			so that every processor has all refine flags.
		-read_inputs: reorganization as well as new and removed variables
		 read from input files (See Param/FULL for details)


==========================================================================
5.70  (NOTE: from 5.58 and 5.59)
========================================================================

	2 bugs in Param/shock_briowu and Param/shock_ryu: 
						#PROBLEMTYPE should be 2

	far_field_BCs_BLK are now set and set_farfield_BCs is called
	for shocktube and uniform problems too. 

	subroutine set_far_field_BC_flags has been rewritten completely

	Now test_string='read_inputs' writes out the parameters in the same
	format as in PARAM.in

----------------------------
	Binary .idl files
----------------------------

	The .idl files can be saved in binary format. This gives faster IO,
	and there is no loss of accuracy. Since binary files are platform
	dependent, the PostIDL program should be run on the same machine
	where the .idl files are produced. The .h file contains a new line
	which gives the value of the SAVE_BINARY logical variable, ie. it
	tells if the corresponding .idl files are binary or ascii. 
	This variable can be set from Param.in file with

#SAVEBINARY
T

	The default value is false, ie. the .idl files are saved as ASCII.
	NOTE: Currently TEC files are always in ASCII format.


	3 bugs in set_ICs for rotated shock tube: x > -y    ==> x < -y
				   		  E_        ==> P_ 
						  *sqrt(2.) ==> /sqrt(2.)

	2 bugs in ray_pass for noncubic blocks: 
		qrayface    --> qrayface(:,:,1:nFaceJ,1:nFaceK)
		qrayend_ind --> qrayend_ind(:,1:nFaceJ,1:nFaceK)

	Default value for divb_diffcoeff is corrected from 0.4 (valid for 1D)
	to 1./6. (valid for 3D)

	Default values for SW_T_dim and SW_rho_dim are set to 1.0 to avoid
	division by zero in some unused quantities.

	PostIDL.exe is improved to handle resolution changes accross 2D cut
	better. Work around for the NAG compiler for writing large arrays
        implemented to fix and apparent compiler bug.

	New IDL procedure for plotting gridpoint of 2D unstructured grids.
	Usage:

plotgridpoints,x
plotgridpoints,x(20:100,10:50,*)

	New and clearer compiler flag options for production, development,
	and debugging in

Makefile.IRIX64 

	Hatstate is used for maximum wavespeed for all 3 fluxfunctions in

calc_facefluxes*.f90


	write_plots_???  changed completely
		- Changes unify more closely the writing for 'tec' and 'idl'
		  formats.  Writing tecplot files now has the ability, like
		  IDL, to choose variables to write.
		- write_plot_common created.  This routine does all the 
		  common processing for writing out data files for tec and idl.
		- write_plot_tec and write_plot_idl are slightly rewritten to
		  fit the new framwork.  They are stand alone and can be 
		  changed without affecting the organization framework of the 
		  plotting
		- read_inputs is changed accordingly, including tests for some
		  of the combinations of parameters that are still exceptions
		- User may now choose to have normalized or dimensional output
		  Units are written in the correct format for tecplot and idl 
		  according to user preference in set_physics (see below)

	file set_physics created, file set_ICs modified accordingly
		- File and routine set_physics created.  This has all the same 
		  functionality of the routine set_physics which was stored in
		  set_ICs.f90, but is rewritten to remove redundancies and is
		  now found in it's own file.
		- set_physics now defines units for normalization, input and
		  output.  Two sets of units are created unitSI_??? contains 
		  that normalization factors in SI units.  These can be 
		  multiplied and divided at will to give new units in SI.  The 
		  other is unitUSER_??? which contain the normalization factors
		  in user defined units (km/s, cc, planetary radii).  These
		  are used for input and output.  To go along with these are
		  string variables that contain the units.
		- The new functionality for normalization is applied everywhere
		  in the code, simplifying many cases in many places.

	Spherical plots created
		- File write_plot_sph.f90 created for makeing plots of values
		  on faces closest to the sphere at a radius supplied by the
		  user.
		- THIS IS STILL EXPERIMENTAL - there are signs that there may
		  be problems.

	write_logfile rewritten
		- write_logfile now uses a functionality like write_plots so
		  that the user can choose what quantities to write out.
		- integral of the flux over a sphere is added as an option.
		  Like the spherical plots above, THIS IS STILL EXPERIMENTAL - 
		  there are signs that there may be problems. 

	set_oktest - work around for calls to index with a contatenate (//)
		  in them implemented to fix an apparent memory leak on
		  the cray.
	

==========================================================================
5.71  (NOTE: merge of 5.61, 5.70, and changes below)
========================================================================

	removed rho_steady_BLK: was only in restart files, not needed anymore

	added tmp1_BLK and tmp2_BLK for temporary state variable storage on
	all blocks on a processor

==========================================================================
6.00
========================================================================

	corrected a bug in calc_timestep: cfl* was missing

	reduced default CFL number to 0.8 in read_inputs and Param/* files

	Makefile.IRIX64 compiler options improved

	CodeVersion variable defined in ModMain

	real* :: time_* variables defined in ModMain, and not in main.f90

	#DIPOLE strength is given in nT, not Gauss (read_inputs, set_physics)

	test_string='read_inputs' writes back parameters more intelligently

	test_string='update_check_detail' for extra info on time step reduction

	2 bugs in write_plot_idl corrected: 
		intent(out) -> intent(inout) for dxblk, dyblk, dzblk
		nBLKcells=0 set before any other check


==========================================================================
6.01
========================================================================

	Bug in cLIGHT normalization fixed

	Bug in Boris factor update after 1st session fixed

	New T3E MPI header files:
	src/mpif90_t3e_mpt.1.4.0.2.h, src/mpiof90_t3e_mpt.1.4.0.2.h

------------------------
	DOCUMENTATION
------------------------

	New Doc library in the main directory containing a manual in Tex, PS.

	RELEASENOTES moved into Doc library

---------------
	IDL
---------------

	Idl/MANUAL.html is replaced by an updated Idl/MANUAL.tex

	IDL_PATH and IDL_STARTUP are assumed to be set (see MANUAL.tex)

	idlrc is moved into Idl

	idlrc checks for operating system and sets device accordingly.

	Idl/animfunc.pro is replaced by Idl/funcdef.pro and rewritten
	so that it uses primitive variables in the function definitions.
	The primitive variables are all calculated as long as 
	'rho' and 'mx' or 'vx' and 'my' or 'vy' and 'mz' or 'vz' and 
	'bx' and 'by' and 'bz' and 'p' or 'e' are among the variables. 
	Many of the 2D specific functions are deleted.

	'Ax', 'Ay', 'Az' vector potential components are now defined in 
	Idl/funcdef.pro (the obsolete 'A' was the same as 'Az') 
	Useful for 2D problems to plot field lines as contours of A

	'Btheta' = atan2(by,sqrt(bx^2+bz^2)) defined in Idl/funcdef.pro

	xreglimits can be used to restrict the region of regular grid
	when transforming from unstructured to regular grid. This reduces
	the memory requirement and improves the speed of the plotting.

        'tv' plotmode now behaves much like any other 'flat' plotmode

	subplots are squezed together, extra axis labels are omitted

        'contbar' and 'tvbar' plotmodes add extra color bar

        the gridpoints or the gridlines can be overplot if the 
        'grid' or 'mesh' strings are appended to the name of the plotmode, e.g.
	'contbargrid' 'tvmesh' 'streamgrid' 'shademesh' etc.

        fixaspect=1 fixes the aspect ratio of the plot to the true aspect ratio

	makect,'blue' sets the colortable to a custom made colortable

	irregular grids are automatically recognized, and a triangulation
	is done within procedure plotfunc for all contour type plotmodes,
	the 'contirr', 'contbarirr' etc. plotmodes are not needed anymore

	transform='r' and 'n' can be used instead of 'regular' and 'none'

	npictinfiles is now correctly calculated even when the snapshots
	have varying sizes. All the headers are read, the snapshot size
	is calculated from header info and the file pointer is moved
	with point_lun.

	.r getpict now works more efficiently when npict>1 and 
	.r animate when firstpict>1 and/or dpict>1, since the
	procedure getpict only reads the headers of skipped snapshots.

	the header format of ASCII data files is more relaxed now
	(number of spaces or the number of digits is not fixed), since the
	length of the header is now calculated with the point_lun function.

---------------------
	RESTART FILES
---------------------

	Only physical cells are saved, which saves factor of 8 for 4*4*4 blocks

	RESTART.H contains a lot of new information:
	restart_Bface (T if Bface values are saved for CT scheme)
	restart_ghost=F (no ghost cells are saved)
	code version, problem type, timestep, physicsl and real world time, 
	total number of blocks, nI, nJ, nK, the grid size, 
	unitUSER and unitSI for the saved variables

==========================================================================
6.02
========================================================================

	Bug in amr_physics fixed: counting of refined cells is now correct

	Bugs in src/procedures.pro fixed: functions defined before used

	plot_pars='c' gives Boris modified speed of light 
			as an equation parameter (IDL)

	plot_vars='dx' gives dx_BLK as a plot function

----------------------------
	NEW BORIS CORRECTION
----------------------------

	Full Boris correction implemented for Rusanov scheme. Two new
	source files:

src/calc_flux_boris.f90
src/update_boris.f90

	When boris_cLIGHT_factor < 1, a non-conservative source term is 
	added to make steady state same as for boris_cLIGHT_factor=1 in

src/calc_sorces.f90
	
	Fast wave speed formula is not exactly right, which may cause
	problems with stability. Lowering the Courant number should help.
	This problem does not affect the correctness of a stable solution.
	The Boris modified fast wave formula is in 

src/calc_flux_boris.f90

	Set 

test_string='oldboris' 

	to use the old Boris implementation, although it seems that the
	old Boris implementation contains some minor bugs

==========================================================================
6.03
========================================================================


	Bug fixes in Calculate_Dipole_Tilt and amr_physics


==========================================================================
6.04
========================================================================

	Fix to gradient calculation, gradient value uninitialized.

	Prolong_block bug fix, prolongation at outer boundary could cause
		negative pressure.  It now checks where it is before
		applying gradient.

	ionosphere Makefile on the Cray had typo, fixed.

	debugging routine added to library.f90

	Major rewrite of allocation of blocks at refinement/coarsening/restart
		New allocation of blocks tries to keep groups of 8 on the
		same processor.  This improves the percentage of messages that
		can be copied rather than sent from around 10-20% to 50-80%,
		resulting in a big speedup when block size is small or
		computer communication speed is slow.  It does allow some
		load imbalance, so care should be taken when running on very
		large machines with a small number of blocks per processor.


	NOTE: the 40 iteration test results are changed from previous files.

==========================================================================
6.05
========================================================================

	Bug in write_logfile fixed - VAR selection did not give normalized
           quantities in the logfile
      
        Bug in write_plots_common fixed - tecplot values inside the body
           were not loaded correctly.

	Bug in get_solar_wind_conditions fixed - value of input for times
           between second to last and last data point were not interpolated
           correctly.
        
        Bug in set_physics fixed - Gbody was calculted using unitUSER
           instead of unitSI as it should have been.

        Bug in error_report in library.f90 fixed.  Logic was incorrect and
           and out of bound error could have occured.

        Bug in calc_flux_boris.f90 fixed.  Calculate of UdotB_lf and UdotB_rf
           had an error.

        In order to fixed an "invalid floating point operation" on the cray
           specify_refinement.f90 is now calculated with only -O 0.  The
           error could not be localized to a specific line and changed nature
           depending on write statements and compiler options.  In the end
           the consensus was that this is a compiler error and the work around
           is therefore acceptible.

        Bug in set_physics.f90 fixed - divide by zero was possible for 
           rot_period_dim = 0.0 . 
        
	Bug in prolong_block.f90 fixed to only allow minmod limiter. This helps
	   with negative pressures at the bow shock.

        Removed:  mag_heliosphere stuff.  This was for inputing data from
           the milestone run and is not needed anymore.
  
        Removed:  input_solar_wind - superceeded by upstream_input_file

        Removed: planets and  spacecraft tracking.  

        FULL updated to reflect current input/output

        Documentation added to users manual for new features.

-----------------------------
	SATELLITE TRACKING
-----------------------------

        Replaced the previous incarnations of planets and spacecraft 
        tracking with satellite tracking.  The main difference is that
        there can be multiple satellites tracked and the location of the
        satellite can be read from a file or can be computed in a formula
        given in satellites.f90.  Output for the satellite files goes in
        the IO2 directory with the naming scheme 
        satellite_01_satellitename.sat.

        The ouput files are writen by the write_logfile routine.

-----------------------------
	LOGFILE
-----------------------------
        New variables have been added to the logfile.  Variables can now
        be output at the test point selected using TESTIJK or TESTXYZ.
        Also added are the raytracing variables and the cross polar cap
        potential.

        Satellite output files now happen through the write_logfile routines.

        Input line for logfiles now include an option to specify the 
        time output format.  Either as a real in seconds or as vector of
        7 integers (year month day ...)

----------------------------
	Corotation
----------------------------

	Added off-axis corotation.  This involved adding '#AXES' input
	flag for read_inputs.  The code now runs in general GSM coordinates.
        The old inputs #COROTATION and #DIPOLE still function but #AXES
        should be used instead.

----------------------------
	Upstream Solar Wind Data
----------------------------

	Added the ability to bring in Solar Wind inputs at an angle instead
        of always a fixed value on the upstream face.

----------------------------
	Block allocation
----------------------------

	Changed the way blocks are allocated during grid refinement.  This
	feature allows children to be clumped together, but can make the
	load balancing be off.  Right now, the controls are hardwired into
	refine_grid.f90

----------------------------
	The ionosphere 
----------------------------

	Fake region 2 currents have been included. This feature is 
	hardwired as off.  This is highly experimental and should only
	be attempted by professionals.

----------------------------
	Load Balancing / message copying vs. sending
----------------------------

	The code was changed to allow children to be created in clusters.
	This allows one to put more child blocks together on one processor
	than another, minimizing the amount of communication between
	processors (we achieved a 40% speed up on the Beowulf using this plus 
	message_pass_dir).  This can also make the load balancing be off, such
	that the code can be significantly slowed down because one processor
	is doing too much work.  Therefore, we have allowed the user
	to control this with the #LOADBALANCE input parameter. See FULL.

----------------------------
	problem_comet
----------------------------

	problem_type problem_comet has been implemented.  The source terms
	have been updated to use unit conversions and there are now input
	parameter for controlling things like production rate.  This case
	is still a bit experimental.


==========================================================================
6.06BETA
========================================================================

        Fixed bug in write_plot_sph.f90 - spherical tecplot file header 
           lines had a problem with the "'s.

	Bug in write_logfile fixed - several selections did not give 
	   quantities with dimensions in the logfile

----------------------------------------------------
	PHYSICS BASED AMR
----------------------------------------------------

	Now physics based AMR should provide a grid independent
	of the number of nodes used. The only exception is when
	more blocks are flagged for refinement than the total number of
	available blocks, which of course depends on the number
	of processors.

	There is also an improvement that helps to maintain
	the symmetry of the grid if the solution is symmetric.

----------------------------------------------------
        MODSIZE AND OPTIONAL MODULES
----------------------------------------------------

	src/ModSize: module to define number of blocks and block sizes
		     Other modules may include ModSize (and not ModMain!)

	src/Makefile.OPTIONS: new Makefile for switching modules on and off

	src/Makefile: Uses OPTION_* variables. 
		      Dependency of modules on ModSize instead of ModMain

	src/iono_empty:          interface for Ionosphere Model
	src/tiegcm_empty:        interface for TIEGCM
        src/calc_flux_Roe_empty: interface for Roe face flux
	src/constrain_B_empty:   interface for Constrained Transpor scheme 
	src/project_B_empty:     interface for Projection scheme
	src/ray_trace_empty:     interface for Raytracing

	src/write_progress: subroutine option_list 
		reports the status (on or off)and names of options using the 

subroutine OPTION_SOMENAME(on, name) 

   logical, intent(out)            :: on
   character (LEN=40), intent(out) :: name

   on=.true.
   name='Name-of-the-option auther version'

end subroutine OPTION_SOMENAME

		subroutines defined in the empty as well as in one of the 
		functioning source files for each option.

	srcIONO/option_tiegcm.f: Fortran 77 subroutine OPTION_TIEGCM(on, name)

	srcIONO/Objects: contains option_tiegcm.o

----------------------------------------------------
	NON-CONSERVATIVE INNER ENERGY UPDATE
----------------------------------------------------

	src/ModMain: fluxes and source for pressure
		PFaceF_x, PFaceF_y, PFaceF_z, SP

	src/ModMain: Radius between conservative E and nonconservative P update
		Rconservative

	src/read_inputs: new command

#NONCONSERVATIVE
6.	Rconservative

	src/calc_gradients: New subroutine div3D to calculate divergence
		Used by src/calc_sources to get div(U) and div(E).

	src/calc_facefluxes: calculate PFaceF_x,y,z
	src/calc_sources:    calculate SP = -(gamma-1)P div(U)

	src/update_states: update energy and pressure
		based on P inside Rconservative and based on E outside that

----------------------------------------------------
	BORIS CORRECTION
----------------------------------------------------

	Fixed two bugs in src/calc_faceflux:

	    UdotB_lf and UdotB_rf definitions had Ut1 instead of Ut2

	    delta_U(E_) missed the 0.5*(v_EE_rf(i)-v_EE_lf(i)) term

	Improvements in src/calc_faceflux:

	    New approximate fast wave speed formula is used for Eigenmaxabs

	src/calc_gradients: take gradients of Boris momentum instead of
                            velocity, so gradX_Ux actually means gradX_rhoUx
			    when boris_correction is true.

	src/calc_face_boris: use Boris momentum gradients to calculate
			     primitive face values. 

	src/read_inputs now gamma and clight are the default plot_pars

----------------------------------------------------
	CFL NUMBER CHECKING
----------------------------------------------------

	src/read_inputs: warns if cfl>0.85 for local time stepping and no Boris
			 warns if cfl>0.65 for local time stepping with Boris

----------------------------------------------------
	LINDE AND ROE SOLVERS
----------------------------------------------------

	src/calc_facefluxes: Linde and Rusanov solvers merged
		Boris correction and non-conservative energy work for both

	src/calc_flux_Roe and src/calc_flux_Roe_opt: Roe solver separated
		Boris correction and non-conservative energy don't work for Roe

----------------------------------------------------
	INNER BOUNDARY CONDITIONS
----------------------------------------------------

	Major simplification of set_BCs: 

		no 0 gradient is forced onto physical cells next to body

	Major rewrite of src/calc_gradients: 

		subroutine grad1D_opt2 renamed to grad1D_true

		subroutine grad1D_opt1 renamed to grad1D_body

		variable index Var is passed to grad1D_body

		subroutine grad1D calls grad1D_true or grad1D_body
			depending on body_block

		In grad1D_body the slopes are determined with
		virtual ghost cell values inside the body.
		The virtual ghost cell value is determined when needed
		depending on the variable the inner boundary condition 
		and the limiter applied. 

		Currently velocity is always reflected, others have 0 slope
		When limiter type is "none", one sided slopes are used.


	src/amr_criteria.f90

		calls to grad1D_opt1 and grad1D_opt2 are replaced with
		call grad1D

-----------------------------------
        RESTART FILES
-----------------------------------

	The purpose of this changes is to make the restart files 
	easily transfareable between various platforms. To achieve
	this goal, the blk*.rst files now contain real numbers only,
	the octress.rst file contains integers only. 

	The ASCII header file restart.H has now the same format as PARAM.in,
        and it can be included with 

#INCLUDE
restartIN/restart.H

	command. This has the same effect as 

#RESTART
T

	The header file restart.H now looks like this:

#CODEVERSION
6.06                         CodeVersion
 
#CHECKGRIDSIZE
       4                              nI
       4                              nJ
       4                              nK
     576                number_of_blocks
 
#PROBLEMTYPE
      11                    problem_type
 
#NEWRESTART
F                          restart_Bface
 
#NSTEP
      10                          n_step
 
#STARTTIME
    2000                            year
       3                           month
      21                             day
      10                            hour
      45                          minute
       0                          second
 
#GRID
       2                    proc_dims(1)
       1                    proc_dims(2)
       1                    proc_dims(3)
 -2.24000E+02                         x1
  3.20000E+01                         x2
 -6.40000E+01                         y1
  6.40000E+01                         y2
 -6.40000E+01                         z1
  6.40000E+01                         z2
 
#SOLARWIND
  5.00000E+00                 SW_rho_dim
  1.81712E+05                   SW_T_dim
 -4.00000E+02                  SW_Ux_dim
  0.00000E+00                  SW_Uy_dim
  0.00000E+00                  SW_Uz_dim
  0.00000E+00                  SW_Bx_dim
  0.00000E+00                  SW_By_dim
  5.00000E+00                  SW_Bz_dim
 
#BODY
T                                  body1
  3.00000E+00                      Rbody
  4.00000E+00                  Rcurrents
  5.00000E+00               Body_rho_dim
  2.50000E+04                 Body_T_dim
 
#END
 
Additional info
 
       F time_accurate
 
  1.00000E+00  1.27560E+02  5.00000E+00  4.18150E-16  5.12573E+00  2.09075E-02 unitUSER_ x,t,rho,rhoU,B,p
  6.37800E+06  1.27560E+02  8.36300E-21  4.18150E-16  5.12573E-09  2.09075E-11 unitSI_ x,t,rho,rhoU,B,p


blk?????.rst

	binary file now contains real numbers only. It contains these records

dt_BLK(globalBLK),time_Simulation

dx_BLK(globalBLK), dy_BLK(globalBLK), dz_BLK(globalBLK),&
	x_BLK(1,1,1,globalBLK), y_BLK(1,1,1,globalBLK), z_BLK(1,1,1,globalBLK)

rho_BLK,rhoUx_BLK,rhoUy_BLK,rhoUz_BLK,Bx_BLK,By_BLK,Bz_BLK,p_BLK

Bxface_BLK,Byface_BLK,Bzface_BLK 	if restart_Bface is true

	It does NOT contain the integer nCells and the rather useless
	x1,x2,y1,y2,z1,z2 values any longer.

octree.rst

	binary file now contains integers only. It does not contain
	the real dxyz(3) and xyzend(4,3) arrays any longer. This information
	is now stored locally in the blk*.rst files.

	src/restart.f90:

		read_restart_header checks if CodeVersion is different,
		reads and broadcasts n_step, checks if total_number_of_blocks
		in the restart file will fit into the compiled code, 
		checks if problem_type, nCells, procs_dims, and the physical 
		grid dimensions agree with the values read from PARAM.in.

		write_restart_header writes the new format of the restart file.

		read_restart_file reads new as well as old format of blk*.rst

		write_restart_file writes the new format of the blk*.rst files

	src/octree.f90: dxyz(3) and xyzend(4,3) arrays are not saved any longer

	src/set_block_geometry: contains new subroutine
		set_restart_block_geometry using dx,dy,dz,x,y,z(1,1,1) info
			read from the blk*.rst file to setup block geometry

		set_block_geometry is renamed to set_block_geometry_obsolete
			and is kept for backwards compatibility with 
			old restart file format	only

	src/ModMain: xyzend_BLK(4,3,nBLK) array is removed, as it was not used
		all occurancies of this array were removed from other files.

	src/main: calls read_restart_file and set_restart_block_geometry
		BEFORE calling set_ICs, so that geometrical information 
		(dx,dy,dz,x,y,z,R, etc) is known by set_ICs.

	src/set_ICs: does not set the 8 flow variables if restart is true

-----------------------------------
        IDL
-----------------------------------

	src/PostIDL: fixed a bug which occured for unstructrured 2D
		asymmetric grids. The randomness of the rounding error 
		is now eliminated (0.5 --> halfeps=0.6 for lookup indices).

	Idl/funcdef.pro: 
	    reads "clight" from eqpar
	    new function definitions
		split energy:		e1 = p/(g-1) + 0.5*(rho*uu + bb1)
		split Boris energy:	e1B= e1 + 0.5* E^2/c^2
		momentum:		mx = rho*ux
					my = rho*uy
					mz = rho*uz
		Boris momentum:		mBx= rho*ux + (bb*ux - u.b*bx)/c^2
					mBy= rho*uy + (bb*uy - u.b*by)/c^2
					mBz= rho*uz + (bb*uz - u.b*bz)/c^2

	Idl/procedures.pro
	    New symmdiff(dir,var) function calculates symmetric difference.
	    For example func='symmdiff(2,rho)' in a y=0 cut will plot 
	    rho(x,z)-rho(x,-z)

	src/Makefile.COMMON: PostIDL.exe is compiled with ${PRECISION} flag

	src/write_plot_common: saves number of bytes in reals (real_kind)
	    in the .h header file for binary .idl files (#SAVEBINARY .true.)

	src/PostIDL: checks real_kind of file against real_kind of PostIDL.exe

----------------------------------------------------
	TIMING
----------------------------------------------------

#TIMING
T	UseTiming
10	dn_timing

	The timing results are reported at every dn_timing step
	and at the end of each session. Timings are now initialized
	at the beginning of each session and after any AMR.
	Absolute timings are divided by the number of time steps
	used to accumulate the timings. 

	For sake of backwards compatibility the obsolete

#TEST
time_all

	results in the same settings as

#TIMING
T	UseTiming
-1	dn_timing

	Writing speed files became optional. To switch it on use

#SPEEDFILES
T

	

----------------------------------------------------
	TESTING
----------------------------------------------------

	src/read_inputs: 
	variable and dimension can be selected for testing with

#TESTVAR
2            VARtest

#TESTDIM
1            DIMtest


	src/update_states:
	For testing purposes density, momenta, B field and/or energy
	variables may be fixed (i.e. not updated) with 

test_string='fixrho fixrhoU fixB fixE fixothers'

	'fixothers' means that all cells outside a small sphere around
	Xtest, Ytest, Ztest are fixed

	src/calc_sources: adding the EdivE source term can be switched off:
	    test_string='nodivE'

        src/main: update_check can be switched off with 
	    test_string='noupdatecheck'

        src/calc_facefluxes and update_states: test info improved
	    test_string='calc_facefluxes update_states update_boris'

	src/set_ICs.f90: split B0 can be tested in shock tube problem

		test_string='testBsplit'

	src/library.f90: test cell size dx_BLK is reported

	src/exchange_messages: reports X,Y,Z location of negative P

----------------------------------------------------
	Makefiles and Scripts
----------------------------------------------------
	Makefiles and Scripts were changed so that they
	are better organized in directories and so that
	the user can use the PLOT and MACHINE variables
	in the main MAKEFILE to copy only the relevant
	scripts to the run directory when it is created.
	The new scripts organization is
	    Scripts/
		Run/		 - scripts for running code/processing files
		    AIX/	     -scripts for running on SP2
		    IRIX/	     -scripts for running on SGI
		    IRIX64/	     -scripts for running on SGI
		    Linux/	     -scripts for running on Linux/Beowulf
		    sn6330/	     -scripts for running on CRAY T3e
		    pp_IDL/	     -scripts for postprocessing IDL files
		    pp_TEC/	     -scripts for postprocessing TEC files
		IDL/		 - useful idl scripts
		TEC/		 - useful tec scripts
		Tools/		 - generally useful scripts

	All pIO have been moved to Scripts/Run/pp_TEC and pIDL has
	been moved to Scripts/Run/pp_IDL.

	Using make rundir_rel PLOT=TEC will copy only the TEC scripts to the 
	run directory.  Alternately lines in the Makefile can be changed to 
	permanently set PLOT=TEC.

	Using make rundir_rel MACHINE=cylon will copy only the run scripts
	for SGI and cylon.  The scripts for other SGI machines like ames or
	NCSA will not be copied.

----------------------------------------------------
	TECPLOT post processing and scripts
----------------------------------------------------
	All files and scripts were renamed to become consistant with the IDL
	naming schemes.  Therefore :
	       pIO		   =>	   pTEC
	       pIO2d		   =>	   pTEC2d
	       pIO3d		   =>	   pTEC3d
	       pIOsph		   =>	   pTECsph
	       ProcessIO.exe	   =>	   PostTEC.exe
	       ProcessIO.f90	   =>	   PostTEC.f90

	The PP make option to make PostProcess.exe has been removed and the
	associated .f90 files and one Mod file have been removed from the
	distribution.


==========================================================================
6.07
==========================================================================

	src/message_pass_equal and src/message_pass_reschange REMOVED 
		as obsolete

	src/ModMain: minDXvalue, maxDXvalue are global now

	src/write_progress
		minDXvalue, maxDXvalue common block deleted

-----------------------
	New timing tool
-----------------------

	src/ModMain: old timing variables deleted

	src/library: new timing subroutine

	Usage:

call timing('start','whatever')  ! start timing for whatever
call timing('stop','whatever')   ! stop timing for whatever
call timing('reset','whatever')  ! reset timers for whatever
call timing('reset','#all')      ! reset all timers 

call timing('show','whatever')   ! show timings for whatever
call timing('show','#all')	 ! show all timings

call timing('show1','whatever')  ! show simple timing format for whatever
call timing('speed','whatever')  ! show speed format for whatever

	src/main: calls timing() instead of MPI_WTIME()
		brief progress reports are produced by 
			call timing('speed','advance_expl')
		long progress reports are produced by
			call timing('show1','BATSRUS')  !!! to be improved

	src/read_inputs: default for #TIMING has been changed to

#TIMING
T		UseTiming
-1		dn_timing
	
	i.e. the timing is shown and reset before all AMR-s,
	at the end of each session, and at the end of the full run.
	If dn_timing is positive, then timing('show','#all') is
	called with that frequency.

	src/write_progress: 
		projection timing deleted !!! other stuff could also be deleted

	How to interpret the timing report?

-------------------------------------------------------------------------------
                          TIMING REPORT at n_step=      10

name                  #iter  #calls      sec   s/iter   s/call  percent
-------------------------------------------------------------------------------
BATSRUS                   1       1    18.62   18.625   18.625   100.00
-------------------------------------------------------------------------------
setup                     1       1     0.60    0.601    0.601     3.23
save_files               11      11     0.35    0.032    0.032     1.88
advance_expl             10      10    16.12    1.612    1.612    86.54
  barrier                10      20       0.08    0.008    0.004     0.50
  calc_face_bfo          10    2740       0.12    0.012    0.000     0.75
  set_BCs                10    5480       0.04    0.004    0.000     0.24
  calc_fluxes_bfo        10    2740       0.05    0.005    0.000     0.32
...
  update_states          10    2740       0.26    0.026    0.000     1.61
  update_check           10      10       0.30    0.030    0.030     1.83
  exchange_messages      10      10      13.34    1.334    1.334    82.79
  #others                                 0.10    0.010              0.63
#others                                 1.56    1.555              8.35
-------------------------------------------------------------------------------

	The first column gives the name of the unit timed. 
	The very first row is the timing for the whole run.
	The names below the first row are indented according to
	the calling depth: 
	subroutines called directly from main are not indented, 
	subroutines called from these are indented by 2 spaces, 
	subroutines called from these are indented by 4 spaces, etc.

	The second column gives the number of time steps when
	a call was made to timing for a particular item.

	The third column gives the number of timing calls for an item.

	The fourth, fifth and sixth columns give the actual timings
	in seconds: total time, time/iteration and time/call spent on an item.

	The seventh column gives the percentage with respect to the 
	calling "parent" subroutine, ie. the consecutive lines at the
	same indentation level should always add up to 100%.

	The #other row contains the untimed part of any given level.

	NOTE: Timings are reset at the end of sessions and before AMR-s, 
	but this does not affect the total timing for BATSRUS,
	so the last #other row contains the total time for previous
	sessions. Also the time spent on "setup" is erased by the
	reset, so it is only shown in the first timing report.

-------------------------------------------------------
	Merged in CME and modifications for HELIOSPHERE
-------------------------------------------------------

	Param/Heliosphere file NEW (doing milestone III)

	Param/CME_fluxrope file NEW

	src/set_ICs_cme: NEW file to initialize problem_cme

	src/Makefile.COMMON: compiles set_ICs_cme

	src/ModMain: NEW problem_type : problem_cme

	src/ModPhysics, src/set_physics:
                removed constants Mp RGuni Avogadro
                                  RGp MWproton OMEGAsun Gsun
                and replaced with constants as defined in a more
                general way and used for all other problem types
		set unitSI_x unitSI_u unitSI_rho to Rsun SSPsun Rhosun
                define unitUSERS
                bug fix-- scale Gbody with unitSI rather than unitUSER


	src/read_inputs:
		#HELIOSPHERE reads the same Body_T_dim and Body_rho_dim
		as the generic #BODY:

#HELIOSPHERE
2.85E06                 Body_T_dim   [K]
1.50E8                  Body_rho_dim [N/ccm]
25.00                   Qsun
1.75                    Theat
1.00                    Rheat
4.50                    SIGMAheat

		The #CME command can read parameters of the B.C. Low model:

#CME
Low             cme_type   model type ('Low')
0.7             cme_a   [scaled] contraction distance
1.2             cme_r1  [scaled] distance of spheromac from sun center
1.0             cme_r0  [scaled] diameter of spheromac
0.23            cme_a1  [Gauss]  spheromac B field strength
0.0             alpha   [scaled] cme acceleration rate
2.5E-12         cme_rho1[kg/m^3] density of background corona before contract
2.0E-13         cme_rho2[kg/m^3] density of background corona after contract
1.0             cme_B1_dim [Gauss] field strength of dipole-type B field
4.0E5           v_erupt [m/s]    cme velocity


	src/specify_refinement
		new refinement type 'all_then_focus' the default for
			problem_heliosphere
		new refinement type 'cme' default for problem_cme
	
	src/set_BCs:
		NEW boundary condition "linetied": 
			antisymmetric for B, floating for other variables

	src/set_ICs:
		milestone 3 parameters for problem_heliosphere
		calls set_ICs_cme for problem_cme

	src/calc_sources:
		gravity source terms for CME

	src/write_plot_common:
		subtract out rotation velocity before writing to file

	src/write_progress:
		write physics values relevant for problem type only

		
==========================================================================
6.08 I put this distribution onto the CVS server.
========================================================================

	fixed a bug in amr_physics.f90 : 
		max(24,nSort-i) --> min(24,nSort-i)

	Fixed bug (since v6.06) in calc_facefluxes.f90:
		the fa* coefficient was missing for the supersonic
        	(left and right going) cases in the Linde solver. 

--------------------------------
	OPTIMIZED LOAD BALANCING
--------------------------------

	src/Makefile.COMMON new file:

src/load_balance

	moves blocks from processor to processor based on the global block 
	number, which is ordered by a 3D Peano-Hilbert curve traversing
	the octree. The blocks are moved by subroutine move_block.
	The number of blocks per processor is kept almost equal by
	cutting the Peano-Hilbert curve to pieces of equal length.
	The locality of the blocks is ensured by the self similar nature
	of the Peano-Hilbert curve.

	src/number_blocks: rewritten to assign global block number
			   according to the Peano-Hilbert curve ordering

	src/main, src/amr: call load_balance after renumbering blocks

	src/refine_grid: 
		Keep refined block on same PE as much as possible,
			since load_balance will distribute them later.
		The incorrect and obsolete smallest and largest # of PE
			reporting is removed.

	src/octree: subroutine move_octree_block sets block and PE info
		in the tree when a block is moved. called from move_block

	src/ModOctree:
		new array: blocknumber_ptrs is the list of 
			octree pointers indexed by the global block number 

	src/ModParallelAMR:
		new arrays: iBlockPE_B and iProc_B are the processor and block
			indexes indexed by the global block number

		new array: implicitBlock_BP logical indexed by block and proc.

	src/set_BCs: subroutine set_outerBC_flag removed

	src/create_soln_blocks: 
		All call fix_boundary_logicals and 
		subroutine fix_boundary_logicals itself are removed. 

	src/set_block_geometry: 
		call fix_block_geometry at the end of all the 
			set_*block*geometry subroutines
		subroutine fix_block_geometry does what 
			fix_boundary_logicals and set_far_field_BC_flags did.

	src/set_ICs:
		setting true_cell, R2min etc. are removed (done earlier)

---------------------------
	NEW NAMING STANDARD
---------------------------

	Starting with this release, new variables are expected to
	follow the naming standard. Old variables should be gradually
	replaced. Basic rules:

	scalar variable name format:  partPartPart
	array variable name format:   partPartPart_IND

	The last name part can indicate the scope of the scalar variable
	or the scope of a single array element: 

		BLK - per block
		PE  - per processor
		ALL - all processors
		
	For arrays the final IND part describes the indexes with a combination
	of the following characters:

Index  Meaning             Typical index range
---------------------------------------------------------------
B	block		(1:nBlockPE) or (1:nBlockALL)
C	cells		(1:nI, 1:nJ, 1:nK) 
D	directions	(1:nDim)
F	faces		(1:nI+1,1:nJ+1,1:nK+1)
E	edges		(east_:top_)
G	ghost cells	(-1:nI+2,-1:nJ+2,-1:nK+2)
I	index (generic)
P	processors 	(0:nProc-1)
S	sides 		(1:2)
X	x faces		(1:nI+1,1:nJ,1:nK)
Y	y faces		(1:nI,1:nJ+1,1:nK)
Z	z faces		(1:nI,1:nJ,1:nK+1)
V	variables	(1:nVar) or (rho_:E_)

	The index abbreviations follow the same order as the indexes of the
	array variable.

	Some examples from the current release:

New name		Old name			File
----------------------------------------------------------------------
nProc			numprocs			ModMain
MaxBlockALL		nBLK*numprocs			parallel_setup
MaxBlockPE		nBLK				ModMain
nBlockALL		total_number_of_blocks_used	ModParallelAMR
nBlockPE		nMultiBlockLevels		ModMain
implicitBlock_BP					ModParallelAMR
iProc_B							ModParallelAMR
iBlockPE_B						ModParallelAMR
iBlockALL						load_balance
iBlockPE		iBLK				load_balance
iProc			iPE				load_balance

==========================================================================
6.09
==========================================================================

Implicit scheme merged

==========================================================================
7.00
==========================================================================

Fixed some bugs in load_balance

Fixed bugs with dt_BLK when a block has all real cells inside body

Improved on expected time

==========================================================================
7.01
==========================================================================

Fixed bug (since v6.06) for Linde solver: a Rusanov flux is added to F[Bn]

Minor bug fixes to make the code run on the Cray, and minor changes
to avoid index out of bounds on IRIX with all debugging flags on.

Fixes to make partially implicit scheme work:

1. Removed the conservative divB correction and the corresponding variables,
   because they cause error in partially implicit scheme, and 
   the conservativeness of divB terms is unlikely to be of any importance.

2. Div B is calculated from central differencing by default, because
   the gradients and face values are not all known at the interfaces
   between explicit and implicit blocks. It is also simpler to use
   central differencing.

3. Added logic to prohibit applying conservative fluxes when any of the
   blocks sending the flux is unused.

4. Check stability condition every time step (instead of every session).

5. Calculate previous state for explicit as well as implicit blocks, 
   so it can be used by the BDF2 scheme when an explicit block becomes 
   implicit.

6. Previous state w_prev is moved together with the block in load_balance.

7. n_prev is set to -100 before AMR, so the BDF2 scheme does not attempt 
   to use previous step.

Three new scripts in Scripts/Tools/

ConvertRestart.pl  - change endianness of blk*.rst and octree.rst
FixI4toI8.pl       - change 4 byte integers to 8 byte integers (in octree.rst)
FixI8toI4.pl       - change 8 byte integers to 4 byte integers (in octree.rst)

==========================================================================
7.02
==========================================================================
